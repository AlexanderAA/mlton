#!/usr/bin/env bash

set -x

# This script adds a new crosscompiler target for MLton.
#
# It takes three arguments.
#
# 1. <crossTarget>, will be used via the -b flag passed to the GCC
# cross-compiler tools.  You must already have installed the GCC
# cross-compiler tools.  This script does not do that, although you
# may find the script build-cross-gcc helpful.  <crossTarget> here
# should be the same as target in build-cross-gcc.  Examples are
# i386-pc-cygwin and sparc-sun-solaris.
#
# 2. <crossArch> specifies the target architecture.  
#    The posibilities are: sparc, x86.
#
# 3. <crossOS> specifies the target OS.
#    The possibilities are: cygwin, sunos.
#
# 4. <machine> specifies a remote machine of the target type.  After
# cross compiling the runtime, this script will ssh to that machine to
# get the values of the constants that the MLton basis library needs.
# Of course, you must be able to ssh to this machine.
#
# For example,
#   add-cross i386-pc-cygwin x86 cygwin cygwin
#   add-cross sparc-sun-solaris sparc sunos blade
# (Here cygwin happens to be the name of my Cygwin machine and blade
#  happens to be the name of my Sparc machine.)
#
# You also may need to set $libDir, which determines where the
# cross-compiler target will be installed.

set -e

die () {
	echo >&2 "$1"
	exit 1
}

usage () {
	die "usage: $name <crossTarget> <crossArch> <crossOS> <machine>"
}

case "$#" in
4)
	crossTarget="$1"
	crossArch="$2"
	crossOS="$3"
	machine="$4"
	;;
*)
	usage
	;;
esac

name=`basename $0`
original=`pwd`
dir=`dirname $0`
src=`cd $dir/.. && pwd`

# libDir is the mlton lib directory where you would like the
# cross-compiler information to be installed.  If you have installed
# from the rpms, this will usually be /usr/lib/mlton.  You must have
# write permission there.

lib="$src/build/lib"

# You shouldn't need to change anything below this line.

PATH=$src/build/bin:$PATH

rm -rf "$lib/$crossTarget"

mkdir -p "$lib/$crossTarget/include" ||
	die "Cannot write to $lib."

echo 'Making runtime.' 
cd $src/runtime
make clean
make gdtoa/arithchk.out TARGET=$crossTarget TARGET_ARCH=$crossArch TARGET_OS=$crossOS
scp gdtoa/arithchk.out $machine:/tmp
ssh $machine '/tmp/arithchk.out && rm -f /tmp/arithchk.out' >gdtoa/arith.h
( cd $src && make TARGET=$crossTarget TARGET_ARCH=$crossArch TARGET_OS=$crossOS \
	runtime targetmap ) ||
	die "Unable to make runtime.  See $src/runtime-log."

exe='print-constants'
echo 'Building print-constants executable.'
(
	mlton -build-constants true >$exe.c
	mlton -output $original/$exe -target $crossTarget $exe.c
	rm -f $exe.c
) || die "Unable to build $exe executable."

echo "Running print-constants on $machine."
cd $original
tar cf - $exe |
	ssh $machine "tar xf - && ./$exe && rm -f $exe" \
	>"$lib/$crossTarget/constants"

rm -f $original/$exe
