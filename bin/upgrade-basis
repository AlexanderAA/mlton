#!/usr/bin/env bash

set -e

die () {
	echo >&2 "$1"
	exit 1
}

name=`basename $0`

usage () {
	die "usage: $name <PATH>"
}

case "$#" in
1)
	PATH="$1"
;;
*)
	usage
;;
esac

tmp="$$.sml"

feature () {
	feature="$1"
	sml="$2"
	echo "$feature" >$tmp
	if ! mlton $tmp >/dev/null 2>&1; then
		echo "$sml"
	fi
}

feature 'fun f x : string option = TextIO.inputLine x' '
structure TextIO =
   struct
      open TextIO

      fun inputLine ins =
         case TextIO.inputLine ins of
            "" => NONE
          | s => SOME s
   end'
	
feature 'fun f x : string option = OS.FileSys.readDir x' '
structure OS =
   struct
      open OS
      structure FileSys =
         struct
            open FileSys
            fun readDir d =
               case FileSys.readDir d of
                  "" => NONE
                | s => SOME s
         end
   end'

feature 'val _ = IntInf.~>>' '
structure IntInf = 
   struct
      open IntInf

      val ~>> : int * Word.word -> int =
	 fn _ => raise Fail "IntInf.~>>"
   end'

(
cat <<-EOF
structure MLton =
   struct
      open MLton

      structure Platform =
         struct
            fun peek (l, f) = List.find f l
            fun omap (opt, f) = Option.map f opt
               
            structure Arch =
               struct
                  datatype t = datatype Platform.arch

                  val host = Platform.arch

                  val all = [(Sparc, "sparc"), (X86, "x86")]

                  fun fromString s = omap (peek (all, fn (_, s') => s = s'), #1)

                  fun toString a = #2 (valOf (peek (all, fn (a', _) => a = a')))
               end
            
            structure OS =
               struct
                  datatype t = datatype Platform.os

                  val host = Platform.os

                  val all = [(Cygwin, "cygwin"),
                             (FreeBSD, "freebsd"),
                             (Linux, "linux"),
                             (Solaris, "solaris")]
               
                  fun fromString s = omap (peek (all, fn (_, s') => s = s'), #1)

                  fun toString a = #2 (valOf (peek (all, fn (a', _) => a = a')))
               end
         end
   end
EOF
) | feature 'val _ = MLton.Platform.Arch.host' "`cat`"

rm -f $tmp
rm -f `basename $tmp .sml`
