diff --git a/README.mlton b/README.mlton
new file mode 100644
index 0000000..56e6f38
--- /dev/null
+++ b/README.mlton
@@ -0,0 +1,15 @@
+The following changes were made to the ckit Library, in addition to
+deriving the `.mlb` file from the `.cm` file:
+
+* `ast/ast-sig.sml` (modified): Rewrote use of `withtype` in signature.
+* `ast/build-ast.sml` (modified): Rewrote use of or-patterns.
+* `ast/initializer-normalizer.sml` (modified): Rewrote use of or-patterns.
+* `ast/pp/pp-ast-adornment-sig.sml` (modified): Rewrote use of `signature` in `local`.
+* `ast/pp/pp-ast-ext-sig.sml` (modified): Rewrote use of `signature` in `local`.
+* `ast/pp/pp-lib.sml` (modified): Rewrote use of or-patterns.
+* `ast/sizeof.sml` (modified): Rewrote use of or-patterns.
+* `ast/type-util-sig.sml` (modified): Rewrote use of `signature` in `local`.
+* `ast/type-util.sml` (modified): Rewrote use of or-patterns.
+* `parser/grammar/c.lex.sml` (modified): Rewrote use of vector literal.
+* `parser/parse-tree-sig.sml` (modified): Rewrote use of (sequential) `withtype` in signature.
+* `parser/parse-tree.sml` (modified): Rewrote use of (sequential) `withtype`.
diff --git a/ckit-lib.mlb b/ckit-lib.mlb
new file mode 100644
index 0000000..abc601f
--- /dev/null
+++ b/ckit-lib.mlb
@@ -0,0 +1 @@
+src/ckit-lib.mlb
diff --git a/src/ast/ast-sig.sml b/src/ast/ast-sig.sml
index 29f5eb2..367fb5a 100644
--- a/src/ast/ast-sig.sml
+++ b/src/ast/ast-sig.sml
@@ -67,7 +67,12 @@ sig
   datatype declaration
     = TypeDecl of {shadow: {strct:bool} option, tid:tid}
         (* placeholder to indicate where typedefs/enums/structs should be printed *)
-    | VarDecl of id * initExpression option
+    | VarDecl of
+        (* id *) {name: Symbol.symbol, uid: Pid.uid,
+                  location: SourceMap.location, ctype: ctype,
+                  stClass: storageClass, status: declStatus,
+                  global: bool, kind: idKind} *
+        initExpression option
 
 
   (* STATEMENTS *)
@@ -106,15 +111,31 @@ sig
     | Assign of expression * expression
     | Comma of expression * expression
     | Sub of expression * expression          
-    | Member of expression * member
-    | Arrow of expression * member
+    | Member of
+        expression *
+        (* member *) {name: Symbol.symbol, uid : Pid.uid,
+                      location : SourceMap.location,
+                      ctype: ctype, kind: memberKind}
+    | Arrow of
+        expression *
+        (* member *) {name: Symbol.symbol, uid : Pid.uid,
+                      location : SourceMap.location,
+                      ctype: ctype, kind: memberKind}
     | Deref of expression                     
     | AddrOf of expression                    
     | Binop of binop * expression * expression
     | Unop of unop * expression
     | Cast of ctype * expression
-    | Id of id
-    | EnumId of member * LargeInt.int
+    | Id of
+        (* id *) {name: Symbol.symbol, uid: Pid.uid,
+                  location: SourceMap.location, ctype: ctype,
+                  stClass: storageClass, status: declStatus,
+                  global: bool, kind: idKind}
+    | EnumId of
+        (* member *) {name: Symbol.symbol, uid : Pid.uid,
+                      location : SourceMap.location,
+                      ctype: ctype, kind: memberKind} *
+	LargeInt.int
     | SizeOf of ctype  (* not used in compiler mode; sizeof expr becomes sizeof (typeof expr)  *)
     | ExprExt of (expression, statement, binop, unop) AstExt.expressionExt
     | ErrorExpr
@@ -131,7 +152,13 @@ sig
                                        * signednessTag
     | Array of (LargeInt.int * expression) option * ctype
     | Pointer of ctype
-    | Function of ctype * (ctype * id option) list
+    | Function of
+        ctype *
+        (ctype *
+         (* id *) {name: Symbol.symbol, uid: Pid.uid,
+                   location: SourceMap.location, ctype: ctype,
+                   stClass: storageClass, status: declStatus,
+                   global: bool, kind: idKind} option) list
     | StructRef of tid (* reference to a tid bound by a struct decl *)
     | UnionRef of tid  (* reference to a tid bound by a union decl *)
     | EnumRef of tid   (* reference to a tid bound by a enumeration decl *)
@@ -151,7 +178,7 @@ sig
     | UNIONmem
     | ENUMmem of LargeInt.int
 
-  withtype member =
+  type member =
     {name: Symbol.symbol,  (* the name of the member *)
      uid : Pid.uid,        (* unique identifier *)
      location : SourceMap.location,
diff --git a/src/ast/build-ast.sml b/src/ast/build-ast.sml
index 9e8e7c7..65e32bf 100644
--- a/src/ast/build-ast.sml
+++ b/src/ast/build-ast.sml
@@ -290,7 +290,8 @@ let
 	of SOME{ntype=NONE,...} => true
 	 | _ => false
 
-  fun isPartialTy(Ast.StructRef tid | Ast.UnionRef tid) = isPartial tid
+  fun isPartialTy(Ast.StructRef tid) = isPartial tid
+    | isPartialTy(Ast.UnionRef tid) = isPartial tid
     | isPartialTy _ = false
 
 
@@ -443,7 +444,10 @@ let
       case expr
 	of Ast.Member(Ast.EXPR (expr'', aid, _), _) => 
 	    isLval (expr'', lookAid aid)
-	 | (Ast.Id _ | Ast.Sub _ | Ast.Arrow _ | Ast.Deref _) => true
+	 | Ast.Id _ => true
+	 | Ast.Sub _ => true
+	 | Ast.Arrow _ => true
+	 | Ast.Deref _ => true
 	 | _ => false
 
   fun checkAssignableLval (expr, ty, s) =
@@ -602,7 +606,9 @@ let
        NB 2: if type is array then *do* generate errors when initializer is simple  *)
 
 
-  fun TCInitializer(ctype as (Ast.TypeRef _ | Ast.Qual _), expr) =
+  fun TCInitializer(ctype as Ast.TypeRef _, expr) =
+        TCInitializer(getCoreType ctype, expr)  (* the following TCInitializer cases expect coretypes *)
+    | TCInitializer(ctype as Ast.Qual _, expr) =
         TCInitializer(getCoreType ctype, expr)  (* the following TCInitializer cases expect coretypes *)
     | TCInitializer (Ast.Array(opt, ctype), Ast.Aggregate exprs) = 
 	(case (opt, LargeInt.fromInt(List.length exprs))
@@ -650,7 +656,11 @@ let
 	      error "empty union"
 	  | NONE => bug "TCInitializer: lookTid failed"
 	  | _ => error "TCInitializer: ill-formed UnionRef type")
-    | TCInitializer (ty as (Ast.StructRef _ | Ast.UnionRef _), Ast.Simple(Ast.EXPR(coreExp, aid, _))) =
+    | TCInitializer (ty as Ast.StructRef _, Ast.Simple(Ast.EXPR(coreExp, aid, _))) =
+	if isAssignableTys {lhsTy=ty, rhsTy=lookAid aid, rhsExprOpt=SOME coreExp}
+	  then ()
+	else error "type of initializer is incompatible with type of lval"
+    | TCInitializer (ty as Ast.UnionRef _, Ast.Simple(Ast.EXPR(coreExp, aid, _))) =
 	if isAssignableTys {lhsTy=ty, rhsTy=lookAid aid, rhsExprOpt=SOME coreExp} 
 	  then ()
 	else error "type of initializer is incompatible with type of lval"
@@ -804,7 +814,9 @@ let
             b) the object has static storage duration			      
           *)
 	 (* Note: should really reduce constants arith exprs to simple constants *)
-	  fun constCheck(Ast.EXPR((Ast.StringConst _ | Ast.IntConst _ | Ast.RealConst _),_,_)) = true
+	  fun constCheck(Ast.EXPR(Ast.StringConst _,_,_)) = true
+	    | constCheck(Ast.EXPR(Ast.IntConst _,_,_)) = true
+	    | constCheck(Ast.EXPR(Ast.RealConst _,_,_)) = true
 	    | constCheck(Ast.EXPR(Ast.QuestionColon(e1, e2, e3), _, _))
 	    = constCheck e1 andalso constCheck e2 andalso constCheck e3
 	    | constCheck(Ast.EXPR(Ast.Binop(_, e1, e2), _, _))
@@ -2371,7 +2383,11 @@ end old code ******)
 		  (case spec 
 		     of PT.Signed =>
 			 (case !kind
-			    of SOME (Ast.FLOAT | Ast.DOUBLE | Ast.LONGDOUBLE) => 
+			    of SOME Ast.FLOAT =>
+				 error "illegal combination of signed with float/double/long double"
+			     | SOME Ast.DOUBLE =>
+				 error "illegal combination of signed with float/double/long double"
+			     | SOME Ast.LONGDOUBLE =>
 				 error "illegal combination of signed with float/double/long double"
 			     | _ => ();
 			  case !signed
@@ -2379,7 +2395,11 @@ end old code ******)
 			     | SOME _ => error "Multiple signed/unsigned")
 		      | PT.Unsigned =>
 			 (case !kind
-			    of SOME (Ast.FLOAT | Ast.DOUBLE | Ast.LONGDOUBLE) => 
+			    of SOME Ast.FLOAT =>
+				 error "illegal combination of unsigned with float/double/long double"
+			     | SOME Ast.DOUBLE =>
+				 error "illegal combination of unsigned with float/double/long double"
+			     | SOME Ast.LONGDOUBLE =>
 				 error "illegal combination of unsigned with float/double/long double"
 			     | _ => ();
 			  case !signed
@@ -2394,7 +2414,8 @@ end old code ******)
 					  | _ => "illegal use of char specifier"))
 		      | PT.Short =>
 			 (case !kind
-			    of (NONE | SOME Ast.INT) => (kind := SOME Ast.SHORT)
+			    of NONE => (kind := SOME Ast.SHORT)
+			     | SOME Ast.INT => (kind := SOME Ast.SHORT)
 			     | SOME ct =>
 				error (case ct
 					 of Ast.SHORT => "duplicate short specifier"
@@ -2402,7 +2423,9 @@ end old code ******)
 		      | PT.Int =>
 			 (case !kind
 			    of NONE => (kind := SOME Ast.INT)
-			     | SOME (Ast.SHORT | Ast.LONG | Ast.LONGLONG) => ()
+			     | SOME Ast.SHORT => ()
+			     | SOME Ast.LONG => ()
+			     | SOME Ast.LONGLONG => ()
 			     | SOME ct =>
 				error (case ct
 					 of Ast.INT => "duplicate int specifier"
@@ -2687,7 +2710,17 @@ end old code ******)
 				   (case lookLocalScope sym
 				      of SOME(TAG{ctype=ty,location=loc',...}) => 
 					 (case ty
-					    of (Ast.UnionRef tid | Ast.StructRef tid) => 
+					    of Ast.UnionRef tid =>
+					       if isPartial tid
+					       then SOME{tid=tid, alreadyDefined=false}
+					       else if repeated_declarations_ok
+					       then SOME{tid=tid, alreadyDefined=true}
+					       else (error("Redeclaration of type tag `"
+						       ^ tagname
+						       ^ "'; previous declaration at "
+						       ^ SM.locToString loc');
+						     NONE)
+					     | Ast.StructRef tid =>
 					       if isPartial tid
 					       then SOME{tid=tid, alreadyDefined=false}
 					       else if repeated_declarations_ok
diff --git a/src/ast/initializer-normalizer.sml b/src/ast/initializer-normalizer.sml
index 5ea8dbc..2e7a563 100644
--- a/src/ast/initializer-normalizer.sml
+++ b/src/ast/initializer-normalizer.sml
@@ -156,7 +156,13 @@ let
 		   feed (unionNorm (ctype, fields), inits)
 		| SOME _ => fail "Incomplete type for union ref"
 		| NONE => fail "Inconsistent table for union ref")
-	 | (Ast.Numeric _ | Ast.Pointer _ | Ast.Function _ | Ast.EnumRef _) =>
+	 | Ast.Numeric _ =>
+	    feed (scalarNorm ctype, inits)
+	 | Ast.Pointer _ =>
+	    feed (scalarNorm ctype, inits)
+	 | Ast.Function _ =>
+	    feed (scalarNorm ctype, inits)
+	 | Ast.EnumRef _ =>
 	    feed (scalarNorm ctype, inits)
 	 | Ast.Void => fail "Incomplete type: void"
 	 | Ast.Ellipses => fail "Cannot initialize ellipses"
diff --git a/src/ast/pp/pp-ast-adornment-sig.sml b/src/ast/pp/pp-ast-adornment-sig.sml
index a7b937b..ab6e0a9 100644
--- a/src/ast/pp/pp-ast-adornment-sig.sml
+++ b/src/ast/pp/pp-ast-adornment-sig.sml
@@ -1,14 +1,14 @@
 (* Copyright (c) 1998 by Lucent Technologies *)
 
-local 
+(* local *)
   type 'a pp =  Tables.tidtab -> OldPrettyPrint.ppstream -> 'a -> unit
 
   type ('aidinfo,'a,'b) adornment_pp = ('aidinfo -> 'a) -> 'aidinfo -> 'b
-in
+(* in *)
 signature PPASTADORNMENT = sig
   type aidinfo
   val ppExpressionAdornment: (aidinfo,Ast.coreExpression pp,Ast.expression pp) adornment_pp
   val ppStatementAdornment : (aidinfo,Ast.coreStatement pp,Ast.statement pp) adornment_pp
   val ppExternalDeclAdornment: (aidinfo,Ast.coreExternalDecl pp,Ast.externalDecl pp) adornment_pp
 end
-end
+(* end *)
diff --git a/src/ast/pp/pp-ast-ext-sig.sml b/src/ast/pp/pp-ast-ext-sig.sml
index 4169fc7..c7291ab 100644
--- a/src/ast/pp/pp-ast-ext-sig.sml
+++ b/src/ast/pp/pp-ast-ext-sig.sml
@@ -1,13 +1,13 @@
 (* Copyright (c) 1998 by Lucent Technologies *)
 
-local 
+(* local *)
   type 'a pp =  Tables.tidtab -> OldPrettyPrint.ppstream -> 'a -> unit
   type ('a, 'aidinfo) ppExt =
        (('aidinfo -> Ast.expression pp) * ('aidinfo -> Ast.statement pp) *
 	('aidinfo -> Ast.binop pp) * ('aidinfo -> Ast.unop pp))
        -> 'aidinfo
        -> Tables.tidtab -> OldPrettyPrint.ppstream -> 'a -> unit
-in
+(* in *)
 
 signature PPASTEXT = sig
   type aidinfo
@@ -24,4 +24,4 @@ signature PPASTEXT = sig
        aidinfo) ppExt
 end
 
-end
+(* end *)
diff --git a/src/ast/pp/pp-lib.sml b/src/ast/pp/pp-lib.sml
index f6386d3..70f8504 100644
--- a/src/ast/pp/pp-lib.sml
+++ b/src/ast/pp/pp-lib.sml
@@ -115,7 +115,10 @@ structure PPLib = struct
 
   fun ppId pps ({name,uid,kind,stClass,global,...}: Ast.id) = 
       case (stClass,global)
-	of ((Ast.EXTERN,_) | (_, true)) => (* globals *)
+	of (Ast.EXTERN,_) => (* globals *)
+	     if !suppressPidGlobalUnderscores then ppSymbol' pps name
+	     else ppSymbol pps (name,uid)
+	 | (_, true) => (* globals *)
 	     if !suppressPidGlobalUnderscores then ppSymbol' pps name
 	     else ppSymbol pps (name,uid)
 	 | _ => ppSymbol pps (name,uid)
diff --git a/src/ast/sizeof.sml b/src/ast/sizeof.sml
index 02705c2..aebd826 100644
--- a/src/ast/sizeof.sml
+++ b/src/ast/sizeof.sml
@@ -321,7 +321,9 @@ struct
   and process (sizesErrWarnBug as {sizes, err, warn, bug}) tidtab ty =
       case ty
 	of Ast.TypeRef tid => processTid sizesErrWarnBug tidtab tid
-	 | (Ast.StructRef tid | Ast.UnionRef tid) =>
+	 | Ast.StructRef tid =>
+	     processTid sizesErrWarnBug tidtab tid
+	 | Ast.UnionRef tid =>
 	     processTid sizesErrWarnBug tidtab tid
 	 | Ast.EnumRef _ => 
 	     let val {bits,align} = #int sizes
diff --git a/src/ast/type-util-sig.sml b/src/ast/type-util-sig.sml
index b03260b..a262146 100644
--- a/src/ast/type-util-sig.sml
+++ b/src/ast/type-util-sig.sml
@@ -1,10 +1,10 @@
 (* Copyright (c) 1998 by Lucent Technologies *)
 
-local 
+(* local *)
   type 'a type_util      = Tables.tidtab -> Ast.ctype               -> 'a 
   type 'a type_mem_util  = Tables.tidtab -> Ast.ctype * Ast.member  -> 'a 
   type 'a type_type_util = Tables.tidtab -> Ast.ctype * Ast.ctype -> 'a 
-in
+(* in *)
 
 signature TYPE_UTIL =
 sig
@@ -145,4 +145,4 @@ sig
 
 end (* signature TYPE_UTIL *)
 
-end (* local *)
+(* end (* local *) *)
diff --git a/src/ast/type-util.sml b/src/ast/type-util.sml
index 8dc30d3..851cfe8 100644
--- a/src/ast/type-util.sml
+++ b/src/ast/type-util.sml
@@ -282,7 +282,8 @@ struct
   fun isStructOrUnion tidtab ty =
     case reduceTypedef tidtab ty
       of Ast.Qual (_,ty) => isStructOrUnion tidtab ty
-       | (Ast.StructRef tid | Ast.UnionRef tid) => SOME tid
+       | Ast.StructRef tid => SOME tid
+       | Ast.UnionRef tid => SOME tid
        | _ => NONE
 
   fun isEnum tidtab (ty,member as {uid,kind=Ast.ENUMmem _,...}: Ast.member) =
@@ -553,7 +554,9 @@ struct
 	    | (Pointer ct1, Pointer ct2) => (case compose (ct1, ct2) of
 					       (SOME ct, eml) => (SOME(Pointer ct), eml)
 					     | (NONE, eml) => (NONE, eml))
-	    | ((StructRef tid1, StructRef tid2) | (UnionRef tid1, UnionRef tid2)) =>
+	    | (StructRef tid1, StructRef tid2) =>
+		if Tid.equal (tid1, tid2) then (SOME ty1, nil) else (NONE, nil)
+	    | (UnionRef tid1, UnionRef tid2) =>
 		if Tid.equal (tid1, tid2) then (SOME ty1, nil) else (NONE, nil)
 	    | _ => (NONE, nil)
 	end
@@ -651,8 +654,10 @@ struct
   fun conditionalExp tidtab {ty1, exp1Zero, ty2, exp2Zero} = (* for Eq and Neq *)
     (case (usualUnaryCnv tidtab ty1, exp1Zero, usualUnaryCnv tidtab ty2, exp2Zero) of  
        (Ast.Numeric _, _, Ast.Numeric _, _) => usualBinaryCnv tidtab (ty1, ty2) (* get common type *)
-     | ((Ast.StructRef tid1, _, Ast.StructRef tid2, _) |
-	(Ast.UnionRef tid1, _, Ast.UnionRef tid2, _)) =>
+     | (Ast.StructRef tid1, _, Ast.StructRef tid2, _) =>
+	  if Tid.equal (tid1, tid2) then SOME ty1
+	  else NONE
+     | (Ast.UnionRef tid1, _, Ast.UnionRef tid2, _) =>
 	  if Tid.equal (tid1, tid2) then SOME ty1
 	  else NONE
      | (Ast.Void, _, Ast.Void, _) => SOME ty1
@@ -745,9 +750,12 @@ struct
 	     | ([Ast.Void], nil) => (nil, nil) (* bugfix 15/jun/99: a function with a single void argument
                                                * is a function of no args  *)
      *)
-	     | ((_, nil, _) | (_, _, nil)) => ( ["Type Warning: function call has too few args"]
-					       , nil
-					       )
+	     | (_, nil, _) => (["Type Warning: function call has too few args"]
+                               , nil
+			       )
+	     | (_, _, nil) => (["Type Warning: function call has too few args"]
+			       , nil
+			       )
 	     | (nil, argl, _) => (["Type Warning: function call has too many args"]
 				  , List.map (functionArgConv tidtab) argl
 				  )
diff --git a/src/ckit-lib.mlb b/src/ckit-lib.mlb
new file mode 100644
index 0000000..57c9c92
--- /dev/null
+++ b/src/ckit-lib.mlb
@@ -0,0 +1,888 @@
+
+ann
+  "nonexhaustiveMatch warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+in
+
+local
+  basis l4 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb $(SML_LIB)/basis/unsafe.mlb
+    end
+  basis l24 =
+    bas
+      (* $/smlnj-lib.cm ====> *) $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
+    end
+  basis l71 =
+    bas
+      (* $/pp-lib.cm ====> *) $(SML_LIB)/smlnj-lib/PP/pp-lib.mlb
+    end
+  basis l96 =
+    bas
+      (* $/ml-yacc-lib.cm ====> *) $(SML_LIB)/mlyacc-lib/mlyacc-lib.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      structure gs_0 = TextIO
+   end
+   local
+      variants/type-check-control-sig.sml
+   in
+      signature gs_1 = TYPECHECKCONTROL
+   end
+   local
+      variants/parse-control-sig.sml
+   in
+      signature gs_2 = PARSECONTROL
+   end
+   local
+      signature PARSECONTROL = gs_2
+      signature TYPECHECKCONTROL = gs_1
+      variants/config-sig.sml
+   in
+      signature gs_3 = CONFIG
+   end
+   local
+      signature CONFIG = gs_3
+      signature PARSECONTROL = gs_2
+      signature TYPECHECKCONTROL = gs_1
+      structure TextIO = gs_0
+      variants/ansic/config.sml
+   in
+      structure gs_4 = Config
+   end
+   local
+      open l24
+   in
+      functor gs_5 = HashTableFn
+   end
+   local
+      ast/uidtabimp-sig.sml
+   in
+      signature gs_6 = UIDTABIMP
+   end
+   local
+      open l4
+   in
+      structure gs_7 = Word
+   end
+   local
+      structure Word = gs_7
+      ast/uid-sig.sml
+   in
+      signature gs_8 = UID
+   end
+   local
+      functor HashTableFn = gs_5
+      signature UID = gs_8
+      signature UIDTABIMP = gs_6
+      ast/uidtabimp-fn.sml
+   in
+      functor gs_9 = UidtabImpFn
+   end
+   local
+      open l4
+   in
+      structure gs_10 = Int
+   end
+   local
+      structure Int = gs_10
+      signature UID = gs_8
+      structure Word = gs_7
+      ast/uid-fn.sml
+   in
+      functor gs_11 = UidFn
+   end
+   local
+      signature UID = gs_8
+      functor UidFn = gs_11
+      ast/aid.sml
+   in
+      structure gs_12 = Aid
+   end
+   local
+      structure Aid = gs_12
+      functor UidtabImpFn = gs_9
+      ast/aidtab.sml
+   in
+      structure gs_13 = Aidtab
+   end
+   local
+      open l24
+   in
+      structure gs_14 = Format
+   end
+   local
+      open l4
+   in
+      structure gs_15 = String
+   end
+   local
+      parser/util/sourcemap-sig.sml
+   in
+      signature gs_16 = SOURCE_MAP
+   end
+   local
+      structure Config = gs_4
+      structure Format = gs_14
+      structure Int = gs_10
+      signature SOURCE_MAP = gs_16
+      structure String = gs_15
+      parser/util/sourcemap.sml
+   in
+      structure gs_17 = SourceMap
+   end
+   local
+      open l71
+   in
+      functor gs_18 = PPStreamFn
+   end
+   local
+      open l71
+   in
+      structure gs_19 = StringToken
+   end
+   local
+      open l4
+   in
+      structure gs_20 = StringCvt
+   end
+   local
+      open l4
+   in
+      structure gs_21 = List
+   end
+   local
+      structure List = gs_21
+      functor PPStreamFn = gs_18
+      structure String = gs_15
+      structure StringCvt = gs_20
+      structure StringToken = gs_19
+      parser/util/old-pp.sml
+   in
+      signature gs_22 = OLD_PRETTYPRINT
+      structure gs_23 = OldPrettyPrint
+   end
+   local
+      structure Format = gs_14
+      signature OLD_PRETTYPRINT = gs_22
+      structure OldPrettyPrint = gs_23
+      structure SourceMap = gs_17
+      structure TextIO = gs_0
+      parser/util/error-sig.sml
+   in
+      signature gs_24 = ERROR
+   end
+   local
+      signature ERROR = gs_24
+      structure Format = gs_14
+      signature OLD_PRETTYPRINT = gs_22
+      structure OldPrettyPrint = gs_23
+      structure SourceMap = gs_17
+      structure TextIO = gs_0
+      parser/util/error.sml
+   in
+      structure gs_25 = Error
+   end
+   local
+      open l96
+   in
+      functor gs_26 = Join
+      functor gs_27 = JoinWithArg
+   end
+   local
+      open l96
+   in
+      structure gs_28 = LrParser
+   end
+   local
+      open l4
+   in
+      structure gs_29 = LargeInt
+   end
+   local
+      parser/extensions/c/parse-tree-ext.sml
+   in
+      structure gs_30 = ParseTreeExt
+   end
+   local
+      structure LargeInt = gs_29
+      structure ParseTreeExt = gs_30
+      structure SourceMap = gs_17
+      parser/parse-tree-sig.sml
+   in
+      signature gs_31 = PARSETREE
+   end
+   local
+      structure LargeInt = gs_29
+      signature PARSETREE = gs_31
+      structure ParseTreeExt = gs_30
+      structure SourceMap = gs_17
+      parser/parse-tree.sml
+   in
+      structure gs_32 = ParseTree
+   end
+   local
+      structure Error = gs_25
+      structure ParseTree = gs_32
+      parser/parser-sig.sml
+   in
+      signature gs_33 = PARSER
+   end
+   local
+      open l4
+   in
+      structure gs_34 = Unsafe
+   end
+   local
+      open l4
+   in
+      structure gs_35 = IntInf
+   end
+   local
+      open l4
+   in
+      structure gs_36 = CharVector
+   end
+   local
+      open l4
+   in
+      structure gs_37 = Vector
+   end
+   local
+      open l4
+   in
+      structure gs_38 = Real
+   end
+   local
+      open l4
+   in
+      structure gs_39 = Char
+   end
+   local
+      open l24
+   in
+      structure gs_40 = AtomTable
+   end
+   local
+      open l24
+   in
+      structure gs_41 = Atom
+   end
+   local
+      structure Atom = gs_41
+      structure AtomTable = gs_40
+      structure Config = gs_4
+      parser/grammar/tdefs.sml
+   in
+      signature gs_42 = TYPEDEFS
+      structure gs_43 = TypeDefs
+   end
+   local
+      open l96
+   in
+      signature gs_44 = ARG_LEXER
+      signature gs_45 = ARG_PARSER
+      signature gs_46 = LEXER
+      signature gs_47 = LR_PARSER
+      signature gs_48 = LR_TABLE
+      signature gs_49 = PARSER
+      signature gs_50 = PARSER_DATA
+      signature gs_51 = STREAM
+      signature gs_52 = TOKEN
+   end
+   local
+      signature ARG_LEXER = gs_44
+      signature ARG_PARSER = gs_45
+      signature LEXER = gs_46
+      signature LR_PARSER = gs_47
+      signature LR_TABLE = gs_48
+      structure LargeInt = gs_29
+      signature PARSER = gs_49
+      signature PARSER_DATA = gs_50
+      signature STREAM = gs_51
+      signature TOKEN = gs_52
+      parser/grammar/c.grm.sig
+   in
+      signature gs_53 = C_LRVALS
+      signature gs_54 = C_TOKENS
+   end
+   local
+      structure Atom = gs_41
+      structure AtomTable = gs_40
+      signature C_LRVALS = gs_53
+      signature C_TOKENS = gs_54
+      structure Config = gs_4
+      signature TYPEDEFS = gs_42
+      structure TypeDefs = gs_43
+      parser/grammar/tokentable.sml
+   in
+      signature gs_55 = TOKENTABLE
+      functor gs_56 = TokenTable
+   end
+   local
+      signature C_LRVALS = gs_53
+      signature C_TOKENS = gs_54
+      structure Char = gs_39
+      structure CharVector = gs_36
+      structure Int = gs_10
+      structure IntInf = gs_35
+      structure LargeInt = gs_29
+      structure List = gs_21
+      structure Real = gs_38
+      structure SourceMap = gs_17
+      structure String = gs_15
+      structure StringCvt = gs_20
+      signature TOKENTABLE = gs_55
+      functor TokenTable = gs_56
+      structure Unsafe = gs_34
+      structure Vector = gs_37
+      parser/grammar/c.lex.sml
+   in
+      functor gs_57 = CLexFun
+   end
+   local
+      open l4
+   in
+      structure gs_58 = Array
+   end
+   local
+      open l4
+   in
+      structure gs_59 = General
+   end
+   local
+      signature ARG_LEXER = gs_44
+      signature ARG_PARSER = gs_45
+      structure Array = gs_58
+      signature C_LRVALS = gs_53
+      signature C_TOKENS = gs_54
+      structure Char = gs_39
+      structure Error = gs_25
+      structure General = gs_59
+      signature LEXER = gs_46
+      signature LR_PARSER = gs_47
+      signature LR_TABLE = gs_48
+      structure LargeInt = gs_29
+      structure List = gs_21
+      signature PARSER = gs_49
+      signature PARSER_DATA = gs_50
+      structure ParseTree = gs_32
+      signature STREAM = gs_51
+      structure SourceMap = gs_17
+      structure String = gs_15
+      signature TOKEN = gs_52
+      signature TYPEDEFS = gs_42
+      structure TypeDefs = gs_43
+      parser/grammar/c.grm.sml
+   in
+      functor gs_60 = LrValsFun
+   end
+   local
+      functor CLexFun = gs_57
+      structure Error = gs_25
+      functor Join = gs_26
+      functor JoinWithArg = gs_27
+      structure LrParser = gs_28
+      functor LrValsFun = gs_60
+      signature PARSER = gs_33
+      structure SourceMap = gs_17
+      signature TOKENTABLE = gs_55
+      signature TYPEDEFS = gs_42
+      structure TextIO = gs_0
+      functor TokenTable = gs_56
+      structure TypeDefs = gs_43
+      parser/parser.sml
+   in
+      structure gs_61 = Parser
+   end
+   local
+      open l24
+   in
+      structure gs_62 = HashString
+   end
+   local
+      signature UID = gs_8
+      functor UidFn = gs_11
+      ast/tid.sml
+   in
+      structure gs_63 = Tid
+   end
+   local
+      structure Tid = gs_63
+      ast/symbol-sig.sml
+   in
+      signature gs_64 = SYMBOL
+   end
+   local
+      structure HashString = gs_62
+      structure Int = gs_10
+      signature SYMBOL = gs_64
+      structure String = gs_15
+      structure Tid = gs_63
+      structure Word = gs_7
+      ast/symbol.sml
+   in
+      structure gs_65 = Symbol
+   end
+   local
+      signature UID = gs_8
+      functor UidFn = gs_11
+      ast/pid.sml
+   in
+      structure gs_66 = Pid
+   end
+   local
+      ast/extensions/c/ast-ext.sml
+   in
+      structure gs_67 = AstExt
+   end
+   local
+      structure Aid = gs_12
+      structure AstExt = gs_67
+      structure LargeInt = gs_29
+      structure Pid = gs_66
+      structure SourceMap = gs_17
+      structure Symbol = gs_65
+      structure Tid = gs_63
+      ast/ast-sig.sml
+   in
+      signature gs_68 = AST
+   end
+   local
+      signature AST = gs_68
+      structure Aid = gs_12
+      structure AstExt = gs_67
+      structure LargeInt = gs_29
+      structure Pid = gs_66
+      structure SourceMap = gs_17
+      structure Symbol = gs_65
+      structure Tid = gs_63
+      ast/ast.sml
+   in
+      structure gs_69 = Ast
+   end
+   local
+      structure Ast = gs_69
+      structure LargeInt = gs_29
+      structure Pid = gs_66
+      structure SourceMap = gs_17
+      structure Symbol = gs_65
+      structure Tid = gs_63
+      ast/bindings.sml
+   in
+      structure gs_70 = Bindings
+   end
+   local
+      open l24
+   in
+      functor gs_71 = BinaryMapFn
+   end
+   local
+      open l24
+   in
+      signature gs_72 = ORD_MAP
+   end
+   local
+      structure Tid = gs_63
+      functor UidtabImpFn = gs_9
+      ast/tidtab.sml
+   in
+      structure gs_73 = Tidtab
+   end
+   local
+      structure Aidtab = gs_13
+      structure Ast = gs_69
+      structure Bindings = gs_70
+      structure Tidtab = gs_73
+      ast/tables.sml
+   in
+      structure gs_74 = Tables
+   end
+   local
+      structure Aid = gs_12
+      structure Ast = gs_69
+      structure Bindings = gs_70
+      structure Error = gs_25
+      structure LargeInt = gs_29
+      signature ORD_MAP = gs_72
+      structure SourceMap = gs_17
+      structure Symbol = gs_65
+      structure Tables = gs_74
+      structure Tid = gs_63
+      ast/state-sig.sml
+   in
+      signature gs_75 = STATE
+   end
+   local
+      structure Aid = gs_12
+      structure Aidtab = gs_13
+      structure Ast = gs_69
+      functor BinaryMapFn = gs_71
+      structure Bindings = gs_70
+      structure Error = gs_25
+      structure LargeInt = gs_29
+      structure List = gs_21
+      structure Pid = gs_66
+      signature STATE = gs_75
+      structure SourceMap = gs_17
+      structure Symbol = gs_65
+      structure Tables = gs_74
+      structure Tid = gs_63
+      structure Tidtab = gs_73
+      ast/state.sml
+   in
+      structure gs_76 = State
+   end
+   local
+      ast/sizes-sig.sml
+   in
+      signature gs_77 = SIZES
+   end
+   local
+      signature SIZES = gs_77
+      ast/sizes.sml
+   in
+      structure gs_78 = Sizes
+   end
+   local
+      structure Ast = gs_69
+      structure Bindings = gs_70
+      structure Sizes = gs_78
+      structure State = gs_76
+      structure Tables = gs_74
+      structure TextIO = gs_0
+      structure Tidtab = gs_73
+      ast/parse-to-ast-sig.sml
+   in
+      signature gs_79 = PARSE_TO_AST
+   end
+   local
+      open l4
+   in
+      structure gs_80 = ListPair
+   end
+   local
+      open l4
+   in
+      structure gs_81 = Option
+   end
+   local
+      structure Ast = gs_69
+      structure Bindings = gs_70
+      structure Error = gs_25
+      structure ParseTree = gs_32
+      structure Sizes = gs_78
+      structure State = gs_76
+      structure Tables = gs_74
+      structure Tidtab = gs_73
+      ast/build-ast-sig.sml
+   in
+      signature gs_82 = BUILD_AST
+   end
+   local
+      structure Ast = gs_69
+      structure ParseTree = gs_32
+      structure ParseTreeExt = gs_30
+      structure State = gs_76
+      ast/cnv-ext-sig.sml
+   in
+      signature gs_83 = CNVEXT
+   end
+   local
+      structure Ast = gs_69
+      signature CNVEXT = gs_83
+      structure ParseTree = gs_32
+      structure ParseTreeExt = gs_30
+      structure State = gs_76
+      ast/extensions/c/cnv-ext.sml
+   in
+      structure gs_84 = CnvExt
+   end
+   local
+      structure Ast = gs_69
+      structure Bindings = gs_70
+      structure Pid = gs_66
+      structure Symbol = gs_65
+      ast/simplify-assign-ops.sml
+   in
+      structure gs_85 = SimplifyAssignOps
+   end
+   local
+      structure Ast = gs_69
+      structure Bindings = gs_70
+      signature OLD_PRETTYPRINT = gs_22
+      structure OldPrettyPrint = gs_23
+      structure Tables = gs_74
+      structure Tid = gs_63
+      ast/pp/pp-ast-sig.sml
+   in
+      signature gs_86 = PP_AST
+   end
+   local
+      open l4
+   in
+      structure gs_87 = Int32
+   end
+   local
+      structure Ast = gs_69
+      structure Int = gs_10
+      structure Int32 = gs_87
+      structure LargeInt = gs_29
+      signature OLD_PRETTYPRINT = gs_22
+      structure OldPrettyPrint = gs_23
+      structure Pid = gs_66
+      structure Real = gs_38
+      structure String = gs_15
+      structure Symbol = gs_65
+      structure Tables = gs_74
+      structure TextIO = gs_0
+      structure Tid = gs_63
+      structure Tidtab = gs_73
+      ast/pp/pp-lib.sml
+   in
+      structure gs_88 = PPLib
+   end
+   local
+      structure Ast = gs_69
+      structure AstExt = gs_67
+      signature OLD_PRETTYPRINT = gs_22
+      structure OldPrettyPrint = gs_23
+      structure Tables = gs_74
+      ast/pp/pp-ast-ext-sig.sml
+   in
+      signature gs_89 = PPASTEXT
+   end
+   local
+      signature PPASTEXT = gs_89
+      ast/extensions/c/pp-ast-ext-fn.sml
+   in
+      functor gs_90 = PPAstExtFn
+   end
+   local
+      structure Ast = gs_69
+      signature OLD_PRETTYPRINT = gs_22
+      structure OldPrettyPrint = gs_23
+      structure Tables = gs_74
+      ast/pp/pp-ast-adornment-sig.sml
+   in
+      signature gs_91 = PPASTADORNMENT
+   end
+   local
+      structure Ast = gs_69
+      structure Bindings = gs_70
+      structure Int = gs_10
+      structure LargeInt = gs_29
+      structure List = gs_21
+      signature OLD_PRETTYPRINT = gs_22
+      structure OldPrettyPrint = gs_23
+      structure Option = gs_81
+      signature PPASTADORNMENT = gs_91
+      functor PPAstExtFn = gs_90
+      structure PPLib = gs_88
+      signature PP_AST = gs_86
+      structure Pid = gs_66
+      structure SourceMap = gs_17
+      structure Tid = gs_63
+      structure Tidtab = gs_73
+      ast/pp/pp-ast-fn.sml
+   in
+      functor gs_92 = PPAstFn
+   end
+   local
+      structure Ast = gs_69
+      signature PPASTADORNMENT = gs_91
+      functor PPAstFn = gs_92
+      ast/pp/pp-ast.sml
+   in
+      structure gs_93 = PPAst
+   end
+   local
+      structure Ast = gs_69
+      ast/ctype-eq.sml
+   in
+      structure gs_94 = CTypeEq
+   end
+   local
+      structure Ast = gs_69
+      structure Sizes = gs_78
+      structure Tables = gs_74
+      ast/sizeof-sig.sml
+   in
+      signature gs_95 = SIZEOF
+   end
+   local
+      structure Ast = gs_69
+      structure LargeInt = gs_29
+      structure Tables = gs_74
+      ast/type-util-sig.sml
+   in
+      signature gs_96 = TYPE_UTIL
+   end
+   local
+      structure Ast = gs_69
+      structure Bindings = gs_70
+      structure Config = gs_4
+      structure Int = gs_10
+      structure List = gs_21
+      structure PPAst = gs_93
+      structure PPLib = gs_88
+      structure Pid = gs_66
+      structure Symbol = gs_65
+      signature TYPE_UTIL = gs_96
+      structure Tables = gs_74
+      structure Tid = gs_63
+      structure Tidtab = gs_73
+      ast/type-util.sml
+   in
+      structure gs_97 = TypeUtil
+   end
+   local
+      structure Ast = gs_69
+      functor BinaryMapFn = gs_71
+      structure Bindings = gs_70
+      structure Config = gs_4
+      structure Int = gs_10
+      structure LargeInt = gs_29
+      structure List = gs_21
+      structure Pid = gs_66
+      signature SIZEOF = gs_95
+      structure Sizes = gs_78
+      structure Tables = gs_74
+      structure TextIO = gs_0
+      structure Tid = gs_63
+      structure Tidtab = gs_73
+      structure TypeUtil = gs_97
+      ast/sizeof.sml
+   in
+      structure gs_98 = Sizeof
+   end
+   local
+      structure ParseTree = gs_32
+      structure Real = gs_38
+      structure Tid = gs_63
+      ast/anonymous-structs.sml
+   in
+      structure gs_99 = AnonymousStructs
+      structure gs_100 = TyEq
+   end
+   local
+      structure Aid = gs_12
+      structure Ast = gs_69
+      structure Bindings = gs_70
+      structure Tid = gs_63
+      ast/initializer-normalizer-sig.sml
+   in
+      signature gs_101 = INITIALIZER_NORMALIZER
+   end
+   local
+      structure Aid = gs_12
+      structure Ast = gs_69
+      structure Bindings = gs_70
+      signature INITIALIZER_NORMALIZER = gs_101
+      structure LargeInt = gs_29
+      structure SourceMap = gs_17
+      structure String = gs_15
+      structure Tid = gs_63
+      ast/initializer-normalizer.sml
+   in
+      structure gs_102 = InitializerNormalizer
+   end
+   local
+      structure Aid = gs_12
+      structure Aidtab = gs_13
+      structure AnonymousStructs = gs_99
+      structure Ast = gs_69
+      signature BUILD_AST = gs_82
+      functor BinaryMapFn = gs_71
+      structure Bindings = gs_70
+      structure CTypeEq = gs_94
+      structure CnvExt = gs_84
+      structure Config = gs_4
+      structure Error = gs_25
+      structure InitializerNormalizer = gs_102
+      structure Int = gs_10
+      structure LargeInt = gs_29
+      structure List = gs_21
+      structure ListPair = gs_80
+      structure Option = gs_81
+      structure PPAst = gs_93
+      structure PPLib = gs_88
+      structure ParseTree = gs_32
+      structure ParseTreeExt = gs_30
+      structure Pid = gs_66
+      structure SimplifyAssignOps = gs_85
+      structure Sizeof = gs_98
+      structure Sizes = gs_78
+      structure SourceMap = gs_17
+      structure State = gs_76
+      structure String = gs_15
+      structure Symbol = gs_65
+      structure Tables = gs_74
+      structure TextIO = gs_0
+      structure Tid = gs_63
+      structure Tidtab = gs_73
+      structure TyEq = gs_100
+      structure TypeUtil = gs_97
+      structure Word = gs_7
+      ast/build-ast.sml
+   in
+      structure gs_103 = BuildAst
+   end
+   local
+      structure Ast = gs_69
+      structure Bindings = gs_70
+      structure BuildAst = gs_103
+      structure Error = gs_25
+      signature PARSE_TO_AST = gs_79
+      structure PPAst = gs_93
+      structure PPLib = gs_88
+      structure Parser = gs_61
+      structure Sizes = gs_78
+      structure State = gs_76
+      structure Tables = gs_74
+      structure TextIO = gs_0
+      structure Tidtab = gs_73
+      ast/parse-to-ast.sml
+   in
+      structure gs_104 = ParseToAst
+   end
+in
+   signature AST = gs_68
+   structure Aidtab = gs_13
+   structure Ast = gs_69
+   structure Bindings = gs_70
+   signature CONFIG = gs_3
+   structure Config = gs_4
+   signature PARSECONTROL = gs_2
+   signature PARSER = gs_33
+   signature PARSETREE = gs_31
+   signature PARSE_TO_AST = gs_79
+   structure PPAst = gs_93
+   signature PP_AST = gs_86
+   structure ParseToAst = gs_104
+   structure ParseTree = gs_32
+   structure Parser = gs_61
+   structure Pid = gs_66
+   signature SOURCE_MAP = gs_16
+   structure Sizeof = gs_98
+   structure Sizes = gs_78
+   structure SourceMap = gs_17
+   structure State = gs_76
+   structure Symbol = gs_65
+   signature TYPECHECKCONTROL = gs_1
+   structure Tables = gs_74
+   structure Tid = gs_63
+   structure Tidtab = gs_73
+   structure TypeUtil = gs_97
+   signature UID = gs_8
+   signature UIDTABIMP = gs_6
+end
+end
+
+end
diff --git a/src/parser/grammar/c.grm.desc b/src/parser/grammar/c.grm.desc
new file mode 100644
index 0000000..b8dbcf2
--- /dev/null
+++ b/src/parser/grammar/c.grm.desc
@@ -0,0 +1,10001 @@
+1 shift/reduce conflict
+
+error:  state 404: shift/reduce conflict (shift ELSE, reduce by rule 18)
+
+state 0:
+
+	translationUnit : . tu 
+
+
+	translationUnit	goto 420
+	tu	goto 1
+
+	.	reduce by rule 1
+
+
+state 1:
+
+	translationUnit : tu .  (reduce by rule 0)
+	tu : tu . externalDeclaration 
+
+	SEMICOLON	shift 42
+	LPAREN	shift 41
+	TIMES	shift 40
+	ID	shift 39
+	EXTERN	shift 38
+	AUTO	shift 37
+	STATIC	shift 36
+	REGISTER	shift 35
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	TYPEDEF	shift 20
+	TYPE_NAME	shift 19
+
+	pointer	goto 18
+	notypeDeclarator	goto 17
+	notypeDirectDeclarator	goto 16
+	declarationSpecifiers	goto 15
+	declarationModifiers	goto 14
+	storageClassSpecifier	goto 13
+	typeSpecifier	goto 12
+	typeSpecifierReserved	goto 11
+	typeQualifier	goto 10
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	fDefDeclaration	goto 7
+	functionDefinition	goto 6
+	declaration	goto 5
+	declaration1	goto 4
+	externalDeclaration	goto 3
+	structOrUnion	goto 2
+
+	.	reduce by rule 0
+
+
+state 2:
+
+	structOrUnionSpecifier : structOrUnion . LCURLY structDeclarationList RCURLY 
+	structOrUnionSpecifier : structOrUnion . ID LCURLY structDeclarationList RCURLY 
+	structOrUnionSpecifier : structOrUnion . TYPE_NAME LCURLY structDeclarationList RCURLY 
+	structOrUnionSpecifier : structOrUnion . ID 
+	structOrUnionSpecifier : structOrUnion . TYPE_NAME 
+
+	LCURLY	shift 45
+	ID	shift 44
+	TYPE_NAME	shift 43
+
+
+	.	error
+
+
+state 3:
+
+	tu : tu externalDeclaration .  (reduce by rule 2)
+
+
+
+	.	reduce by rule 2
+
+
+state 4:
+
+	declaration : declaration1 . SEMICOLON 
+
+	SEMICOLON	shift 46
+
+
+	.	error
+
+
+state 5:
+
+	externalDeclaration : declaration .  (reduce by rule 3)
+
+
+
+	.	reduce by rule 3
+
+
+state 6:
+
+	externalDeclaration : functionDefinition .  (reduce by rule 5)
+
+
+
+	.	reduce by rule 5
+
+
+state 7:
+
+	functionDefinition : fDefDeclaration . compoundStatement 
+	functionDefinition : fDefDeclaration . declarationList compoundStatement 
+
+	LCURLY	shift 52
+	EXTERN	shift 38
+	AUTO	shift 37
+	STATIC	shift 36
+	REGISTER	shift 35
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	TYPEDEF	shift 20
+	TYPE_NAME	shift 19
+
+	compoundStatement	goto 51
+	declarationSpecifiers	goto 50
+	declarationModifiers	goto 49
+	storageClassSpecifier	goto 13
+	typeSpecifier	goto 12
+	typeSpecifierReserved	goto 11
+	typeQualifier	goto 10
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	declarationList	goto 48
+	declaration	goto 47
+	declaration1	goto 4
+	structOrUnion	goto 2
+
+	.	error
+
+
+state 8:
+
+	typeSpecifier : structOrUnionSpecifier .  (reduce by rule 119)
+
+
+
+	.	reduce by rule 119
+
+
+state 9:
+
+	typeSpecifier : enumSpecifier .  (reduce by rule 120)
+
+
+
+	.	reduce by rule 120
+
+
+state 10:
+
+	declarationModifiers : typeQualifier .  (reduce by rule 110)
+
+
+
+	.	reduce by rule 110
+
+
+state 11:
+
+	typeSpecifier : typeSpecifierReserved .  (reduce by rule 118)
+
+
+
+	.	reduce by rule 118
+
+
+state 12:
+
+	declarationSpecifiers : typeSpecifier . reservedDeclarationSpecifier 
+
+
+	reservedDeclarationSpecifier	goto 53
+
+	.	reduce by rule 101
+
+
+state 13:
+
+	declarationModifiers : storageClassSpecifier .  (reduce by rule 108)
+
+
+
+	.	reduce by rule 108
+
+
+state 14:
+
+	declarationSpecifiers : declarationModifiers . typeSpecifier reservedDeclarationSpecifier 
+	declarationModifiers : declarationModifiers . storageClassSpecifier 
+	declarationModifiers : declarationModifiers . typeQualifier 
+	fDefDeclaration : declarationModifiers . notypeDeclarator 
+	declaration1 : declarationModifiers . notypeInitDeclaratorList 
+
+	LPAREN	shift 41
+	TIMES	shift 40
+	ID	shift 39
+	EXTERN	shift 38
+	AUTO	shift 37
+	STATIC	shift 36
+	REGISTER	shift 35
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	TYPEDEF	shift 20
+	TYPE_NAME	shift 19
+
+	notypeInitDeclarator	goto 59
+	notypeInitDeclaratorList	goto 58
+	pointer	goto 18
+	notypeDeclarator	goto 57
+	notypeDirectDeclarator	goto 16
+	storageClassSpecifier	goto 56
+	typeSpecifier	goto 55
+	typeSpecifierReserved	goto 11
+	typeQualifier	goto 54
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	structOrUnion	goto 2
+
+	.	error
+
+
+state 15:
+
+	fDefDeclaration : declarationSpecifiers . declarator 
+	declaration1 : declarationSpecifiers .  (reduce by rule 23)
+	declaration1 : declarationSpecifiers . initDeclaratorList 
+
+	LPAREN	shift 68
+	TIMES	shift 40
+	ID	shift 39
+	TYPE_NAME	shift 67
+
+	initDeclarator	goto 66
+	initDeclaratorList	goto 65
+	pointer	goto 64
+	declarator	goto 63
+	aftertypeDeclarator	goto 62
+	notypeDeclarator	goto 61
+	aftertypeDirectDeclarator	goto 60
+	notypeDirectDeclarator	goto 16
+
+	.	reduce by rule 23
+
+
+state 16:
+
+	notypeDeclarator : notypeDirectDeclarator .  (reduce by rule 182)
+	notypeDirectDeclarator : notypeDirectDeclarator . LBRACE RBRACE 
+	notypeDirectDeclarator : notypeDirectDeclarator . LBRACE expr RBRACE 
+	notypeDirectDeclarator : notypeDirectDeclarator . LPAREN RPAREN 
+	notypeDirectDeclarator : notypeDirectDeclarator . LPAREN parameterTypeList RPAREN 
+	notypeDirectDeclarator : notypeDirectDeclarator . LPAREN identlist RPAREN 
+
+	LPAREN	shift 70
+	LBRACE	shift 69
+
+
+	.	reduce by rule 182
+
+
+state 17:
+
+	fDefDeclaration : notypeDeclarator .  (reduce by rule 218)
+
+
+
+	.	reduce by rule 218
+
+
+state 18:
+
+	notypeDeclarator : pointer . notypeDirectDeclarator 
+
+	LPAREN	shift 41
+	ID	shift 39
+
+	notypeDirectDeclarator	goto 71
+
+	.	error
+
+
+state 19:
+
+	typeSpecifier : TYPE_NAME .  (reduce by rule 121)
+
+
+
+	.	reduce by rule 121
+
+
+state 20:
+
+	storageClassSpecifier : TYPEDEF .  (reduce by rule 167)
+
+
+
+	.	reduce by rule 167
+
+
+state 21:
+
+	typeSpecifierReserved : VOID .  (reduce by rule 122)
+
+
+
+	.	reduce by rule 122
+
+
+state 22:
+
+	typeSpecifierReserved : SIGNED .  (reduce by rule 129)
+
+
+
+	.	reduce by rule 129
+
+
+state 23:
+
+	typeSpecifierReserved : UNSIGNED .  (reduce by rule 130)
+
+
+
+	.	reduce by rule 130
+
+
+state 24:
+
+	structOrUnion : UNION .  (reduce by rule 137)
+
+
+
+	.	reduce by rule 137
+
+
+state 25:
+
+	structOrUnion : STRUCT .  (reduce by rule 136)
+
+
+
+	.	reduce by rule 136
+
+
+state 26:
+
+	typeSpecifierReserved : SHORT .  (reduce by rule 124)
+
+
+
+	.	reduce by rule 124
+
+
+state 27:
+
+	typeSpecifierReserved : LONG .  (reduce by rule 126)
+
+
+
+	.	reduce by rule 126
+
+
+state 28:
+
+	typeSpecifierReserved : INT .  (reduce by rule 125)
+
+
+
+	.	reduce by rule 125
+
+
+state 29:
+
+	typeSpecifierReserved : FLOAT .  (reduce by rule 127)
+
+
+
+	.	reduce by rule 127
+
+
+state 30:
+
+	enumSpecifier : ENUM . LCURLY enumeratorList trailingComma RCURLY 
+	enumSpecifier : ENUM . ID LCURLY enumeratorList trailingComma RCURLY 
+	enumSpecifier : ENUM . TYPE_NAME LCURLY enumeratorList trailingComma RCURLY 
+	enumSpecifier : ENUM . ID 
+	enumSpecifier : ENUM . TYPE_NAME 
+
+	LCURLY	shift 74
+	ID	shift 73
+	TYPE_NAME	shift 72
+
+
+	.	error
+
+
+state 31:
+
+	typeSpecifierReserved : DOUBLE .  (reduce by rule 128)
+
+
+
+	.	reduce by rule 128
+
+
+state 32:
+
+	typeSpecifierReserved : CHAR .  (reduce by rule 123)
+
+
+
+	.	reduce by rule 123
+
+
+state 33:
+
+	typeQualifier : VOLATILE .  (reduce by rule 153)
+
+
+
+	.	reduce by rule 153
+
+
+state 34:
+
+	typeQualifier : CONST .  (reduce by rule 152)
+
+
+
+	.	reduce by rule 152
+
+
+state 35:
+
+	storageClassSpecifier : REGISTER .  (reduce by rule 166)
+
+
+
+	.	reduce by rule 166
+
+
+state 36:
+
+	storageClassSpecifier : STATIC .  (reduce by rule 164)
+
+
+
+	.	reduce by rule 164
+
+
+state 37:
+
+	storageClassSpecifier : AUTO .  (reduce by rule 165)
+
+
+
+	.	reduce by rule 165
+
+
+state 38:
+
+	storageClassSpecifier : EXTERN .  (reduce by rule 163)
+
+
+
+	.	reduce by rule 163
+
+
+state 39:
+
+	notypeDirectDeclarator : ID .  (reduce by rule 197)
+
+
+
+	.	reduce by rule 197
+
+
+state 40:
+
+	pointer : TIMES .  (reduce by rule 186)
+	pointer : TIMES . typeQualifierList 
+	pointer : TIMES . pointer 
+	pointer : TIMES . typeQualifierList pointer 
+
+	TIMES	shift 40
+	CONST	shift 34
+	VOLATILE	shift 33
+
+	pointer	goto 77
+	typeQualifier	goto 76
+	typeQualifierList	goto 75
+
+	.	reduce by rule 186
+
+
+state 41:
+
+	notypeDirectDeclarator : LPAREN . notypeDeclarator RPAREN 
+
+	LPAREN	shift 41
+	TIMES	shift 40
+	ID	shift 39
+
+	pointer	goto 18
+	notypeDeclarator	goto 78
+	notypeDirectDeclarator	goto 16
+
+	.	error
+
+
+state 42:
+
+	externalDeclaration : SEMICOLON .  (reduce by rule 4)
+
+
+
+	.	reduce by rule 4
+
+
+state 43:
+
+	structOrUnionSpecifier : structOrUnion TYPE_NAME . LCURLY structDeclarationList RCURLY 
+	structOrUnionSpecifier : structOrUnion TYPE_NAME .  (reduce by rule 135)
+
+	LCURLY	shift 79
+
+
+	.	reduce by rule 135
+
+
+state 44:
+
+	structOrUnionSpecifier : structOrUnion ID . LCURLY structDeclarationList RCURLY 
+	structOrUnionSpecifier : structOrUnion ID .  (reduce by rule 134)
+
+	LCURLY	shift 80
+
+
+	.	reduce by rule 134
+
+
+state 45:
+
+	structOrUnionSpecifier : structOrUnion LCURLY . structDeclarationList RCURLY 
+
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	TYPE_NAME	shift 19
+
+	typeSpecifier	goto 85
+	typeSpecifierReserved	goto 11
+	typeQualifier	goto 76
+	typeQualifierList	goto 84
+	specifierQualifierList	goto 83
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	structOrUnion	goto 2
+	structDeclarationList	goto 82
+	structDeclaration	goto 81
+
+	.	error
+
+
+state 46:
+
+	declaration : declaration1 SEMICOLON .  (reduce by rule 22)
+
+
+
+	.	reduce by rule 22
+
+
+state 47:
+
+	declarationList : declaration .  (reduce by rule 214)
+
+
+
+	.	reduce by rule 214
+
+
+state 48:
+
+	declarationList : declarationList . declaration 
+	functionDefinition : fDefDeclaration declarationList . compoundStatement 
+
+	LCURLY	shift 52
+	EXTERN	shift 38
+	AUTO	shift 37
+	STATIC	shift 36
+	REGISTER	shift 35
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	TYPEDEF	shift 20
+	TYPE_NAME	shift 19
+
+	compoundStatement	goto 87
+	declarationSpecifiers	goto 50
+	declarationModifiers	goto 49
+	storageClassSpecifier	goto 13
+	typeSpecifier	goto 12
+	typeSpecifierReserved	goto 11
+	typeQualifier	goto 10
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	declaration	goto 86
+	declaration1	goto 4
+	structOrUnion	goto 2
+
+	.	error
+
+
+state 49:
+
+	declarationSpecifiers : declarationModifiers . typeSpecifier reservedDeclarationSpecifier 
+	declarationModifiers : declarationModifiers . storageClassSpecifier 
+	declarationModifiers : declarationModifiers . typeQualifier 
+	declaration1 : declarationModifiers . notypeInitDeclaratorList 
+
+	LPAREN	shift 41
+	TIMES	shift 40
+	ID	shift 39
+	EXTERN	shift 38
+	AUTO	shift 37
+	STATIC	shift 36
+	REGISTER	shift 35
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	TYPEDEF	shift 20
+	TYPE_NAME	shift 19
+
+	notypeInitDeclarator	goto 59
+	notypeInitDeclaratorList	goto 58
+	pointer	goto 18
+	notypeDeclarator	goto 88
+	notypeDirectDeclarator	goto 16
+	storageClassSpecifier	goto 56
+	typeSpecifier	goto 55
+	typeSpecifierReserved	goto 11
+	typeQualifier	goto 54
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	structOrUnion	goto 2
+
+	.	error
+
+
+state 50:
+
+	declaration1 : declarationSpecifiers .  (reduce by rule 23)
+	declaration1 : declarationSpecifiers . initDeclaratorList 
+
+	LPAREN	shift 68
+	TIMES	shift 40
+	ID	shift 39
+	TYPE_NAME	shift 67
+
+	initDeclarator	goto 66
+	initDeclaratorList	goto 65
+	pointer	goto 64
+	declarator	goto 89
+	aftertypeDeclarator	goto 62
+	notypeDeclarator	goto 61
+	aftertypeDirectDeclarator	goto 60
+	notypeDirectDeclarator	goto 16
+
+	.	reduce by rule 23
+
+
+state 51:
+
+	functionDefinition : fDefDeclaration compoundStatement .  (reduce by rule 221)
+
+
+
+	.	reduce by rule 221
+
+
+state 52:
+
+	compoundStatement : LCURLY . pushScope declarationList ostatementlist popScope RCURLY 
+	compoundStatement : LCURLY . ostatementlist RCURLY 
+
+	SEMICOLON	shift 125
+	LPAREN	shift 124
+	LCURLY	shift 52
+	RCURLY	reduce by rule 27
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 115
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	EXTERN	reduce by rule 245
+	AUTO	reduce by rule 245
+	STATIC	reduce by rule 245
+	REGISTER	reduce by rule 245
+	CONST	reduce by rule 245
+	VOLATILE	reduce by rule 245
+	IF	shift 110
+	FOR	shift 109
+	DO	shift 108
+	SWITCH	shift 107
+	CASE	shift 106
+	DEFAULT	shift 105
+	WHILE	shift 104
+	RETURN	shift 103
+	BREAK	shift 102
+	CONTINUE	shift 101
+	GOTO	shift 100
+	CHAR	reduce by rule 245
+	DOUBLE	reduce by rule 245
+	ENUM	reduce by rule 245
+	FLOAT	reduce by rule 245
+	INT	reduce by rule 245
+	LONG	reduce by rule 245
+	SHORT	reduce by rule 245
+	STRUCT	reduce by rule 245
+	UNION	reduce by rule 245
+	UNSIGNED	reduce by rule 245
+	SIGNED	reduce by rule 245
+	VOID	reduce by rule 245
+	SIZEOF	shift 99
+	TYPEDEF	reduce by rule 245
+	TYPE_NAME	reduce by rule 245
+
+	statement	goto 98
+	ostatementlist	goto 97
+	statementlist	goto 96
+	compoundStatement	goto 95
+	expr	goto 94
+	exprWComma	goto 93
+	unaryOperator	goto 92
+	pushScope	goto 91
+	strings	goto 90
+
+	.	error
+
+
+state 53:
+
+	declarationSpecifiers : typeSpecifier reservedDeclarationSpecifier .  (reduce by rule 99)
+	reservedDeclarationSpecifier : reservedDeclarationSpecifier . specifierQualifierReserved 
+	reservedDeclarationSpecifier : reservedDeclarationSpecifier . storageClassSpecifier 
+
+	EXTERN	shift 38
+	AUTO	shift 37
+	STATIC	shift 36
+	REGISTER	shift 35
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	TYPEDEF	shift 20
+
+	specifierQualifierReserved	goto 131
+	storageClassSpecifier	goto 130
+	typeSpecifierReserved	goto 129
+	typeQualifier	goto 128
+	enumSpecifier	goto 127
+	structOrUnionSpecifier	goto 126
+	structOrUnion	goto 2
+
+	.	reduce by rule 99
+
+
+state 54:
+
+	declarationModifiers : declarationModifiers typeQualifier .  (reduce by rule 111)
+
+
+
+	.	reduce by rule 111
+
+
+state 55:
+
+	declarationSpecifiers : declarationModifiers typeSpecifier . reservedDeclarationSpecifier 
+
+
+	reservedDeclarationSpecifier	goto 132
+
+	.	reduce by rule 101
+
+
+state 56:
+
+	declarationModifiers : declarationModifiers storageClassSpecifier .  (reduce by rule 109)
+
+
+
+	.	reduce by rule 109
+
+
+state 57:
+
+	notypeInitDeclarator : notypeDeclarator .  (reduce by rule 176)
+	notypeInitDeclarator : notypeDeclarator . EQUALS initializer 
+	fDefDeclaration : declarationModifiers notypeDeclarator .  (reduce by rule 220)
+
+	SEMICOLON	reduce by rule 176
+	LCURLY	reduce by rule 220
+	COMMA	reduce by rule 176
+	EQUALS	shift 133
+	EXTERN	reduce by rule 220
+	AUTO	reduce by rule 220
+	STATIC	reduce by rule 220
+	REGISTER	reduce by rule 220
+	CONST	reduce by rule 220
+	VOLATILE	reduce by rule 220
+	CHAR	reduce by rule 220
+	DOUBLE	reduce by rule 220
+	ENUM	reduce by rule 220
+	FLOAT	reduce by rule 220
+	INT	reduce by rule 220
+	LONG	reduce by rule 220
+	SHORT	reduce by rule 220
+	STRUCT	reduce by rule 220
+	UNION	reduce by rule 220
+	UNSIGNED	reduce by rule 220
+	SIGNED	reduce by rule 220
+	VOID	reduce by rule 220
+	TYPEDEF	reduce by rule 220
+	TYPE_NAME	reduce by rule 220
+
+
+	.	error
+
+
+state 58:
+
+	notypeInitDeclaratorList : notypeInitDeclaratorList . COMMA initDeclarator 
+	declaration1 : declarationModifiers notypeInitDeclaratorList .  (reduce by rule 25)
+
+	COMMA	shift 134
+
+
+	.	reduce by rule 25
+
+
+state 59:
+
+	notypeInitDeclaratorList : notypeInitDeclarator .  (reduce by rule 174)
+
+
+
+	.	reduce by rule 174
+
+
+state 60:
+
+	aftertypeDeclarator : aftertypeDirectDeclarator .  (reduce by rule 180)
+	aftertypeDirectDeclarator : aftertypeDirectDeclarator . LBRACE RBRACE 
+	aftertypeDirectDeclarator : aftertypeDirectDeclarator . LBRACE expr RBRACE 
+	aftertypeDirectDeclarator : aftertypeDirectDeclarator . LPAREN RPAREN 
+	aftertypeDirectDeclarator : aftertypeDirectDeclarator . LPAREN parameterTypeList RPAREN 
+	aftertypeDirectDeclarator : aftertypeDirectDeclarator . LPAREN identlist RPAREN 
+
+	LPAREN	shift 136
+	LBRACE	shift 135
+
+
+	.	reduce by rule 180
+
+
+state 61:
+
+	declarator : notypeDeclarator .  (reduce by rule 179)
+
+
+
+	.	reduce by rule 179
+
+
+state 62:
+
+	declarator : aftertypeDeclarator .  (reduce by rule 178)
+
+
+
+	.	reduce by rule 178
+
+
+state 63:
+
+	initDeclarator : declarator .  (reduce by rule 172)
+	initDeclarator : declarator . EQUALS initializer 
+	fDefDeclaration : declarationSpecifiers declarator .  (reduce by rule 219)
+
+	SEMICOLON	reduce by rule 172
+	LCURLY	reduce by rule 219
+	COMMA	reduce by rule 172
+	EQUALS	shift 137
+	EXTERN	reduce by rule 219
+	AUTO	reduce by rule 219
+	STATIC	reduce by rule 219
+	REGISTER	reduce by rule 219
+	CONST	reduce by rule 219
+	VOLATILE	reduce by rule 219
+	CHAR	reduce by rule 219
+	DOUBLE	reduce by rule 219
+	ENUM	reduce by rule 219
+	FLOAT	reduce by rule 219
+	INT	reduce by rule 219
+	LONG	reduce by rule 219
+	SHORT	reduce by rule 219
+	STRUCT	reduce by rule 219
+	UNION	reduce by rule 219
+	UNSIGNED	reduce by rule 219
+	SIGNED	reduce by rule 219
+	VOID	reduce by rule 219
+	TYPEDEF	reduce by rule 219
+	TYPE_NAME	reduce by rule 219
+
+
+	.	error
+
+
+state 64:
+
+	aftertypeDeclarator : pointer . aftertypeDirectDeclarator 
+	notypeDeclarator : pointer . notypeDirectDeclarator 
+
+	LPAREN	shift 68
+	ID	shift 39
+	TYPE_NAME	shift 67
+
+	aftertypeDirectDeclarator	goto 138
+	notypeDirectDeclarator	goto 71
+
+	.	error
+
+
+state 65:
+
+	initDeclaratorList : initDeclaratorList . COMMA initDeclarator 
+	declaration1 : declarationSpecifiers initDeclaratorList .  (reduce by rule 24)
+
+	COMMA	shift 139
+
+
+	.	reduce by rule 24
+
+
+state 66:
+
+	initDeclaratorList : initDeclarator .  (reduce by rule 170)
+
+
+
+	.	reduce by rule 170
+
+
+state 67:
+
+	aftertypeDirectDeclarator : TYPE_NAME .  (reduce by rule 190)
+
+
+
+	.	reduce by rule 190
+
+
+state 68:
+
+	aftertypeDirectDeclarator : LPAREN . aftertypeDeclarator RPAREN 
+	notypeDirectDeclarator : LPAREN . notypeDeclarator RPAREN 
+
+	LPAREN	shift 68
+	TIMES	shift 40
+	ID	shift 39
+	TYPE_NAME	shift 67
+
+	pointer	goto 64
+	aftertypeDeclarator	goto 140
+	notypeDeclarator	goto 78
+	aftertypeDirectDeclarator	goto 60
+	notypeDirectDeclarator	goto 16
+
+	.	error
+
+
+state 69:
+
+	notypeDirectDeclarator : notypeDirectDeclarator LBRACE . RBRACE 
+	notypeDirectDeclarator : notypeDirectDeclarator LBRACE . expr RBRACE 
+
+	LPAREN	shift 124
+	RBRACE	shift 143
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 141
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 70:
+
+	notypeDirectDeclarator : notypeDirectDeclarator LPAREN . RPAREN 
+	notypeDirectDeclarator : notypeDirectDeclarator LPAREN . parameterTypeList RPAREN 
+	notypeDirectDeclarator : notypeDirectDeclarator LPAREN . identlist RPAREN 
+
+	RPAREN	shift 151
+	ID	shift 150
+	EXTERN	shift 38
+	AUTO	shift 37
+	STATIC	shift 36
+	REGISTER	shift 35
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	TYPEDEF	shift 20
+	TYPE_NAME	shift 19
+
+	declarationSpecifiers	goto 149
+	declarationModifiers	goto 148
+	storageClassSpecifier	goto 13
+	typeSpecifier	goto 12
+	typeSpecifierReserved	goto 11
+	typeQualifier	goto 10
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	identlist	goto 147
+	parameterList	goto 146
+	parameterTypeList	goto 145
+	parameterDeclaration	goto 144
+	structOrUnion	goto 2
+
+	.	error
+
+
+state 71:
+
+	notypeDeclarator : pointer notypeDirectDeclarator .  (reduce by rule 183)
+	notypeDirectDeclarator : notypeDirectDeclarator . LBRACE RBRACE 
+	notypeDirectDeclarator : notypeDirectDeclarator . LBRACE expr RBRACE 
+	notypeDirectDeclarator : notypeDirectDeclarator . LPAREN RPAREN 
+	notypeDirectDeclarator : notypeDirectDeclarator . LPAREN parameterTypeList RPAREN 
+	notypeDirectDeclarator : notypeDirectDeclarator . LPAREN identlist RPAREN 
+
+	LPAREN	shift 70
+	LBRACE	shift 69
+
+
+	.	reduce by rule 183
+
+
+state 72:
+
+	enumSpecifier : ENUM TYPE_NAME . LCURLY enumeratorList trailingComma RCURLY 
+	enumSpecifier : ENUM TYPE_NAME .  (reduce by rule 158)
+
+	LCURLY	shift 152
+
+
+	.	reduce by rule 158
+
+
+state 73:
+
+	enumSpecifier : ENUM ID . LCURLY enumeratorList trailingComma RCURLY 
+	enumSpecifier : ENUM ID .  (reduce by rule 157)
+
+	LCURLY	shift 153
+
+
+	.	reduce by rule 157
+
+
+state 74:
+
+	enumSpecifier : ENUM LCURLY . enumeratorList trailingComma RCURLY 
+
+	ID	shift 156
+
+	enumeratorList	goto 155
+	enumerator	goto 154
+
+	.	error
+
+
+state 75:
+
+	pointer : TIMES typeQualifierList .  (reduce by rule 187)
+	pointer : TIMES typeQualifierList . pointer 
+
+	TIMES	shift 40
+
+	pointer	goto 157
+
+	.	reduce by rule 187
+
+
+state 76:
+
+	typeQualifierList : typeQualifier .  (reduce by rule 116)
+	typeQualifierList : typeQualifier . typeQualifierList 
+
+	CONST	shift 34
+	VOLATILE	shift 33
+
+	typeQualifier	goto 76
+	typeQualifierList	goto 158
+
+	.	reduce by rule 116
+
+
+state 77:
+
+	pointer : TIMES pointer .  (reduce by rule 188)
+
+
+
+	.	reduce by rule 188
+
+
+state 78:
+
+	notypeDirectDeclarator : LPAREN notypeDeclarator . RPAREN 
+
+	RPAREN	shift 159
+
+
+	.	error
+
+
+state 79:
+
+	structOrUnionSpecifier : structOrUnion TYPE_NAME LCURLY . structDeclarationList RCURLY 
+
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	TYPE_NAME	shift 19
+
+	typeSpecifier	goto 85
+	typeSpecifierReserved	goto 11
+	typeQualifier	goto 76
+	typeQualifierList	goto 84
+	specifierQualifierList	goto 83
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	structOrUnion	goto 2
+	structDeclarationList	goto 160
+	structDeclaration	goto 81
+
+	.	error
+
+
+state 80:
+
+	structOrUnionSpecifier : structOrUnion ID LCURLY . structDeclarationList RCURLY 
+
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	TYPE_NAME	shift 19
+
+	typeSpecifier	goto 85
+	typeSpecifierReserved	goto 11
+	typeQualifier	goto 76
+	typeQualifierList	goto 84
+	specifierQualifierList	goto 83
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	structOrUnion	goto 2
+	structDeclarationList	goto 161
+	structDeclaration	goto 81
+
+	.	error
+
+
+state 81:
+
+	structDeclarationList : structDeclaration .  (reduce by rule 138)
+
+
+
+	.	reduce by rule 138
+
+
+state 82:
+
+	structOrUnionSpecifier : structOrUnion LCURLY structDeclarationList . RCURLY 
+	structDeclarationList : structDeclarationList . structDeclaration 
+
+	RCURLY	shift 163
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	TYPE_NAME	shift 19
+
+	typeSpecifier	goto 85
+	typeSpecifierReserved	goto 11
+	typeQualifier	goto 76
+	typeQualifierList	goto 84
+	specifierQualifierList	goto 83
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	structOrUnion	goto 2
+	structDeclaration	goto 162
+
+	.	error
+
+
+state 83:
+
+	structDeclaration : specifierQualifierList . structDeclaratorList SEMICOLON 
+
+	COLON	shift 167
+	LPAREN	shift 68
+	TIMES	shift 40
+	ID	shift 39
+	TYPE_NAME	shift 67
+
+	pointer	goto 64
+	declarator	goto 166
+	aftertypeDeclarator	goto 62
+	notypeDeclarator	goto 61
+	aftertypeDirectDeclarator	goto 60
+	notypeDirectDeclarator	goto 16
+	structDeclarator	goto 165
+	structDeclaratorList	goto 164
+
+	.	error
+
+
+state 84:
+
+	specifierQualifierList : typeQualifierList . typeSpecifier reservedSpecifierQualifiers 
+	structDeclaration : typeQualifierList . notypeStructDeclaratorList SEMICOLON 
+
+	COLON	shift 172
+	LPAREN	shift 41
+	TIMES	shift 40
+	ID	shift 39
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	TYPE_NAME	shift 19
+
+	pointer	goto 18
+	notypeDeclarator	goto 171
+	notypeDirectDeclarator	goto 16
+	typeSpecifier	goto 170
+	typeSpecifierReserved	goto 11
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	structOrUnion	goto 2
+	notypeStructDeclarator	goto 169
+	notypeStructDeclaratorList	goto 168
+
+	.	error
+
+
+state 85:
+
+	specifierQualifierList : typeSpecifier . reservedSpecifierQualifiers 
+
+
+	reservedSpecifierQualifiers	goto 173
+
+	.	reduce by rule 114
+
+
+state 86:
+
+	declarationList : declarationList declaration .  (reduce by rule 215)
+
+
+
+	.	reduce by rule 215
+
+
+state 87:
+
+	functionDefinition : fDefDeclaration declarationList compoundStatement .  (reduce by rule 222)
+
+
+
+	.	reduce by rule 222
+
+
+state 88:
+
+	notypeInitDeclarator : notypeDeclarator .  (reduce by rule 176)
+	notypeInitDeclarator : notypeDeclarator . EQUALS initializer 
+
+	EQUALS	shift 133
+
+
+	.	reduce by rule 176
+
+
+state 89:
+
+	initDeclarator : declarator .  (reduce by rule 172)
+	initDeclarator : declarator . EQUALS initializer 
+
+	EQUALS	shift 137
+
+
+	.	reduce by rule 172
+
+
+state 90:
+
+	expr : strings .  (reduce by rule 88)
+
+
+
+	.	reduce by rule 88
+
+
+state 91:
+
+	compoundStatement : LCURLY pushScope . declarationList ostatementlist popScope RCURLY 
+
+	EXTERN	shift 38
+	AUTO	shift 37
+	STATIC	shift 36
+	REGISTER	shift 35
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	TYPEDEF	shift 20
+	TYPE_NAME	shift 19
+
+	declarationSpecifiers	goto 50
+	declarationModifiers	goto 49
+	storageClassSpecifier	goto 13
+	typeSpecifier	goto 12
+	typeSpecifierReserved	goto 11
+	typeQualifier	goto 10
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	declarationList	goto 174
+	declaration	goto 47
+	declaration1	goto 4
+	structOrUnion	goto 2
+
+	.	error
+
+
+state 92:
+
+	expr : unaryOperator . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 175
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 93:
+
+	statement : exprWComma . SEMICOLON 
+	exprWComma : exprWComma . COMMA expr 
+
+	SEMICOLON	shift 177
+	COMMA	shift 176
+
+
+	.	error
+
+
+state 94:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+	exprWComma : expr .  (reduce by rule 91)
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 91
+
+
+state 95:
+
+	statement : compoundStatement .  (reduce by rule 14)
+
+
+
+	.	reduce by rule 14
+
+
+state 96:
+
+	ostatementlist : statementlist .  (reduce by rule 26)
+	statementlist : statementlist . statement 
+
+	SEMICOLON	shift 125
+	LPAREN	shift 124
+	LCURLY	shift 52
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 115
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	IF	shift 110
+	FOR	shift 109
+	DO	shift 108
+	SWITCH	shift 107
+	CASE	shift 106
+	DEFAULT	shift 105
+	WHILE	shift 104
+	RETURN	shift 103
+	BREAK	shift 102
+	CONTINUE	shift 101
+	GOTO	shift 100
+	SIZEOF	shift 99
+
+	statement	goto 214
+	compoundStatement	goto 95
+	expr	goto 94
+	exprWComma	goto 93
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	reduce by rule 26
+
+
+state 97:
+
+	compoundStatement : LCURLY ostatementlist . RCURLY 
+
+	RCURLY	shift 215
+
+
+	.	error
+
+
+state 98:
+
+	statementlist : statement .  (reduce by rule 28)
+
+
+
+	.	reduce by rule 28
+
+
+state 99:
+
+	expr : SIZEOF . expr 
+	expr : SIZEOF . LPAREN typeName RPAREN 
+
+	LPAREN	shift 217
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 216
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 100:
+
+	statement : GOTO . ID SEMICOLON 
+
+	ID	shift 218
+
+
+	.	error
+
+
+state 101:
+
+	statement : CONTINUE . SEMICOLON 
+
+	SEMICOLON	shift 219
+
+
+	.	error
+
+
+state 102:
+
+	statement : BREAK . SEMICOLON 
+
+	SEMICOLON	shift 220
+
+
+	.	error
+
+
+state 103:
+
+	statement : RETURN . opExpr SEMICOLON 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 94
+	opExpr	goto 222
+	exprWComma	goto 221
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	reduce by rule 93
+
+
+state 104:
+
+	statement : WHILE . LPAREN exprWComma RPAREN statement 
+
+	LPAREN	shift 223
+
+
+	.	error
+
+
+state 105:
+
+	statement : DEFAULT . COLON statement 
+
+	COLON	shift 224
+
+
+	.	error
+
+
+state 106:
+
+	statement : CASE . exprWComma COLON statement 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 94
+	exprWComma	goto 225
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 107:
+
+	statement : SWITCH . LPAREN exprWComma RPAREN statement 
+
+	LPAREN	shift 226
+
+
+	.	error
+
+
+state 108:
+
+	statement : DO . statement WHILE LPAREN exprWComma RPAREN SEMICOLON 
+
+	SEMICOLON	shift 125
+	LPAREN	shift 124
+	LCURLY	shift 52
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 115
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	IF	shift 110
+	FOR	shift 109
+	DO	shift 108
+	SWITCH	shift 107
+	CASE	shift 106
+	DEFAULT	shift 105
+	WHILE	shift 104
+	RETURN	shift 103
+	BREAK	shift 102
+	CONTINUE	shift 101
+	GOTO	shift 100
+	SIZEOF	shift 99
+
+	statement	goto 227
+	compoundStatement	goto 95
+	expr	goto 94
+	exprWComma	goto 93
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 109:
+
+	statement : FOR . LPAREN opExpr SEMICOLON opExpr SEMICOLON opExpr RPAREN statement 
+
+	LPAREN	shift 228
+
+
+	.	error
+
+
+state 110:
+
+	statement : IF . LPAREN exprWComma RPAREN statement 
+	statement : IF . LPAREN exprWComma RPAREN statement ELSE statement 
+
+	LPAREN	shift 229
+
+
+	.	error
+
+
+state 111:
+
+	expr : CCONST .  (reduce by rule 86)
+
+
+
+	.	reduce by rule 86
+
+
+state 112:
+
+	strings : STRING .  (reduce by rule 89)
+	strings : STRING . strings 
+
+	STRING	shift 112
+
+	strings	goto 230
+
+	.	reduce by rule 89
+
+
+state 113:
+
+	expr : REALNUM .  (reduce by rule 85)
+
+
+
+	.	reduce by rule 85
+
+
+state 114:
+
+	expr : DECNUM .  (reduce by rule 84)
+
+
+
+	.	reduce by rule 84
+
+
+state 115:
+
+	statement : ID . COLON statement 
+	expr : ID .  (reduce by rule 87)
+
+	COLON	shift 231
+
+
+	.	reduce by rule 87
+
+
+state 116:
+
+	expr : DEC . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 232
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 117:
+
+	expr : INC . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 233
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 118:
+
+	unaryOperator : TIMES .  (reduce by rule 33)
+
+
+
+	.	reduce by rule 33
+
+
+state 119:
+
+	unaryOperator : BANG .  (reduce by rule 37)
+
+
+
+	.	reduce by rule 37
+
+
+state 120:
+
+	unaryOperator : MINUS .  (reduce by rule 35)
+
+
+
+	.	reduce by rule 35
+
+
+state 121:
+
+	unaryOperator : PLUS .  (reduce by rule 34)
+
+
+
+	.	reduce by rule 34
+
+
+state 122:
+
+	unaryOperator : TILDE .  (reduce by rule 36)
+
+
+
+	.	reduce by rule 36
+
+
+state 123:
+
+	unaryOperator : AMP .  (reduce by rule 32)
+
+
+
+	.	reduce by rule 32
+
+
+state 124:
+
+	expr : LPAREN . typeName RPAREN expr 
+	expr : LPAREN . exprWComma RPAREN 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	SIZEOF	shift 99
+	TYPE_NAME	shift 19
+
+	expr	goto 94
+	exprWComma	goto 237
+	unaryOperator	goto 92
+	typeName	goto 236
+	typeSpecifier	goto 85
+	typeSpecifierReserved	goto 11
+	typeQualifier	goto 76
+	typeQualifierList	goto 235
+	specifierQualifierList	goto 234
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	structOrUnion	goto 2
+	strings	goto 90
+
+	.	error
+
+
+state 125:
+
+	statement : SEMICOLON .  (reduce by rule 21)
+
+
+
+	.	reduce by rule 21
+
+
+state 126:
+
+	specifierQualifierReserved : structOrUnionSpecifier .  (reduce by rule 106)
+
+
+
+	.	reduce by rule 106
+
+
+state 127:
+
+	specifierQualifierReserved : enumSpecifier .  (reduce by rule 107)
+
+
+
+	.	reduce by rule 107
+
+
+state 128:
+
+	specifierQualifierReserved : typeQualifier .  (reduce by rule 105)
+
+
+
+	.	reduce by rule 105
+
+
+state 129:
+
+	specifierQualifierReserved : typeSpecifierReserved .  (reduce by rule 104)
+
+
+
+	.	reduce by rule 104
+
+
+state 130:
+
+	reservedDeclarationSpecifier : reservedDeclarationSpecifier storageClassSpecifier .  (reduce by rule 103)
+
+
+
+	.	reduce by rule 103
+
+
+state 131:
+
+	reservedDeclarationSpecifier : reservedDeclarationSpecifier specifierQualifierReserved .  (reduce by rule 102)
+
+
+
+	.	reduce by rule 102
+
+
+state 132:
+
+	declarationSpecifiers : declarationModifiers typeSpecifier reservedDeclarationSpecifier .  (reduce by rule 100)
+	reservedDeclarationSpecifier : reservedDeclarationSpecifier . specifierQualifierReserved 
+	reservedDeclarationSpecifier : reservedDeclarationSpecifier . storageClassSpecifier 
+
+	EXTERN	shift 38
+	AUTO	shift 37
+	STATIC	shift 36
+	REGISTER	shift 35
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	TYPEDEF	shift 20
+
+	specifierQualifierReserved	goto 131
+	storageClassSpecifier	goto 130
+	typeSpecifierReserved	goto 129
+	typeQualifier	goto 128
+	enumSpecifier	goto 127
+	structOrUnionSpecifier	goto 126
+	structOrUnion	goto 2
+
+	.	reduce by rule 100
+
+
+state 133:
+
+	notypeInitDeclarator : notypeDeclarator EQUALS . initializer 
+
+	LPAREN	shift 124
+	LCURLY	shift 240
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 239
+	unaryOperator	goto 92
+	initializer	goto 238
+	strings	goto 90
+
+	.	error
+
+
+state 134:
+
+	notypeInitDeclaratorList : notypeInitDeclaratorList COMMA . initDeclarator 
+
+	LPAREN	shift 68
+	TIMES	shift 40
+	ID	shift 39
+	TYPE_NAME	shift 67
+
+	initDeclarator	goto 241
+	pointer	goto 64
+	declarator	goto 89
+	aftertypeDeclarator	goto 62
+	notypeDeclarator	goto 61
+	aftertypeDirectDeclarator	goto 60
+	notypeDirectDeclarator	goto 16
+
+	.	error
+
+
+state 135:
+
+	aftertypeDirectDeclarator : aftertypeDirectDeclarator LBRACE . RBRACE 
+	aftertypeDirectDeclarator : aftertypeDirectDeclarator LBRACE . expr RBRACE 
+
+	LPAREN	shift 124
+	RBRACE	shift 243
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 242
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 136:
+
+	aftertypeDirectDeclarator : aftertypeDirectDeclarator LPAREN . RPAREN 
+	aftertypeDirectDeclarator : aftertypeDirectDeclarator LPAREN . parameterTypeList RPAREN 
+	aftertypeDirectDeclarator : aftertypeDirectDeclarator LPAREN . identlist RPAREN 
+
+	RPAREN	shift 246
+	ID	shift 150
+	EXTERN	shift 38
+	AUTO	shift 37
+	STATIC	shift 36
+	REGISTER	shift 35
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	TYPEDEF	shift 20
+	TYPE_NAME	shift 19
+
+	declarationSpecifiers	goto 149
+	declarationModifiers	goto 148
+	storageClassSpecifier	goto 13
+	typeSpecifier	goto 12
+	typeSpecifierReserved	goto 11
+	typeQualifier	goto 10
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	identlist	goto 245
+	parameterList	goto 146
+	parameterTypeList	goto 244
+	parameterDeclaration	goto 144
+	structOrUnion	goto 2
+
+	.	error
+
+
+state 137:
+
+	initDeclarator : declarator EQUALS . initializer 
+
+	LPAREN	shift 124
+	LCURLY	shift 240
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 239
+	unaryOperator	goto 92
+	initializer	goto 247
+	strings	goto 90
+
+	.	error
+
+
+state 138:
+
+	aftertypeDeclarator : pointer aftertypeDirectDeclarator .  (reduce by rule 181)
+	aftertypeDirectDeclarator : aftertypeDirectDeclarator . LBRACE RBRACE 
+	aftertypeDirectDeclarator : aftertypeDirectDeclarator . LBRACE expr RBRACE 
+	aftertypeDirectDeclarator : aftertypeDirectDeclarator . LPAREN RPAREN 
+	aftertypeDirectDeclarator : aftertypeDirectDeclarator . LPAREN parameterTypeList RPAREN 
+	aftertypeDirectDeclarator : aftertypeDirectDeclarator . LPAREN identlist RPAREN 
+
+	LPAREN	shift 136
+	LBRACE	shift 135
+
+
+	.	reduce by rule 181
+
+
+state 139:
+
+	initDeclaratorList : initDeclaratorList COMMA . initDeclarator 
+
+	LPAREN	shift 68
+	TIMES	shift 40
+	ID	shift 39
+	TYPE_NAME	shift 67
+
+	initDeclarator	goto 248
+	pointer	goto 64
+	declarator	goto 89
+	aftertypeDeclarator	goto 62
+	notypeDeclarator	goto 61
+	aftertypeDirectDeclarator	goto 60
+	notypeDirectDeclarator	goto 16
+
+	.	error
+
+
+state 140:
+
+	aftertypeDirectDeclarator : LPAREN aftertypeDeclarator . RPAREN 
+
+	RPAREN	shift 249
+
+
+	.	error
+
+
+state 141:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+	notypeDirectDeclarator : notypeDirectDeclarator LBRACE expr . RBRACE 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	RBRACE	shift 250
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	error
+
+
+state 142:
+
+	expr : ID .  (reduce by rule 87)
+
+
+
+	.	reduce by rule 87
+
+
+state 143:
+
+	notypeDirectDeclarator : notypeDirectDeclarator LBRACE RBRACE .  (reduce by rule 199)
+
+
+
+	.	reduce by rule 199
+
+
+state 144:
+
+	parameterList : parameterDeclaration .  (reduce by rule 237)
+
+
+
+	.	reduce by rule 237
+
+
+state 145:
+
+	notypeDirectDeclarator : notypeDirectDeclarator LPAREN parameterTypeList . RPAREN 
+
+	RPAREN	shift 251
+
+
+	.	error
+
+
+state 146:
+
+	parameterList : parameterList . COMMA parameterDeclaration 
+	parameterTypeList : parameterList .  (reduce by rule 235)
+	parameterTypeList : parameterList . COMMA ELIPSIS 
+
+	COMMA	shift 252
+
+
+	.	reduce by rule 235
+
+
+state 147:
+
+	notypeDirectDeclarator : notypeDirectDeclarator LPAREN identlist . RPAREN 
+	identlist : identlist . COMMA ID 
+
+	RPAREN	shift 254
+	COMMA	shift 253
+
+
+	.	error
+
+
+state 148:
+
+	declarationSpecifiers : declarationModifiers . typeSpecifier reservedDeclarationSpecifier 
+	declarationModifiers : declarationModifiers . storageClassSpecifier 
+	declarationModifiers : declarationModifiers . typeQualifier 
+	parameterDeclaration : declarationModifiers . notypeDeclarator 
+	parameterDeclaration : declarationModifiers . abstractDeclarator 
+
+	LPAREN	shift 260
+	LBRACE	shift 259
+	TIMES	shift 40
+	ID	shift 39
+	EXTERN	shift 38
+	AUTO	shift 37
+	STATIC	shift 36
+	REGISTER	shift 35
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	TYPEDEF	shift 20
+	TYPE_NAME	shift 19
+
+	abstractDeclarator	goto 258
+	directAbstractDeclarator	goto 257
+	pointer	goto 256
+	notypeDeclarator	goto 255
+	notypeDirectDeclarator	goto 16
+	storageClassSpecifier	goto 56
+	typeSpecifier	goto 55
+	typeSpecifierReserved	goto 11
+	typeQualifier	goto 54
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	structOrUnion	goto 2
+
+	.	error
+
+
+state 149:
+
+	parameterDeclaration : declarationSpecifiers . notypeDeclarator 
+	parameterDeclaration : declarationSpecifiers . parmDeclarator 
+	parameterDeclaration : declarationSpecifiers .  (reduce by rule 241)
+	parameterDeclaration : declarationSpecifiers . abstractDeclarator 
+
+	LPAREN	shift 260
+	LBRACE	shift 259
+	TIMES	shift 40
+	ID	shift 39
+	TYPE_NAME	shift 266
+
+	abstractDeclarator	goto 265
+	directAbstractDeclarator	goto 257
+	pointer	goto 264
+	notypeDeclarator	goto 263
+	parmDeclarator	goto 262
+	notypeDirectDeclarator	goto 16
+	parmDirectDeclarator	goto 261
+
+	.	reduce by rule 241
+
+
+state 150:
+
+	identlist : ID .  (reduce by rule 216)
+
+
+
+	.	reduce by rule 216
+
+
+state 151:
+
+	notypeDirectDeclarator : notypeDirectDeclarator LPAREN RPAREN .  (reduce by rule 201)
+
+
+
+	.	reduce by rule 201
+
+
+state 152:
+
+	enumSpecifier : ENUM TYPE_NAME LCURLY . enumeratorList trailingComma RCURLY 
+
+	ID	shift 156
+
+	enumeratorList	goto 267
+	enumerator	goto 154
+
+	.	error
+
+
+state 153:
+
+	enumSpecifier : ENUM ID LCURLY . enumeratorList trailingComma RCURLY 
+
+	ID	shift 156
+
+	enumeratorList	goto 268
+	enumerator	goto 154
+
+	.	error
+
+
+state 154:
+
+	enumeratorList : enumerator .  (reduce by rule 160)
+
+
+
+	.	reduce by rule 160
+
+
+state 155:
+
+	enumeratorList : enumeratorList . COMMA enumerator 
+	enumSpecifier : ENUM LCURLY enumeratorList . trailingComma RCURLY 
+
+	COMMA	shift 270
+
+	trailingComma	goto 269
+
+	.	reduce by rule 168
+
+
+state 156:
+
+	enumerator : ID .  (reduce by rule 161)
+	enumerator : ID . EQUALS expr 
+
+	EQUALS	shift 271
+
+
+	.	reduce by rule 161
+
+
+state 157:
+
+	pointer : TIMES typeQualifierList pointer .  (reduce by rule 189)
+
+
+
+	.	reduce by rule 189
+
+
+state 158:
+
+	typeQualifierList : typeQualifier typeQualifierList .  (reduce by rule 117)
+
+
+
+	.	reduce by rule 117
+
+
+state 159:
+
+	notypeDirectDeclarator : LPAREN notypeDeclarator RPAREN .  (reduce by rule 198)
+
+
+
+	.	reduce by rule 198
+
+
+state 160:
+
+	structOrUnionSpecifier : structOrUnion TYPE_NAME LCURLY structDeclarationList . RCURLY 
+	structDeclarationList : structDeclarationList . structDeclaration 
+
+	RCURLY	shift 272
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	TYPE_NAME	shift 19
+
+	typeSpecifier	goto 85
+	typeSpecifierReserved	goto 11
+	typeQualifier	goto 76
+	typeQualifierList	goto 84
+	specifierQualifierList	goto 83
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	structOrUnion	goto 2
+	structDeclaration	goto 162
+
+	.	error
+
+
+state 161:
+
+	structOrUnionSpecifier : structOrUnion ID LCURLY structDeclarationList . RCURLY 
+	structDeclarationList : structDeclarationList . structDeclaration 
+
+	RCURLY	shift 273
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	TYPE_NAME	shift 19
+
+	typeSpecifier	goto 85
+	typeSpecifierReserved	goto 11
+	typeQualifier	goto 76
+	typeQualifierList	goto 84
+	specifierQualifierList	goto 83
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	structOrUnion	goto 2
+	structDeclaration	goto 162
+
+	.	error
+
+
+state 162:
+
+	structDeclarationList : structDeclarationList structDeclaration .  (reduce by rule 139)
+
+
+
+	.	reduce by rule 139
+
+
+state 163:
+
+	structOrUnionSpecifier : structOrUnion LCURLY structDeclarationList RCURLY .  (reduce by rule 131)
+
+
+
+	.	reduce by rule 131
+
+
+state 164:
+
+	structDeclaratorList : structDeclaratorList . COMMA structDeclarator 
+	structDeclaration : specifierQualifierList structDeclaratorList . SEMICOLON 
+
+	SEMICOLON	shift 275
+	COMMA	shift 274
+
+
+	.	error
+
+
+state 165:
+
+	structDeclaratorList : structDeclarator .  (reduce by rule 142)
+
+
+
+	.	reduce by rule 142
+
+
+state 166:
+
+	structDeclarator : declarator .  (reduce by rule 146)
+	structDeclarator : declarator . COLON expr 
+
+	COLON	shift 276
+
+
+	.	reduce by rule 146
+
+
+state 167:
+
+	structDeclarator : COLON . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 277
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 168:
+
+	notypeStructDeclaratorList : notypeStructDeclaratorList . COMMA structDeclarator 
+	structDeclaration : typeQualifierList notypeStructDeclaratorList . SEMICOLON 
+
+	SEMICOLON	shift 279
+	COMMA	shift 278
+
+
+	.	error
+
+
+state 169:
+
+	notypeStructDeclaratorList : notypeStructDeclarator .  (reduce by rule 144)
+
+
+
+	.	reduce by rule 144
+
+
+state 170:
+
+	specifierQualifierList : typeQualifierList typeSpecifier . reservedSpecifierQualifiers 
+
+
+	reservedSpecifierQualifiers	goto 280
+
+	.	reduce by rule 114
+
+
+state 171:
+
+	notypeStructDeclarator : notypeDeclarator .  (reduce by rule 149)
+	notypeStructDeclarator : notypeDeclarator . COLON expr 
+
+	COLON	shift 281
+
+
+	.	reduce by rule 149
+
+
+state 172:
+
+	notypeStructDeclarator : COLON . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 282
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 173:
+
+	reservedSpecifierQualifiers : reservedSpecifierQualifiers . specifierQualifierReserved 
+	specifierQualifierList : typeSpecifier reservedSpecifierQualifiers .  (reduce by rule 112)
+
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+
+	specifierQualifierReserved	goto 283
+	typeSpecifierReserved	goto 129
+	typeQualifier	goto 128
+	enumSpecifier	goto 127
+	structOrUnionSpecifier	goto 126
+	structOrUnion	goto 2
+
+	.	reduce by rule 112
+
+
+state 174:
+
+	compoundStatement : LCURLY pushScope declarationList . ostatementlist popScope RCURLY 
+	declarationList : declarationList . declaration 
+
+	SEMICOLON	shift 125
+	LPAREN	shift 124
+	LCURLY	shift 52
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 115
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	EXTERN	shift 38
+	AUTO	shift 37
+	STATIC	shift 36
+	REGISTER	shift 35
+	CONST	shift 34
+	VOLATILE	shift 33
+	IF	shift 110
+	FOR	shift 109
+	DO	shift 108
+	SWITCH	shift 107
+	CASE	shift 106
+	DEFAULT	shift 105
+	WHILE	shift 104
+	RETURN	shift 103
+	BREAK	shift 102
+	CONTINUE	shift 101
+	GOTO	shift 100
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	SIZEOF	shift 99
+	TYPEDEF	shift 20
+	TYPE_NAME	shift 19
+
+	statement	goto 98
+	ostatementlist	goto 284
+	statementlist	goto 96
+	compoundStatement	goto 95
+	expr	goto 94
+	exprWComma	goto 93
+	unaryOperator	goto 92
+	declarationSpecifiers	goto 50
+	declarationModifiers	goto 49
+	storageClassSpecifier	goto 13
+	typeSpecifier	goto 12
+	typeSpecifierReserved	goto 11
+	typeQualifier	goto 10
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	declaration	goto 86
+	declaration1	goto 4
+	structOrUnion	goto 2
+	strings	goto 90
+
+	.	reduce by rule 27
+
+
+state 175:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : unaryOperator expr .  (reduce by rule 72)
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+
+
+	.	reduce by rule 72
+
+
+state 176:
+
+	exprWComma : exprWComma COMMA . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 285
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 177:
+
+	statement : exprWComma SEMICOLON .  (reduce by rule 20)
+
+
+
+	.	reduce by rule 20
+
+
+state 178:
+
+	expr : expr RSHIFT . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 286
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 179:
+
+	expr : expr LSHIFT . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 287
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 180:
+
+	expr : expr AND . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 288
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 181:
+
+	expr : expr OR . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 289
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 182:
+
+	expr : expr NEQ . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 290
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 183:
+
+	expr : expr EQ . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 291
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 184:
+
+	expr : expr GT . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 292
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 185:
+
+	expr : expr LT . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 293
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 186:
+
+	expr : expr GTE . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 294
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 187:
+
+	expr : expr LTE . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 295
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 188:
+
+	expr : expr RSHIFTEQUALS . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 296
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 189:
+
+	expr : expr LSHIFTEQUALS . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 297
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 190:
+
+	expr : expr ANDEQUALS . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 298
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 191:
+
+	expr : expr OREQUALS . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 299
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 192:
+
+	expr : expr DIVEQUALS . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 300
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 193:
+
+	expr : expr TIMESEQUALS . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 301
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 194:
+
+	expr : expr MODEQUALS . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 302
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 195:
+
+	expr : expr XOREQUALS . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 303
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 196:
+
+	expr : expr MINUSEQUALS . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 304
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 197:
+
+	expr : expr PLUSEQUALS . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 305
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 198:
+
+	expr : expr EQUALS . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 306
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 199:
+
+	expr : expr ARROW . ID 
+	expr : expr ARROW . TYPE_NAME 
+
+	ID	shift 308
+	TYPE_NAME	shift 307
+
+
+	.	error
+
+
+state 200:
+
+	expr : expr DEC .  (reduce by rule 69)
+
+
+
+	.	reduce by rule 69
+
+
+state 201:
+
+	expr : expr INC .  (reduce by rule 68)
+
+
+
+	.	reduce by rule 68
+
+
+state 202:
+
+	expr : expr TIMES . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 309
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 203:
+
+	expr : expr HAT . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 310
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 204:
+
+	expr : expr MINUS . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 311
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 205:
+
+	expr : expr PLUS . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 312
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 206:
+
+	expr : expr DIVIDE . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 313
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 207:
+
+	expr : expr BAR . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 314
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 208:
+
+	expr : expr AMP . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 315
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 209:
+
+	expr : expr PERCENT . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 316
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 210:
+
+	expr : expr QUESTION . exprWComma COLON expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 94
+	exprWComma	goto 317
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 211:
+
+	expr : expr DOT . ID 
+	expr : expr DOT . TYPE_NAME 
+
+	ID	shift 319
+	TYPE_NAME	shift 318
+
+
+	.	error
+
+
+state 212:
+
+	expr : expr LBRACE . exprWComma RBRACE 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 94
+	exprWComma	goto 320
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 213:
+
+	expr : expr LPAREN . RPAREN 
+	expr : expr LPAREN . argumentExprList RPAREN 
+
+	LPAREN	shift 124
+	RPAREN	shift 323
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 322
+	unaryOperator	goto 92
+	argumentExprList	goto 321
+	strings	goto 90
+
+	.	error
+
+
+state 214:
+
+	statementlist : statementlist statement .  (reduce by rule 29)
+
+
+
+	.	reduce by rule 29
+
+
+state 215:
+
+	compoundStatement : LCURLY ostatementlist RCURLY .  (reduce by rule 31)
+
+
+
+	.	reduce by rule 31
+
+
+state 216:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : SIZEOF expr .  (reduce by rule 73)
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+
+
+	.	reduce by rule 73
+
+
+state 217:
+
+	expr : LPAREN . typeName RPAREN expr 
+	expr : SIZEOF LPAREN . typeName RPAREN 
+	expr : LPAREN . exprWComma RPAREN 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	SIZEOF	shift 99
+	TYPE_NAME	shift 19
+
+	expr	goto 94
+	exprWComma	goto 237
+	unaryOperator	goto 92
+	typeName	goto 324
+	typeSpecifier	goto 85
+	typeSpecifierReserved	goto 11
+	typeQualifier	goto 76
+	typeQualifierList	goto 235
+	specifierQualifierList	goto 234
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	structOrUnion	goto 2
+	strings	goto 90
+
+	.	error
+
+
+state 218:
+
+	statement : GOTO ID . SEMICOLON 
+
+	SEMICOLON	shift 325
+
+
+	.	error
+
+
+state 219:
+
+	statement : CONTINUE SEMICOLON .  (reduce by rule 11)
+
+
+
+	.	reduce by rule 11
+
+
+state 220:
+
+	statement : BREAK SEMICOLON .  (reduce by rule 10)
+
+
+
+	.	reduce by rule 10
+
+
+state 221:
+
+	opExpr : exprWComma .  (reduce by rule 94)
+	exprWComma : exprWComma . COMMA expr 
+
+	COMMA	shift 176
+
+
+	.	reduce by rule 94
+
+
+state 222:
+
+	statement : RETURN opExpr . SEMICOLON 
+
+	SEMICOLON	shift 326
+
+
+	.	error
+
+
+state 223:
+
+	statement : WHILE LPAREN . exprWComma RPAREN statement 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 94
+	exprWComma	goto 327
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 224:
+
+	statement : DEFAULT COLON . statement 
+
+	SEMICOLON	shift 125
+	LPAREN	shift 124
+	LCURLY	shift 52
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 115
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	IF	shift 110
+	FOR	shift 109
+	DO	shift 108
+	SWITCH	shift 107
+	CASE	shift 106
+	DEFAULT	shift 105
+	WHILE	shift 104
+	RETURN	shift 103
+	BREAK	shift 102
+	CONTINUE	shift 101
+	GOTO	shift 100
+	SIZEOF	shift 99
+
+	statement	goto 328
+	compoundStatement	goto 95
+	expr	goto 94
+	exprWComma	goto 93
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 225:
+
+	statement : CASE exprWComma . COLON statement 
+	exprWComma : exprWComma . COMMA expr 
+
+	COLON	shift 329
+	COMMA	shift 176
+
+
+	.	error
+
+
+state 226:
+
+	statement : SWITCH LPAREN . exprWComma RPAREN statement 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 94
+	exprWComma	goto 330
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 227:
+
+	statement : DO statement . WHILE LPAREN exprWComma RPAREN SEMICOLON 
+
+	WHILE	shift 331
+
+
+	.	error
+
+
+state 228:
+
+	statement : FOR LPAREN . opExpr SEMICOLON opExpr SEMICOLON opExpr RPAREN statement 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 94
+	opExpr	goto 332
+	exprWComma	goto 221
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	reduce by rule 93
+
+
+state 229:
+
+	statement : IF LPAREN . exprWComma RPAREN statement 
+	statement : IF LPAREN . exprWComma RPAREN statement ELSE statement 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 94
+	exprWComma	goto 333
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 230:
+
+	strings : STRING strings .  (reduce by rule 90)
+
+
+
+	.	reduce by rule 90
+
+
+state 231:
+
+	statement : ID COLON . statement 
+
+	SEMICOLON	shift 125
+	LPAREN	shift 124
+	LCURLY	shift 52
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 115
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	IF	shift 110
+	FOR	shift 109
+	DO	shift 108
+	SWITCH	shift 107
+	CASE	shift 106
+	DEFAULT	shift 105
+	WHILE	shift 104
+	RETURN	shift 103
+	BREAK	shift 102
+	CONTINUE	shift 101
+	GOTO	shift 100
+	SIZEOF	shift 99
+
+	statement	goto 334
+	compoundStatement	goto 95
+	expr	goto 94
+	exprWComma	goto 93
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 232:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : DEC expr .  (reduce by rule 71)
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+
+
+	.	reduce by rule 71
+
+
+state 233:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : INC expr .  (reduce by rule 70)
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+
+
+	.	reduce by rule 70
+
+
+state 234:
+
+	typeName : specifierQualifierList .  (reduce by rule 97)
+	typeName : specifierQualifierList . abstractDeclarator 
+
+	LPAREN	shift 337
+	LBRACE	shift 259
+	TIMES	shift 40
+
+	abstractDeclarator	goto 336
+	directAbstractDeclarator	goto 257
+	pointer	goto 335
+
+	.	reduce by rule 97
+
+
+state 235:
+
+	specifierQualifierList : typeQualifierList . typeSpecifier reservedSpecifierQualifiers 
+
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	TYPE_NAME	shift 19
+
+	typeSpecifier	goto 170
+	typeSpecifierReserved	goto 11
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	structOrUnion	goto 2
+
+	.	error
+
+
+state 236:
+
+	expr : LPAREN typeName . RPAREN expr 
+
+	RPAREN	shift 338
+
+
+	.	error
+
+
+state 237:
+
+	expr : LPAREN exprWComma . RPAREN 
+	exprWComma : exprWComma . COMMA expr 
+
+	RPAREN	shift 339
+	COMMA	shift 176
+
+
+	.	error
+
+
+state 238:
+
+	notypeInitDeclarator : notypeDeclarator EQUALS initializer .  (reduce by rule 177)
+
+
+
+	.	reduce by rule 177
+
+
+state 239:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+	initializer : expr .  (reduce by rule 210)
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 210
+
+
+state 240:
+
+	initializer : LCURLY . initializerList trailingComma RCURLY 
+
+	LPAREN	shift 124
+	LCURLY	shift 240
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 239
+	unaryOperator	goto 92
+	initializer	goto 341
+	initializerList	goto 340
+	strings	goto 90
+
+	.	error
+
+
+state 241:
+
+	notypeInitDeclaratorList : notypeInitDeclaratorList COMMA initDeclarator .  (reduce by rule 175)
+
+
+
+	.	reduce by rule 175
+
+
+state 242:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+	aftertypeDirectDeclarator : aftertypeDirectDeclarator LBRACE expr . RBRACE 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	RBRACE	shift 342
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	error
+
+
+state 243:
+
+	aftertypeDirectDeclarator : aftertypeDirectDeclarator LBRACE RBRACE .  (reduce by rule 192)
+
+
+
+	.	reduce by rule 192
+
+
+state 244:
+
+	aftertypeDirectDeclarator : aftertypeDirectDeclarator LPAREN parameterTypeList . RPAREN 
+
+	RPAREN	shift 343
+
+
+	.	error
+
+
+state 245:
+
+	aftertypeDirectDeclarator : aftertypeDirectDeclarator LPAREN identlist . RPAREN 
+	identlist : identlist . COMMA ID 
+
+	RPAREN	shift 344
+	COMMA	shift 253
+
+
+	.	error
+
+
+state 246:
+
+	aftertypeDirectDeclarator : aftertypeDirectDeclarator LPAREN RPAREN .  (reduce by rule 194)
+
+
+
+	.	reduce by rule 194
+
+
+state 247:
+
+	initDeclarator : declarator EQUALS initializer .  (reduce by rule 173)
+
+
+
+	.	reduce by rule 173
+
+
+state 248:
+
+	initDeclaratorList : initDeclaratorList COMMA initDeclarator .  (reduce by rule 171)
+
+
+
+	.	reduce by rule 171
+
+
+state 249:
+
+	aftertypeDirectDeclarator : LPAREN aftertypeDeclarator RPAREN .  (reduce by rule 191)
+
+
+
+	.	reduce by rule 191
+
+
+state 250:
+
+	notypeDirectDeclarator : notypeDirectDeclarator LBRACE expr RBRACE .  (reduce by rule 200)
+
+
+
+	.	reduce by rule 200
+
+
+state 251:
+
+	notypeDirectDeclarator : notypeDirectDeclarator LPAREN parameterTypeList RPAREN .  (reduce by rule 202)
+
+
+
+	.	reduce by rule 202
+
+
+state 252:
+
+	parameterList : parameterList COMMA . parameterDeclaration 
+	parameterTypeList : parameterList COMMA . ELIPSIS 
+
+	EXTERN	shift 38
+	AUTO	shift 37
+	STATIC	shift 36
+	REGISTER	shift 35
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	TYPEDEF	shift 20
+	ELIPSIS	shift 346
+	TYPE_NAME	shift 19
+
+	declarationSpecifiers	goto 149
+	declarationModifiers	goto 148
+	storageClassSpecifier	goto 13
+	typeSpecifier	goto 12
+	typeSpecifierReserved	goto 11
+	typeQualifier	goto 10
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	parameterDeclaration	goto 345
+	structOrUnion	goto 2
+
+	.	error
+
+
+state 253:
+
+	identlist : identlist COMMA . ID 
+
+	ID	shift 347
+
+
+	.	error
+
+
+state 254:
+
+	notypeDirectDeclarator : notypeDirectDeclarator LPAREN identlist RPAREN .  (reduce by rule 203)
+
+
+
+	.	reduce by rule 203
+
+
+state 255:
+
+	parameterDeclaration : declarationModifiers notypeDeclarator .  (reduce by rule 243)
+
+
+
+	.	reduce by rule 243
+
+
+state 256:
+
+	abstractDeclarator : pointer .  (reduce by rule 223)
+	abstractDeclarator : pointer . directAbstractDeclarator 
+	notypeDeclarator : pointer . notypeDirectDeclarator 
+
+	LPAREN	shift 260
+	LBRACE	shift 259
+	ID	shift 39
+
+	directAbstractDeclarator	goto 348
+	notypeDirectDeclarator	goto 71
+
+	.	reduce by rule 223
+
+
+state 257:
+
+	abstractDeclarator : directAbstractDeclarator .  (reduce by rule 224)
+	directAbstractDeclarator : directAbstractDeclarator . LBRACE RBRACE 
+	directAbstractDeclarator : directAbstractDeclarator . LBRACE expr RBRACE 
+	directAbstractDeclarator : directAbstractDeclarator . LPAREN RPAREN 
+	directAbstractDeclarator : directAbstractDeclarator . LPAREN parameterTypeList RPAREN 
+
+	LPAREN	shift 350
+	LBRACE	shift 349
+
+
+	.	reduce by rule 224
+
+
+state 258:
+
+	parameterDeclaration : declarationModifiers abstractDeclarator .  (reduce by rule 244)
+
+
+
+	.	reduce by rule 244
+
+
+state 259:
+
+	directAbstractDeclarator : LBRACE . RBRACE 
+	directAbstractDeclarator : LBRACE . expr RBRACE 
+
+	LPAREN	shift 124
+	RBRACE	shift 352
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 351
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 260:
+
+	directAbstractDeclarator : LPAREN . abstractDeclarator RPAREN 
+	directAbstractDeclarator : LPAREN . RPAREN 
+	directAbstractDeclarator : LPAREN . parameterTypeList RPAREN 
+	notypeDirectDeclarator : LPAREN . notypeDeclarator RPAREN 
+
+	LPAREN	shift 260
+	RPAREN	shift 355
+	LBRACE	shift 259
+	TIMES	shift 40
+	ID	shift 39
+	EXTERN	shift 38
+	AUTO	shift 37
+	STATIC	shift 36
+	REGISTER	shift 35
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	TYPEDEF	shift 20
+	TYPE_NAME	shift 19
+
+	abstractDeclarator	goto 354
+	directAbstractDeclarator	goto 257
+	pointer	goto 256
+	notypeDeclarator	goto 78
+	notypeDirectDeclarator	goto 16
+	declarationSpecifiers	goto 149
+	declarationModifiers	goto 148
+	storageClassSpecifier	goto 13
+	typeSpecifier	goto 12
+	typeSpecifierReserved	goto 11
+	typeQualifier	goto 10
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	parameterList	goto 146
+	parameterTypeList	goto 353
+	parameterDeclaration	goto 144
+	structOrUnion	goto 2
+
+	.	error
+
+
+state 261:
+
+	parmDeclarator : parmDirectDeclarator .  (reduce by rule 184)
+	parmDirectDeclarator : parmDirectDeclarator . LBRACE RBRACE 
+	parmDirectDeclarator : parmDirectDeclarator . LBRACE expr RBRACE 
+	parmDirectDeclarator : parmDirectDeclarator . LPAREN RPAREN 
+	parmDirectDeclarator : parmDirectDeclarator . LPAREN parameterTypeList RPAREN 
+	parmDirectDeclarator : parmDirectDeclarator . LPAREN identlist RPAREN 
+
+	LPAREN	shift 357
+	LBRACE	shift 356
+
+
+	.	reduce by rule 184
+
+
+state 262:
+
+	parameterDeclaration : declarationSpecifiers parmDeclarator .  (reduce by rule 240)
+
+
+
+	.	reduce by rule 240
+
+
+state 263:
+
+	parameterDeclaration : declarationSpecifiers notypeDeclarator .  (reduce by rule 239)
+
+
+
+	.	reduce by rule 239
+
+
+state 264:
+
+	abstractDeclarator : pointer .  (reduce by rule 223)
+	abstractDeclarator : pointer . directAbstractDeclarator 
+	notypeDeclarator : pointer . notypeDirectDeclarator 
+	parmDeclarator : pointer . parmDirectDeclarator 
+
+	LPAREN	shift 260
+	LBRACE	shift 259
+	ID	shift 39
+	TYPE_NAME	shift 266
+
+	directAbstractDeclarator	goto 348
+	notypeDirectDeclarator	goto 71
+	parmDirectDeclarator	goto 358
+
+	.	reduce by rule 223
+
+
+state 265:
+
+	parameterDeclaration : declarationSpecifiers abstractDeclarator .  (reduce by rule 242)
+
+
+
+	.	reduce by rule 242
+
+
+state 266:
+
+	parmDirectDeclarator : TYPE_NAME .  (reduce by rule 204)
+
+
+
+	.	reduce by rule 204
+
+
+state 267:
+
+	enumeratorList : enumeratorList . COMMA enumerator 
+	enumSpecifier : ENUM TYPE_NAME LCURLY enumeratorList . trailingComma RCURLY 
+
+	COMMA	shift 270
+
+	trailingComma	goto 359
+
+	.	reduce by rule 168
+
+
+state 268:
+
+	enumeratorList : enumeratorList . COMMA enumerator 
+	enumSpecifier : ENUM ID LCURLY enumeratorList . trailingComma RCURLY 
+
+	COMMA	shift 270
+
+	trailingComma	goto 360
+
+	.	reduce by rule 168
+
+
+state 269:
+
+	enumSpecifier : ENUM LCURLY enumeratorList trailingComma . RCURLY 
+
+	RCURLY	shift 361
+
+
+	.	error
+
+
+state 270:
+
+	trailingComma : COMMA .  (reduce by rule 169)
+	enumeratorList : enumeratorList COMMA . enumerator 
+
+	ID	shift 156
+
+	enumerator	goto 362
+
+	.	reduce by rule 169
+
+
+state 271:
+
+	enumerator : ID EQUALS . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 363
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 272:
+
+	structOrUnionSpecifier : structOrUnion TYPE_NAME LCURLY structDeclarationList RCURLY .  (reduce by rule 133)
+
+
+
+	.	reduce by rule 133
+
+
+state 273:
+
+	structOrUnionSpecifier : structOrUnion ID LCURLY structDeclarationList RCURLY .  (reduce by rule 132)
+
+
+
+	.	reduce by rule 132
+
+
+state 274:
+
+	structDeclaratorList : structDeclaratorList COMMA . structDeclarator 
+
+	COLON	shift 167
+	LPAREN	shift 68
+	TIMES	shift 40
+	ID	shift 39
+	TYPE_NAME	shift 67
+
+	pointer	goto 64
+	declarator	goto 166
+	aftertypeDeclarator	goto 62
+	notypeDeclarator	goto 61
+	aftertypeDirectDeclarator	goto 60
+	notypeDirectDeclarator	goto 16
+	structDeclarator	goto 364
+
+	.	error
+
+
+state 275:
+
+	structDeclaration : specifierQualifierList structDeclaratorList SEMICOLON .  (reduce by rule 140)
+
+
+
+	.	reduce by rule 140
+
+
+state 276:
+
+	structDeclarator : declarator COLON . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 365
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 277:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+	structDeclarator : COLON expr .  (reduce by rule 147)
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 147
+
+
+state 278:
+
+	notypeStructDeclaratorList : notypeStructDeclaratorList COMMA . structDeclarator 
+
+	COLON	shift 167
+	LPAREN	shift 68
+	TIMES	shift 40
+	ID	shift 39
+	TYPE_NAME	shift 67
+
+	pointer	goto 64
+	declarator	goto 166
+	aftertypeDeclarator	goto 62
+	notypeDeclarator	goto 61
+	aftertypeDirectDeclarator	goto 60
+	notypeDirectDeclarator	goto 16
+	structDeclarator	goto 366
+
+	.	error
+
+
+state 279:
+
+	structDeclaration : typeQualifierList notypeStructDeclaratorList SEMICOLON .  (reduce by rule 141)
+
+
+
+	.	reduce by rule 141
+
+
+state 280:
+
+	reservedSpecifierQualifiers : reservedSpecifierQualifiers . specifierQualifierReserved 
+	specifierQualifierList : typeQualifierList typeSpecifier reservedSpecifierQualifiers .  (reduce by rule 113)
+
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+
+	specifierQualifierReserved	goto 283
+	typeSpecifierReserved	goto 129
+	typeQualifier	goto 128
+	enumSpecifier	goto 127
+	structOrUnionSpecifier	goto 126
+	structOrUnion	goto 2
+
+	.	reduce by rule 113
+
+
+state 281:
+
+	notypeStructDeclarator : notypeDeclarator COLON . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 367
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 282:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+	notypeStructDeclarator : COLON expr .  (reduce by rule 150)
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 150
+
+
+state 283:
+
+	reservedSpecifierQualifiers : reservedSpecifierQualifiers specifierQualifierReserved .  (reduce by rule 115)
+
+
+
+	.	reduce by rule 115
+
+
+state 284:
+
+	compoundStatement : LCURLY pushScope declarationList ostatementlist . popScope RCURLY 
+
+
+	popScope	goto 368
+
+	.	reduce by rule 246
+
+
+state 285:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+	exprWComma : exprWComma COMMA expr .  (reduce by rule 92)
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 92
+
+
+state 286:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr RSHIFT expr .  (reduce by rule 62)
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	PERCENT	shift 209
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+
+
+	.	reduce by rule 62
+
+
+state 287:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr LSHIFT expr .  (reduce by rule 61)
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	PERCENT	shift 209
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+
+
+	.	reduce by rule 61
+
+
+state 288:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr AND expr .  (reduce by rule 51)
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 51
+
+
+state 289:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr OR expr .  (reduce by rule 50)
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 50
+
+
+state 290:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr NEQ expr .  (reduce by rule 56)
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	PERCENT	shift 209
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 56
+
+
+state 291:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr EQ expr .  (reduce by rule 55)
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	PERCENT	shift 209
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 55
+
+
+state 292:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr GT expr .  (reduce by rule 58)
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	PERCENT	shift 209
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 58
+
+
+state 293:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr LT expr .  (reduce by rule 57)
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	PERCENT	shift 209
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 57
+
+
+state 294:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr GTE expr .  (reduce by rule 60)
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	PERCENT	shift 209
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 60
+
+
+state 295:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr LTE expr .  (reduce by rule 59)
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	PERCENT	shift 209
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 59
+
+
+state 296:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr RSHIFTEQUALS expr .  (reduce by rule 48)
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 48
+
+
+state 297:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr LSHIFTEQUALS expr .  (reduce by rule 47)
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 47
+
+
+state 298:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr ANDEQUALS expr .  (reduce by rule 46)
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 46
+
+
+state 299:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr OREQUALS expr .  (reduce by rule 45)
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 45
+
+
+state 300:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr DIVEQUALS expr .  (reduce by rule 42)
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 42
+
+
+state 301:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr TIMESEQUALS expr .  (reduce by rule 41)
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 41
+
+
+state 302:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr MODEQUALS expr .  (reduce by rule 43)
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 43
+
+
+state 303:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr XOREQUALS expr .  (reduce by rule 44)
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 44
+
+
+state 304:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr MINUSEQUALS expr .  (reduce by rule 40)
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 40
+
+
+state 305:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr PLUSEQUALS expr .  (reduce by rule 39)
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 39
+
+
+state 306:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr EQUALS expr .  (reduce by rule 49)
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 49
+
+
+state 307:
+
+	expr : expr ARROW TYPE_NAME .  (reduce by rule 82)
+
+
+
+	.	reduce by rule 82
+
+
+state 308:
+
+	expr : expr ARROW ID .  (reduce by rule 80)
+
+
+
+	.	reduce by rule 80
+
+
+state 309:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr TIMES expr .  (reduce by rule 65)
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+
+
+	.	reduce by rule 65
+
+
+state 310:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr HAT expr .  (reduce by rule 53)
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	PERCENT	shift 209
+	AMP	shift 208
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 53
+
+
+state 311:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr MINUS expr .  (reduce by rule 64)
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	PERCENT	shift 209
+	DIVIDE	shift 206
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+
+
+	.	reduce by rule 64
+
+
+state 312:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr PLUS expr .  (reduce by rule 63)
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	PERCENT	shift 209
+	DIVIDE	shift 206
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+
+
+	.	reduce by rule 63
+
+
+state 313:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr DIVIDE expr .  (reduce by rule 66)
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+
+
+	.	reduce by rule 66
+
+
+state 314:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr BAR expr .  (reduce by rule 52)
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	PERCENT	shift 209
+	AMP	shift 208
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 52
+
+
+state 315:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr AMP expr .  (reduce by rule 54)
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	PERCENT	shift 209
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 54
+
+
+state 316:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr PERCENT expr .  (reduce by rule 67)
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+
+
+	.	reduce by rule 67
+
+
+state 317:
+
+	expr : expr QUESTION exprWComma . COLON expr 
+	exprWComma : exprWComma . COMMA expr 
+
+	COLON	shift 369
+	COMMA	shift 176
+
+
+	.	error
+
+
+state 318:
+
+	expr : expr DOT TYPE_NAME .  (reduce by rule 81)
+
+
+
+	.	reduce by rule 81
+
+
+state 319:
+
+	expr : expr DOT ID .  (reduce by rule 79)
+
+
+
+	.	reduce by rule 79
+
+
+state 320:
+
+	expr : expr LBRACE exprWComma . RBRACE 
+	exprWComma : exprWComma . COMMA expr 
+
+	RBRACE	shift 370
+	COMMA	shift 176
+
+
+	.	error
+
+
+state 321:
+
+	expr : expr LPAREN argumentExprList . RPAREN 
+	argumentExprList : argumentExprList . COMMA expr 
+
+	RPAREN	shift 372
+	COMMA	shift 371
+
+
+	.	error
+
+
+state 322:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+	argumentExprList : expr .  (reduce by rule 95)
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 95
+
+
+state 323:
+
+	expr : expr LPAREN RPAREN .  (reduce by rule 77)
+
+
+
+	.	reduce by rule 77
+
+
+state 324:
+
+	expr : LPAREN typeName . RPAREN expr 
+	expr : SIZEOF LPAREN typeName . RPAREN 
+
+	RPAREN	shift 373
+
+
+	.	error
+
+
+state 325:
+
+	statement : GOTO ID SEMICOLON .  (reduce by rule 13)
+
+
+
+	.	reduce by rule 13
+
+
+state 326:
+
+	statement : RETURN opExpr SEMICOLON .  (reduce by rule 12)
+
+
+
+	.	reduce by rule 12
+
+
+state 327:
+
+	statement : WHILE LPAREN exprWComma . RPAREN statement 
+	exprWComma : exprWComma . COMMA expr 
+
+	RPAREN	shift 374
+	COMMA	shift 176
+
+
+	.	error
+
+
+state 328:
+
+	statement : DEFAULT COLON statement .  (reduce by rule 16)
+
+
+
+	.	reduce by rule 16
+
+
+state 329:
+
+	statement : CASE exprWComma COLON . statement 
+
+	SEMICOLON	shift 125
+	LPAREN	shift 124
+	LCURLY	shift 52
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 115
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	IF	shift 110
+	FOR	shift 109
+	DO	shift 108
+	SWITCH	shift 107
+	CASE	shift 106
+	DEFAULT	shift 105
+	WHILE	shift 104
+	RETURN	shift 103
+	BREAK	shift 102
+	CONTINUE	shift 101
+	GOTO	shift 100
+	SIZEOF	shift 99
+
+	statement	goto 375
+	compoundStatement	goto 95
+	expr	goto 94
+	exprWComma	goto 93
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 330:
+
+	statement : SWITCH LPAREN exprWComma . RPAREN statement 
+	exprWComma : exprWComma . COMMA expr 
+
+	RPAREN	shift 376
+	COMMA	shift 176
+
+
+	.	error
+
+
+state 331:
+
+	statement : DO statement WHILE . LPAREN exprWComma RPAREN SEMICOLON 
+
+	LPAREN	shift 377
+
+
+	.	error
+
+
+state 332:
+
+	statement : FOR LPAREN opExpr . SEMICOLON opExpr SEMICOLON opExpr RPAREN statement 
+
+	SEMICOLON	shift 378
+
+
+	.	error
+
+
+state 333:
+
+	statement : IF LPAREN exprWComma . RPAREN statement 
+	statement : IF LPAREN exprWComma . RPAREN statement ELSE statement 
+	exprWComma : exprWComma . COMMA expr 
+
+	RPAREN	shift 379
+	COMMA	shift 176
+
+
+	.	error
+
+
+state 334:
+
+	statement : ID COLON statement .  (reduce by rule 15)
+
+
+
+	.	reduce by rule 15
+
+
+state 335:
+
+	abstractDeclarator : pointer .  (reduce by rule 223)
+	abstractDeclarator : pointer . directAbstractDeclarator 
+
+	LPAREN	shift 337
+	LBRACE	shift 259
+
+	directAbstractDeclarator	goto 348
+
+	.	reduce by rule 223
+
+
+state 336:
+
+	typeName : specifierQualifierList abstractDeclarator .  (reduce by rule 98)
+
+
+
+	.	reduce by rule 98
+
+
+state 337:
+
+	directAbstractDeclarator : LPAREN . abstractDeclarator RPAREN 
+	directAbstractDeclarator : LPAREN . RPAREN 
+	directAbstractDeclarator : LPAREN . parameterTypeList RPAREN 
+
+	LPAREN	shift 337
+	RPAREN	shift 355
+	LBRACE	shift 259
+	TIMES	shift 40
+	EXTERN	shift 38
+	AUTO	shift 37
+	STATIC	shift 36
+	REGISTER	shift 35
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	TYPEDEF	shift 20
+	TYPE_NAME	shift 19
+
+	abstractDeclarator	goto 354
+	directAbstractDeclarator	goto 257
+	pointer	goto 335
+	declarationSpecifiers	goto 149
+	declarationModifiers	goto 148
+	storageClassSpecifier	goto 13
+	typeSpecifier	goto 12
+	typeSpecifierReserved	goto 11
+	typeQualifier	goto 10
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	parameterList	goto 146
+	parameterTypeList	goto 353
+	parameterDeclaration	goto 144
+	structOrUnion	goto 2
+
+	.	error
+
+
+state 338:
+
+	expr : LPAREN typeName RPAREN . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 380
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 339:
+
+	expr : LPAREN exprWComma RPAREN .  (reduce by rule 83)
+
+
+
+	.	reduce by rule 83
+
+
+state 340:
+
+	initializer : LCURLY initializerList . trailingComma RCURLY 
+	initializerList : initializerList . COMMA initializer 
+
+	COMMA	shift 382
+
+	trailingComma	goto 381
+
+	.	reduce by rule 168
+
+
+state 341:
+
+	initializerList : initializer .  (reduce by rule 212)
+
+
+
+	.	reduce by rule 212
+
+
+state 342:
+
+	aftertypeDirectDeclarator : aftertypeDirectDeclarator LBRACE expr RBRACE .  (reduce by rule 193)
+
+
+
+	.	reduce by rule 193
+
+
+state 343:
+
+	aftertypeDirectDeclarator : aftertypeDirectDeclarator LPAREN parameterTypeList RPAREN .  (reduce by rule 195)
+
+
+
+	.	reduce by rule 195
+
+
+state 344:
+
+	aftertypeDirectDeclarator : aftertypeDirectDeclarator LPAREN identlist RPAREN .  (reduce by rule 196)
+
+
+
+	.	reduce by rule 196
+
+
+state 345:
+
+	parameterList : parameterList COMMA parameterDeclaration .  (reduce by rule 238)
+
+
+
+	.	reduce by rule 238
+
+
+state 346:
+
+	parameterTypeList : parameterList COMMA ELIPSIS .  (reduce by rule 236)
+
+
+
+	.	reduce by rule 236
+
+
+state 347:
+
+	identlist : identlist COMMA ID .  (reduce by rule 217)
+
+
+
+	.	reduce by rule 217
+
+
+state 348:
+
+	abstractDeclarator : pointer directAbstractDeclarator .  (reduce by rule 225)
+	directAbstractDeclarator : directAbstractDeclarator . LBRACE RBRACE 
+	directAbstractDeclarator : directAbstractDeclarator . LBRACE expr RBRACE 
+	directAbstractDeclarator : directAbstractDeclarator . LPAREN RPAREN 
+	directAbstractDeclarator : directAbstractDeclarator . LPAREN parameterTypeList RPAREN 
+
+	LPAREN	shift 350
+	LBRACE	shift 349
+
+
+	.	reduce by rule 225
+
+
+state 349:
+
+	directAbstractDeclarator : directAbstractDeclarator LBRACE . RBRACE 
+	directAbstractDeclarator : directAbstractDeclarator LBRACE . expr RBRACE 
+
+	LPAREN	shift 124
+	RBRACE	shift 384
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 383
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 350:
+
+	directAbstractDeclarator : directAbstractDeclarator LPAREN . RPAREN 
+	directAbstractDeclarator : directAbstractDeclarator LPAREN . parameterTypeList RPAREN 
+
+	RPAREN	shift 386
+	EXTERN	shift 38
+	AUTO	shift 37
+	STATIC	shift 36
+	REGISTER	shift 35
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	TYPEDEF	shift 20
+	TYPE_NAME	shift 19
+
+	declarationSpecifiers	goto 149
+	declarationModifiers	goto 148
+	storageClassSpecifier	goto 13
+	typeSpecifier	goto 12
+	typeSpecifierReserved	goto 11
+	typeQualifier	goto 10
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	parameterList	goto 146
+	parameterTypeList	goto 385
+	parameterDeclaration	goto 144
+	structOrUnion	goto 2
+
+	.	error
+
+
+state 351:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+	directAbstractDeclarator : LBRACE expr . RBRACE 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	RBRACE	shift 387
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	error
+
+
+state 352:
+
+	directAbstractDeclarator : LBRACE RBRACE .  (reduce by rule 227)
+
+
+
+	.	reduce by rule 227
+
+
+state 353:
+
+	directAbstractDeclarator : LPAREN parameterTypeList . RPAREN 
+
+	RPAREN	shift 388
+
+
+	.	error
+
+
+state 354:
+
+	directAbstractDeclarator : LPAREN abstractDeclarator . RPAREN 
+
+	RPAREN	shift 389
+
+
+	.	error
+
+
+state 355:
+
+	directAbstractDeclarator : LPAREN RPAREN .  (reduce by rule 231)
+
+
+
+	.	reduce by rule 231
+
+
+state 356:
+
+	parmDirectDeclarator : parmDirectDeclarator LBRACE . RBRACE 
+	parmDirectDeclarator : parmDirectDeclarator LBRACE . expr RBRACE 
+
+	LPAREN	shift 124
+	RBRACE	shift 391
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 390
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 357:
+
+	parmDirectDeclarator : parmDirectDeclarator LPAREN . RPAREN 
+	parmDirectDeclarator : parmDirectDeclarator LPAREN . parameterTypeList RPAREN 
+	parmDirectDeclarator : parmDirectDeclarator LPAREN . identlist RPAREN 
+
+	RPAREN	shift 394
+	ID	shift 150
+	EXTERN	shift 38
+	AUTO	shift 37
+	STATIC	shift 36
+	REGISTER	shift 35
+	CONST	shift 34
+	VOLATILE	shift 33
+	CHAR	shift 32
+	DOUBLE	shift 31
+	ENUM	shift 30
+	FLOAT	shift 29
+	INT	shift 28
+	LONG	shift 27
+	SHORT	shift 26
+	STRUCT	shift 25
+	UNION	shift 24
+	UNSIGNED	shift 23
+	SIGNED	shift 22
+	VOID	shift 21
+	TYPEDEF	shift 20
+	TYPE_NAME	shift 19
+
+	declarationSpecifiers	goto 149
+	declarationModifiers	goto 148
+	storageClassSpecifier	goto 13
+	typeSpecifier	goto 12
+	typeSpecifierReserved	goto 11
+	typeQualifier	goto 10
+	enumSpecifier	goto 9
+	structOrUnionSpecifier	goto 8
+	identlist	goto 393
+	parameterList	goto 146
+	parameterTypeList	goto 392
+	parameterDeclaration	goto 144
+	structOrUnion	goto 2
+
+	.	error
+
+
+state 358:
+
+	parmDeclarator : pointer parmDirectDeclarator .  (reduce by rule 185)
+	parmDirectDeclarator : parmDirectDeclarator . LBRACE RBRACE 
+	parmDirectDeclarator : parmDirectDeclarator . LBRACE expr RBRACE 
+	parmDirectDeclarator : parmDirectDeclarator . LPAREN RPAREN 
+	parmDirectDeclarator : parmDirectDeclarator . LPAREN parameterTypeList RPAREN 
+	parmDirectDeclarator : parmDirectDeclarator . LPAREN identlist RPAREN 
+
+	LPAREN	shift 357
+	LBRACE	shift 356
+
+
+	.	reduce by rule 185
+
+
+state 359:
+
+	enumSpecifier : ENUM TYPE_NAME LCURLY enumeratorList trailingComma . RCURLY 
+
+	RCURLY	shift 395
+
+
+	.	error
+
+
+state 360:
+
+	enumSpecifier : ENUM ID LCURLY enumeratorList trailingComma . RCURLY 
+
+	RCURLY	shift 396
+
+
+	.	error
+
+
+state 361:
+
+	enumSpecifier : ENUM LCURLY enumeratorList trailingComma RCURLY .  (reduce by rule 154)
+
+
+
+	.	reduce by rule 154
+
+
+state 362:
+
+	enumeratorList : enumeratorList COMMA enumerator .  (reduce by rule 159)
+
+
+
+	.	reduce by rule 159
+
+
+state 363:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+	enumerator : ID EQUALS expr .  (reduce by rule 162)
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 162
+
+
+state 364:
+
+	structDeclaratorList : structDeclaratorList COMMA structDeclarator .  (reduce by rule 143)
+
+
+
+	.	reduce by rule 143
+
+
+state 365:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+	structDeclarator : declarator COLON expr .  (reduce by rule 148)
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 148
+
+
+state 366:
+
+	notypeStructDeclaratorList : notypeStructDeclaratorList COMMA structDeclarator .  (reduce by rule 145)
+
+
+
+	.	reduce by rule 145
+
+
+state 367:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+	notypeStructDeclarator : notypeDeclarator COLON expr .  (reduce by rule 151)
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 151
+
+
+state 368:
+
+	compoundStatement : LCURLY pushScope declarationList ostatementlist popScope . RCURLY 
+
+	RCURLY	shift 397
+
+
+	.	error
+
+
+state 369:
+
+	expr : expr QUESTION exprWComma COLON . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 398
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 370:
+
+	expr : expr LBRACE exprWComma RBRACE .  (reduce by rule 76)
+
+
+
+	.	reduce by rule 76
+
+
+state 371:
+
+	argumentExprList : argumentExprList COMMA . expr 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 399
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 372:
+
+	expr : expr LPAREN argumentExprList RPAREN .  (reduce by rule 78)
+
+
+
+	.	reduce by rule 78
+
+
+state 373:
+
+	expr : LPAREN typeName RPAREN . expr 
+	expr : SIZEOF LPAREN typeName RPAREN .  (reduce by rule 75)
+
+	LPAREN	shift 124
+	TILDE	shift 122
+	BANG	shift 119
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 380
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	reduce by rule 75
+
+
+state 374:
+
+	statement : WHILE LPAREN exprWComma RPAREN . statement 
+
+	SEMICOLON	shift 125
+	LPAREN	shift 124
+	LCURLY	shift 52
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 115
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	IF	shift 110
+	FOR	shift 109
+	DO	shift 108
+	SWITCH	shift 107
+	CASE	shift 106
+	DEFAULT	shift 105
+	WHILE	shift 104
+	RETURN	shift 103
+	BREAK	shift 102
+	CONTINUE	shift 101
+	GOTO	shift 100
+	SIZEOF	shift 99
+
+	statement	goto 400
+	compoundStatement	goto 95
+	expr	goto 94
+	exprWComma	goto 93
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 375:
+
+	statement : CASE exprWComma COLON statement .  (reduce by rule 17)
+
+
+
+	.	reduce by rule 17
+
+
+state 376:
+
+	statement : SWITCH LPAREN exprWComma RPAREN . statement 
+
+	SEMICOLON	shift 125
+	LPAREN	shift 124
+	LCURLY	shift 52
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 115
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	IF	shift 110
+	FOR	shift 109
+	DO	shift 108
+	SWITCH	shift 107
+	CASE	shift 106
+	DEFAULT	shift 105
+	WHILE	shift 104
+	RETURN	shift 103
+	BREAK	shift 102
+	CONTINUE	shift 101
+	GOTO	shift 100
+	SIZEOF	shift 99
+
+	statement	goto 401
+	compoundStatement	goto 95
+	expr	goto 94
+	exprWComma	goto 93
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 377:
+
+	statement : DO statement WHILE LPAREN . exprWComma RPAREN SEMICOLON 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 94
+	exprWComma	goto 402
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 378:
+
+	statement : FOR LPAREN opExpr SEMICOLON . opExpr SEMICOLON opExpr RPAREN statement 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 94
+	opExpr	goto 403
+	exprWComma	goto 221
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	reduce by rule 93
+
+
+state 379:
+
+	statement : IF LPAREN exprWComma RPAREN . statement 
+	statement : IF LPAREN exprWComma RPAREN . statement ELSE statement 
+
+	SEMICOLON	shift 125
+	LPAREN	shift 124
+	LCURLY	shift 52
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 115
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	IF	shift 110
+	FOR	shift 109
+	DO	shift 108
+	SWITCH	shift 107
+	CASE	shift 106
+	DEFAULT	shift 105
+	WHILE	shift 104
+	RETURN	shift 103
+	BREAK	shift 102
+	CONTINUE	shift 101
+	GOTO	shift 100
+	SIZEOF	shift 99
+
+	statement	goto 404
+	compoundStatement	goto 95
+	expr	goto 94
+	exprWComma	goto 93
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 380:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : LPAREN typeName RPAREN expr .  (reduce by rule 74)
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+
+
+	.	reduce by rule 74
+
+
+state 381:
+
+	initializer : LCURLY initializerList trailingComma . RCURLY 
+
+	RCURLY	shift 405
+
+
+	.	error
+
+
+state 382:
+
+	trailingComma : COMMA .  (reduce by rule 169)
+	initializerList : initializerList COMMA . initializer 
+
+	LPAREN	shift 124
+	LCURLY	shift 240
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 239
+	unaryOperator	goto 92
+	initializer	goto 406
+	strings	goto 90
+
+	.	reduce by rule 169
+
+
+state 383:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+	directAbstractDeclarator : directAbstractDeclarator LBRACE expr . RBRACE 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	RBRACE	shift 407
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	error
+
+
+state 384:
+
+	directAbstractDeclarator : directAbstractDeclarator LBRACE RBRACE .  (reduce by rule 229)
+
+
+
+	.	reduce by rule 229
+
+
+state 385:
+
+	directAbstractDeclarator : directAbstractDeclarator LPAREN parameterTypeList . RPAREN 
+
+	RPAREN	shift 408
+
+
+	.	error
+
+
+state 386:
+
+	directAbstractDeclarator : directAbstractDeclarator LPAREN RPAREN .  (reduce by rule 233)
+
+
+
+	.	reduce by rule 233
+
+
+state 387:
+
+	directAbstractDeclarator : LBRACE expr RBRACE .  (reduce by rule 228)
+
+
+
+	.	reduce by rule 228
+
+
+state 388:
+
+	directAbstractDeclarator : LPAREN parameterTypeList RPAREN .  (reduce by rule 232)
+
+
+
+	.	reduce by rule 232
+
+
+state 389:
+
+	directAbstractDeclarator : LPAREN abstractDeclarator RPAREN .  (reduce by rule 226)
+
+
+
+	.	reduce by rule 226
+
+
+state 390:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+	parmDirectDeclarator : parmDirectDeclarator LBRACE expr . RBRACE 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	RBRACE	shift 409
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	error
+
+
+state 391:
+
+	parmDirectDeclarator : parmDirectDeclarator LBRACE RBRACE .  (reduce by rule 205)
+
+
+
+	.	reduce by rule 205
+
+
+state 392:
+
+	parmDirectDeclarator : parmDirectDeclarator LPAREN parameterTypeList . RPAREN 
+
+	RPAREN	shift 410
+
+
+	.	error
+
+
+state 393:
+
+	parmDirectDeclarator : parmDirectDeclarator LPAREN identlist . RPAREN 
+	identlist : identlist . COMMA ID 
+
+	RPAREN	shift 411
+	COMMA	shift 253
+
+
+	.	error
+
+
+state 394:
+
+	parmDirectDeclarator : parmDirectDeclarator LPAREN RPAREN .  (reduce by rule 207)
+
+
+
+	.	reduce by rule 207
+
+
+state 395:
+
+	enumSpecifier : ENUM TYPE_NAME LCURLY enumeratorList trailingComma RCURLY .  (reduce by rule 156)
+
+
+
+	.	reduce by rule 156
+
+
+state 396:
+
+	enumSpecifier : ENUM ID LCURLY enumeratorList trailingComma RCURLY .  (reduce by rule 155)
+
+
+
+	.	reduce by rule 155
+
+
+state 397:
+
+	compoundStatement : LCURLY pushScope declarationList ostatementlist popScope RCURLY .  (reduce by rule 30)
+
+
+
+	.	reduce by rule 30
+
+
+state 398:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr QUESTION exprWComma COLON expr .  (reduce by rule 38)
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 38
+
+
+state 399:
+
+	expr : expr . QUESTION exprWComma COLON expr 
+	expr : expr . PLUSEQUALS expr 
+	expr : expr . MINUSEQUALS expr 
+	expr : expr . TIMESEQUALS expr 
+	expr : expr . DIVEQUALS expr 
+	expr : expr . MODEQUALS expr 
+	expr : expr . XOREQUALS expr 
+	expr : expr . OREQUALS expr 
+	expr : expr . ANDEQUALS expr 
+	expr : expr . LSHIFTEQUALS expr 
+	expr : expr . RSHIFTEQUALS expr 
+	expr : expr . EQUALS expr 
+	expr : expr . OR expr 
+	expr : expr . AND expr 
+	expr : expr . BAR expr 
+	expr : expr . HAT expr 
+	expr : expr . AMP expr 
+	expr : expr . EQ expr 
+	expr : expr . NEQ expr 
+	expr : expr . LT expr 
+	expr : expr . GT expr 
+	expr : expr . LTE expr 
+	expr : expr . GTE expr 
+	expr : expr . LSHIFT expr 
+	expr : expr . RSHIFT expr 
+	expr : expr . PLUS expr 
+	expr : expr . MINUS expr 
+	expr : expr . TIMES expr 
+	expr : expr . DIVIDE expr 
+	expr : expr . PERCENT expr 
+	expr : expr . INC 
+	expr : expr . DEC 
+	expr : expr . LBRACE exprWComma RBRACE 
+	expr : expr . LPAREN RPAREN 
+	expr : expr . LPAREN argumentExprList RPAREN 
+	expr : expr . DOT ID 
+	expr : expr . ARROW ID 
+	expr : expr . DOT TYPE_NAME 
+	expr : expr . ARROW TYPE_NAME 
+	argumentExprList : argumentExprList COMMA expr .  (reduce by rule 96)
+
+	LPAREN	shift 213
+	LBRACE	shift 212
+	DOT	shift 211
+	QUESTION	shift 210
+	PERCENT	shift 209
+	AMP	shift 208
+	BAR	shift 207
+	DIVIDE	shift 206
+	PLUS	shift 205
+	MINUS	shift 204
+	HAT	shift 203
+	TIMES	shift 202
+	INC	shift 201
+	DEC	shift 200
+	ARROW	shift 199
+	EQUALS	shift 198
+	PLUSEQUALS	shift 197
+	MINUSEQUALS	shift 196
+	XOREQUALS	shift 195
+	MODEQUALS	shift 194
+	TIMESEQUALS	shift 193
+	DIVEQUALS	shift 192
+	OREQUALS	shift 191
+	ANDEQUALS	shift 190
+	LSHIFTEQUALS	shift 189
+	RSHIFTEQUALS	shift 188
+	LTE	shift 187
+	GTE	shift 186
+	LT	shift 185
+	GT	shift 184
+	EQ	shift 183
+	NEQ	shift 182
+	OR	shift 181
+	AND	shift 180
+	LSHIFT	shift 179
+	RSHIFT	shift 178
+
+
+	.	reduce by rule 96
+
+
+state 400:
+
+	statement : WHILE LPAREN exprWComma RPAREN statement .  (reduce by rule 7)
+
+
+
+	.	reduce by rule 7
+
+
+state 401:
+
+	statement : SWITCH LPAREN exprWComma RPAREN statement .  (reduce by rule 8)
+
+
+
+	.	reduce by rule 8
+
+
+state 402:
+
+	statement : DO statement WHILE LPAREN exprWComma . RPAREN SEMICOLON 
+	exprWComma : exprWComma . COMMA expr 
+
+	RPAREN	shift 412
+	COMMA	shift 176
+
+
+	.	error
+
+
+state 403:
+
+	statement : FOR LPAREN opExpr SEMICOLON opExpr . SEMICOLON opExpr RPAREN statement 
+
+	SEMICOLON	shift 413
+
+
+	.	error
+
+error:  state 404: shift/reduce conflict (shift ELSE, reduce by rule 18)
+
+state 404:
+
+	statement : IF LPAREN exprWComma RPAREN statement .  (reduce by rule 18)
+	statement : IF LPAREN exprWComma RPAREN statement . ELSE statement 
+
+	ELSE	shift 414
+
+
+	.	reduce by rule 18
+
+
+state 405:
+
+	initializer : LCURLY initializerList trailingComma RCURLY .  (reduce by rule 211)
+
+
+
+	.	reduce by rule 211
+
+
+state 406:
+
+	initializerList : initializerList COMMA initializer .  (reduce by rule 213)
+
+
+
+	.	reduce by rule 213
+
+
+state 407:
+
+	directAbstractDeclarator : directAbstractDeclarator LBRACE expr RBRACE .  (reduce by rule 230)
+
+
+
+	.	reduce by rule 230
+
+
+state 408:
+
+	directAbstractDeclarator : directAbstractDeclarator LPAREN parameterTypeList RPAREN .  (reduce by rule 234)
+
+
+
+	.	reduce by rule 234
+
+
+state 409:
+
+	parmDirectDeclarator : parmDirectDeclarator LBRACE expr RBRACE .  (reduce by rule 206)
+
+
+
+	.	reduce by rule 206
+
+
+state 410:
+
+	parmDirectDeclarator : parmDirectDeclarator LPAREN parameterTypeList RPAREN .  (reduce by rule 208)
+
+
+
+	.	reduce by rule 208
+
+
+state 411:
+
+	parmDirectDeclarator : parmDirectDeclarator LPAREN identlist RPAREN .  (reduce by rule 209)
+
+
+
+	.	reduce by rule 209
+
+
+state 412:
+
+	statement : DO statement WHILE LPAREN exprWComma RPAREN . SEMICOLON 
+
+	SEMICOLON	shift 415
+
+
+	.	error
+
+
+state 413:
+
+	statement : FOR LPAREN opExpr SEMICOLON opExpr SEMICOLON . opExpr RPAREN statement 
+
+	LPAREN	shift 124
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 142
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	SIZEOF	shift 99
+
+	expr	goto 94
+	opExpr	goto 416
+	exprWComma	goto 221
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	reduce by rule 93
+
+
+state 414:
+
+	statement : IF LPAREN exprWComma RPAREN statement ELSE . statement 
+
+	SEMICOLON	shift 125
+	LPAREN	shift 124
+	LCURLY	shift 52
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 115
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	IF	shift 110
+	FOR	shift 109
+	DO	shift 108
+	SWITCH	shift 107
+	CASE	shift 106
+	DEFAULT	shift 105
+	WHILE	shift 104
+	RETURN	shift 103
+	BREAK	shift 102
+	CONTINUE	shift 101
+	GOTO	shift 100
+	SIZEOF	shift 99
+
+	statement	goto 417
+	compoundStatement	goto 95
+	expr	goto 94
+	exprWComma	goto 93
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 415:
+
+	statement : DO statement WHILE LPAREN exprWComma RPAREN SEMICOLON .  (reduce by rule 9)
+
+
+
+	.	reduce by rule 9
+
+
+state 416:
+
+	statement : FOR LPAREN opExpr SEMICOLON opExpr SEMICOLON opExpr . RPAREN statement 
+
+	RPAREN	shift 418
+
+
+	.	error
+
+
+state 417:
+
+	statement : IF LPAREN exprWComma RPAREN statement ELSE statement .  (reduce by rule 19)
+
+
+
+	.	reduce by rule 19
+
+
+state 418:
+
+	statement : FOR LPAREN opExpr SEMICOLON opExpr SEMICOLON opExpr RPAREN . statement 
+
+	SEMICOLON	shift 125
+	LPAREN	shift 124
+	LCURLY	shift 52
+	AMP	shift 123
+	TILDE	shift 122
+	PLUS	shift 121
+	MINUS	shift 120
+	BANG	shift 119
+	TIMES	shift 118
+	INC	shift 117
+	DEC	shift 116
+	ID	shift 115
+	DECNUM	shift 114
+	REALNUM	shift 113
+	STRING	shift 112
+	CCONST	shift 111
+	IF	shift 110
+	FOR	shift 109
+	DO	shift 108
+	SWITCH	shift 107
+	CASE	shift 106
+	DEFAULT	shift 105
+	WHILE	shift 104
+	RETURN	shift 103
+	BREAK	shift 102
+	CONTINUE	shift 101
+	GOTO	shift 100
+	SIZEOF	shift 99
+
+	statement	goto 419
+	compoundStatement	goto 95
+	expr	goto 94
+	exprWComma	goto 93
+	unaryOperator	goto 92
+	strings	goto 90
+
+	.	error
+
+
+state 419:
+
+	statement : FOR LPAREN opExpr SEMICOLON opExpr SEMICOLON opExpr RPAREN statement .  (reduce by rule 6)
+
+
+
+	.	reduce by rule 6
+
+
+state 420:
+
+
+	EOF	accept
+
+
+	.	error
+
+2243 of 3800 action table entries left after compaction
+712 goto table entries
diff --git a/src/parser/grammar/c.grm.sml b/src/parser/grammar/c.grm.sml
index 175f5c4..1404fd2 100644
--- a/src/parser/grammar/c.grm.sml
+++ b/src/parser/grammar/c.grm.sml
@@ -1658,7 +1658,7 @@ local
        fun f i =
             if i=numstates then g i
             else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
-          in f 0 handle Subscript => ()
+          in f 0 handle General.Subscript => ()
           end
 in
 val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
@@ -1668,7 +1668,7 @@ val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),act
 val actionRowNumbers = string_to_list actionRowNumbers
 val actionT = let val actionRowLookUp=
 let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
-in Array.fromList(map actionRowLookUp actionRowNumbers)
+in Array.fromList(List.map actionRowLookUp actionRowNumbers)
 end
 in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
 numStates=numstates,initialState=STATE 0}
diff --git a/src/parser/grammar/c.lex.sml b/src/parser/grammar/c.lex.sml
index 2bbb06a..14cd1b6 100644
--- a/src/parser/grammar/c.lex.sml
+++ b/src/parser/grammar/c.lex.sml
@@ -1,109 +1,9 @@
 functor CLexFun(structure Tokens : C_TOKENS 
 			 structure TokTable : TOKENTABLE 
-			 sharing TokTable.Tokens = Tokens)  = struct
-
-    structure yyInput : sig
-
-        type stream
-	val mkStream : (int -> string) -> stream
-	val fromStream : TextIO.StreamIO.instream -> stream
-	val getc : stream -> (Char.char * stream) option
-	val getpos : stream -> int
-	val getlineNo : stream -> int
-	val subtract : stream * stream -> string
-	val eof : stream -> bool
-	val lastWasNL : stream -> bool
-
-      end = struct
-
-        structure TIO = TextIO
-        structure TSIO = TIO.StreamIO
-	structure TPIO = TextPrimIO
-
-        datatype stream = Stream of {
-            strm : TSIO.instream,
-	    id : int,  (* track which streams originated 
-			* from the same stream *)
-	    pos : int,
-	    lineNo : int,
-	    lastWasNL : bool
-          }
-
-	local
-	  val next = ref 0
-	in
-	fun nextId() = !next before (next := !next + 1)
-	end
-
-	val initPos = 2 (* ml-lex bug compatibility *)
-
-	fun mkStream inputN = let
-              val strm = TSIO.mkInstream 
-			   (TPIO.RD {
-			        name = "lexgen",
-				chunkSize = 4096,
-				readVec = SOME inputN,
-				readArr = NONE,
-				readVecNB = NONE,
-				readArrNB = NONE,
-				block = NONE,
-				canInput = NONE,
-				avail = (fn () => NONE),
-				getPos = NONE,
-				setPos = NONE,
-				endPos = NONE,
-				verifyPos = NONE,
-				close = (fn () => ()),
-				ioDesc = NONE
-			      }, "")
-	      in 
-		Stream {strm = strm, id = nextId(), pos = initPos, lineNo = 1,
-			lastWasNL = true}
-	      end
-
-	fun fromStream strm = Stream {
-		strm = strm, id = nextId(), pos = initPos, lineNo = 1, lastWasNL = true
-	      }
-
-	fun getc (Stream {strm, pos, id, lineNo, ...}) = (case TSIO.input1 strm
-              of NONE => NONE
-	       | SOME (c, strm') => 
-		   SOME (c, Stream {
-			        strm = strm', 
-				pos = pos+1, 
-				id = id,
-				lineNo = lineNo + 
-					 (if c = #"\n" then 1 else 0),
-				lastWasNL = (c = #"\n")
-			      })
-	     (* end case*))
-
-	fun getpos (Stream {pos, ...}) = pos
-
-	fun getlineNo (Stream {lineNo, ...}) = lineNo
-
-	fun subtract (new, old) = let
-	      val Stream {strm = strm, pos = oldPos, id = oldId, ...} = old
-	      val Stream {pos = newPos, id = newId, ...} = new
-              val (diff, _) = if newId = oldId andalso newPos >= oldPos
-			      then TSIO.inputN (strm, newPos - oldPos)
-			      else raise Fail 
-				"BUG: yyInput: attempted to subtract incompatible streams"
-	      in 
-		diff 
-	      end
-
-	fun eof (Stream {strm, ...}) = TSIO.endOfStream strm
-
-	fun lastWasNL (Stream {lastWasNL, ...}) = lastWasNL
-
-      end
-
-    datatype yystart_state = 
-C | S | INITIAL
-    structure UserDeclarations = 
+			 sharing TokTable.Tokens = Tokens)=
+   struct
+    structure UserDeclarations =
       struct
-
 (* Copyright (c) 1998 by Lucent Technologies *)
 
 (*
@@ -217,1564 +117,935 @@ fun special_char(c,fst,last,errWarn:errWarn) =
  *)
 
 
+end (* end of user routines *)
+exception LexError (* raised if illegal leaf action tried *)
+structure Internal =
+	struct
 
+datatype yyfinstate = N of int
+type statedata = {fin : yyfinstate list, trans: string}
+(* transition & final state table *)
+val tab = let
+val s = [ 
+ (0, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (1, 
+"\007\007\007\007\007\007\007\007\007\095\097\007\095\007\007\007\
+\\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
+\\095\093\092\007\007\090\087\073\072\071\069\066\065\061\057\054\
+\\044\033\033\033\033\033\033\033\033\033\032\031\027\025\021\020\
+\\007\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
+\\014\014\014\014\014\014\014\014\014\014\014\019\007\018\016\014\
+\\007\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
+\\014\014\014\014\014\014\014\014\014\014\014\013\010\009\008\007\
+\\007"
+),
+ (2, 
+"\007\007\007\007\007\007\007\007\007\101\097\007\101\007\007\007\
+\\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
+\\101\093\092\098\007\090\087\073\072\071\069\066\065\061\057\054\
+\\044\033\033\033\033\033\033\033\033\033\032\031\027\025\021\020\
+\\007\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
+\\014\014\014\014\014\014\014\014\014\014\014\019\007\018\016\014\
+\\007\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
+\\014\014\014\014\014\014\014\014\014\014\014\013\010\009\008\007\
+\\007"
+),
+ (3, 
+"\103\103\103\103\103\103\103\103\103\106\097\103\106\103\103\103\
+\\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\
+\\106\103\103\103\103\103\103\103\103\103\104\103\103\103\103\103\
+\\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\
+\\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\
+\\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\
+\\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\
+\\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\
+\\103"
+),
+ (4, 
+"\103\103\103\103\103\103\103\103\103\108\097\103\108\103\103\103\
+\\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\
+\\108\103\103\107\103\103\103\103\103\103\104\103\103\103\103\103\
+\\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\
+\\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\
+\\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\
+\\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\
+\\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\
+\\103"
+),
+ (5, 
+"\109\109\109\109\109\109\109\109\109\109\122\109\109\109\109\109\
+\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
+\\109\109\121\109\109\109\109\109\109\109\109\109\109\109\109\109\
+\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
+\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
+\\109\109\109\109\109\109\109\109\109\109\109\109\110\109\109\109\
+\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
+\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
+\\109"
+),
+ (10, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\011\000\000\000\
+\\000"
+),
+ (14, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\015\015\015\015\015\015\015\015\015\015\000\000\000\000\000\000\
+\\000\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\
+\\015\015\015\015\015\015\015\015\015\015\015\000\000\000\000\015\
+\\000\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\
+\\015\015\015\015\015\015\015\015\015\015\015\000\000\000\000\000\
+\\000"
+),
+ (16, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (21, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\024\022\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (22, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (25, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (27, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\029\028\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (29, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (33, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
+\\041\041\041\041\041\041\041\041\041\041\000\000\000\000\000\000\
+\\000\000\000\000\000\037\000\000\000\000\000\000\036\000\000\000\
+\\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\037\000\000\000\000\000\000\036\000\000\000\
+\\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (34, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\035\000\000\000\
+\\000\000\000\000\000\035\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\035\000\000\000\
+\\000\000\000\000\000\035\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (37, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\040\000\040\000\000\
+\\038\038\038\038\038\038\038\038\038\038\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (38, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\038\038\038\038\038\038\038\038\038\038\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\039\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\039\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (40, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\038\038\038\038\038\038\038\038\038\038\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (42, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\043\043\043\043\043\043\043\043\043\043\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (43, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\043\043\043\043\043\043\043\043\043\043\000\000\000\000\000\000\
+\\000\000\000\000\000\037\000\000\000\000\000\000\039\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\037\000\000\000\000\000\000\039\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (44, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
+\\050\050\050\050\050\050\050\050\049\049\000\000\000\000\000\000\
+\\000\000\000\000\000\037\000\000\000\000\000\000\036\000\000\000\
+\\000\000\000\000\000\034\000\000\045\000\000\000\000\000\000\000\
+\\000\000\000\000\000\037\000\000\000\000\000\000\036\000\000\000\
+\\000\000\000\000\000\034\000\000\045\000\000\000\000\000\000\000\
+\\000"
+),
+ (45, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\046\046\046\046\046\046\046\046\046\046\000\000\000\000\000\000\
+\\000\046\046\046\046\046\046\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\046\046\046\046\046\046\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (46, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\046\046\046\046\046\046\046\046\046\046\000\000\000\000\000\000\
+\\000\046\046\046\046\046\046\000\000\000\000\000\047\000\000\000\
+\\000\000\000\000\000\047\000\000\000\000\000\000\000\000\000\000\
+\\000\046\046\046\046\046\046\000\000\000\000\000\047\000\000\000\
+\\000\000\000\000\000\047\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (47, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\048\000\000\000\
+\\000\000\000\000\000\048\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\048\000\000\000\
+\\000\000\000\000\000\048\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (49, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
+\\049\049\049\049\049\049\049\049\049\049\000\000\000\000\000\000\
+\\000\000\000\000\000\037\000\000\000\000\000\000\039\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\037\000\000\000\000\000\000\039\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (50, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
+\\050\050\050\050\050\050\050\050\049\049\000\000\000\000\000\000\
+\\000\000\000\000\000\037\000\000\000\000\000\000\053\000\000\000\
+\\000\000\000\000\000\051\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\037\000\000\000\000\000\000\053\000\000\000\
+\\000\000\000\000\000\051\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (51, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\052\000\000\000\
+\\000\000\000\000\000\052\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\052\000\000\000\
+\\000\000\000\000\000\052\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (54, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\056\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\055\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (57, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\059\000\
+\\058\058\058\058\058\058\058\058\058\058\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (58, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\058\058\058\058\058\058\058\058\058\058\000\000\000\000\000\000\
+\\000\000\000\000\000\037\000\000\000\000\000\000\039\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\037\000\000\000\000\000\000\039\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (59, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\060\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (61, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\064\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\063\062\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (66, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\068\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (69, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\070\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (73, 
+"\074\074\074\074\074\074\074\074\074\074\000\074\074\074\074\074\
+\\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\
+\\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\
+\\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\
+\\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\
+\\074\074\074\074\074\074\074\074\074\074\074\074\076\074\074\074\
+\\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\
+\\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\
+\\074"
+),
+ (74, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\075\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (76, 
+"\077\077\077\077\077\077\077\077\077\077\000\077\077\077\077\077\
+\\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\
+\\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\
+\\082\082\082\082\082\082\082\082\077\077\077\077\077\077\077\077\
+\\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\
+\\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\
+\\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\
+\\077\077\077\077\077\077\077\077\079\077\077\077\077\077\077\077\
+\\077"
+),
+ (77, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\078\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (79, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\078\000\000\000\000\000\000\000\000\
+\\080\080\080\080\080\080\080\080\080\080\000\000\000\000\000\000\
+\\000\080\080\080\080\080\080\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\080\080\080\080\080\080\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (80, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\081\000\000\000\000\000\000\000\000\
+\\080\080\080\080\080\080\080\080\080\080\000\000\000\000\000\000\
+\\000\080\080\080\080\080\080\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\080\080\080\080\080\080\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (82, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\086\000\000\000\000\000\000\000\000\
+\\083\083\083\083\083\083\083\083\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (83, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\085\000\000\000\000\000\000\000\000\
+\\084\084\084\084\084\084\084\084\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (84, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\085\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (87, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\089\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\088\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (90, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\091\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (93, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\094\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (95, 
+"\000\000\000\000\000\000\000\000\000\096\000\000\096\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\096\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (98, 
+"\099\099\099\099\099\099\099\099\099\099\100\099\099\099\099\099\
+\\099\099\099\099\099\099\099\099\099\099\099\099\099\099\099\099\
+\\099\099\099\099\099\099\099\099\099\099\099\099\099\099\099\099\
+\\099\099\099\099\099\099\099\099\099\099\099\099\099\099\099\099\
+\\099\099\099\099\099\099\099\099\099\099\099\099\099\099\099\099\
+\\099\099\099\099\099\099\099\099\099\099\099\099\099\099\099\099\
+\\099\099\099\099\099\099\099\099\099\099\099\099\099\099\099\099\
+\\099\099\099\099\099\099\099\099\099\099\099\099\099\099\099\099\
+\\099"
+),
+ (101, 
+"\000\000\000\000\000\000\000\000\000\102\000\000\102\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\102\000\000\099\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (104, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\105\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (109, 
+"\109\109\109\109\109\109\109\109\109\109\000\109\109\109\109\109\
+\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
+\\109\109\000\109\109\109\109\109\109\109\109\109\109\109\109\109\
+\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
+\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
+\\109\109\109\109\109\109\109\109\109\109\109\109\000\109\109\109\
+\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
+\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
+\\109"
+),
+ (110, 
+"\111\111\111\111\111\111\111\111\111\111\120\111\111\111\111\111\
+\\111\111\111\111\111\111\111\111\111\111\111\111\111\111\111\111\
+\\111\111\111\111\111\111\111\111\111\111\111\111\111\111\111\111\
+\\119\116\116\116\116\116\116\116\111\111\111\111\111\111\111\111\
+\\111\111\111\111\111\111\111\111\111\111\111\111\111\111\111\111\
+\\111\111\111\111\111\111\111\111\111\111\111\111\111\111\114\111\
+\\111\111\111\111\111\111\111\111\111\111\111\111\111\111\111\111\
+\\111\111\111\111\111\111\111\111\112\111\111\111\111\111\111\111\
+\\111"
+),
+ (112, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\113\113\113\113\113\113\113\113\113\113\000\000\000\000\000\000\
+\\000\113\113\113\113\113\113\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\113\113\113\113\113\113\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (114, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\115\115\115\115\115\115\115\115\115\115\115\115\115\115\115\115\
+\\115\115\115\115\115\115\115\115\115\115\115\115\115\115\115\115\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (116, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\117\117\117\117\117\117\117\117\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+ (117, 
+"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\118\118\118\118\118\118\118\118\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
+\\000"
+),
+(0, "")]
+fun f x = x 
+val s = List.map f (List.rev (tl (List.rev s))) 
+exception LexHackingError 
+fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
+  | look ([], i) = raise LexHackingError
+fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
+in Vector.fromList(List.map g 
+[{fin = [], trans = 0},
+{fin = [(N 10)], trans = 1},
+{fin = [(N 10)], trans = 2},
+{fin = [(N 10)], trans = 3},
+{fin = [(N 10)], trans = 4},
+{fin = [(N 26)], trans = 5},
+{fin = [(N 26)], trans = 5},
+{fin = [(N 227)], trans = 0},
+{fin = [(N 96),(N 227)], trans = 0},
+{fin = [(N 65),(N 227)], trans = 0},
+{fin = [(N 100),(N 227)], trans = 10},
+{fin = [(N 157)], trans = 0},
+{fin = [(N 136)], trans = 0},
+{fin = [(N 63),(N 227)], trans = 0},
+{fin = [(N 225),(N 227)], trans = 14},
+{fin = [(N 225)], trans = 14},
+{fin = [(N 79),(N 227)], trans = 16},
+{fin = [(N 124)], trans = 0},
+{fin = [(N 61),(N 227)], trans = 0},
+{fin = [(N 59),(N 227)], trans = 0},
+{fin = [(N 98),(N 227)], trans = 0},
+{fin = [(N 151),(N 227)], trans = 21},
+{fin = [(N 166)], trans = 22},
+{fin = [(N 147)], trans = 0},
+{fin = [(N 110)], trans = 0},
+{fin = [(N 115),(N 227)], trans = 25},
+{fin = [(N 113)], trans = 0},
+{fin = [(N 149),(N 227)], trans = 27},
+{fin = [(N 107)], trans = 0},
+{fin = [(N 163)], trans = 29},
+{fin = [(N 143)], trans = 0},
+{fin = [(N 53),(N 227)], trans = 0},
+{fin = [(N 51),(N 227)], trans = 0},
+{fin = [(N 185),(N 199),(N 227)], trans = 33},
+{fin = [(N 185)], trans = 34},
+{fin = [(N 185)], trans = 0},
+{fin = [(N 185),(N 199)], trans = 34},
+{fin = [], trans = 37},
+{fin = [(N 199)], trans = 38},
+{fin = [(N 199)], trans = 0},
+{fin = [], trans = 40},
+{fin = [(N 185),(N 199)], trans = 33},
+{fin = [], trans = 42},
+{fin = [(N 199)], trans = 43},
+{fin = [(N 185),(N 199),(N 227)], trans = 44},
+{fin = [], trans = 45},
+{fin = [(N 179)], trans = 46},
+{fin = [(N 179)], trans = 47},
+{fin = [(N 179)], trans = 0},
+{fin = [(N 199)], trans = 49},
+{fin = [(N 172),(N 199)], trans = 50},
+{fin = [(N 172)], trans = 51},
+{fin = [(N 172)], trans = 0},
+{fin = [(N 172),(N 199)], trans = 51},
+{fin = [(N 94),(N 227)], trans = 54},
+{fin = [(N 133)], trans = 0},
+{fin = [(N 13)], trans = 0},
+{fin = [(N 67),(N 227)], trans = 57},
+{fin = [(N 199)], trans = 58},
+{fin = [], trans = 59},
+{fin = [(N 71)], trans = 0},
+{fin = [(N 83),(N 227)], trans = 61},
+{fin = [(N 92)], trans = 0},
+{fin = [(N 121)], trans = 0},
+{fin = [(N 89)], trans = 0},
+{fin = [(N 73),(N 227)], trans = 0},
+{fin = [(N 81),(N 227)], trans = 66},
+{fin = [(N 118)], trans = 0},
+{fin = [(N 86)], trans = 0},
+{fin = [(N 75),(N 227)], trans = 69},
+{fin = [(N 130)], trans = 0},
+{fin = [(N 57),(N 227)], trans = 0},
+{fin = [(N 55),(N 227)], trans = 0},
+{fin = [(N 227)], trans = 73},
+{fin = [], trans = 74},
+{fin = [(N 217)], trans = 0},
+{fin = [], trans = 76},
+{fin = [], trans = 77},
+{fin = [(N 222)], trans = 0},
+{fin = [], trans = 79},
+{fin = [], trans = 80},
+{fin = [(N 213)], trans = 0},
+{fin = [], trans = 82},
+{fin = [], trans = 83},
+{fin = [], trans = 84},
+{fin = [(N 206)], trans = 0},
+{fin = [(N 206),(N 222)], trans = 0},
+{fin = [(N 102),(N 227)], trans = 87},
+{fin = [(N 139)], trans = 0},
+{fin = [(N 160)], trans = 0},
+{fin = [(N 104),(N 227)], trans = 90},
+{fin = [(N 127)], trans = 0},
+{fin = [(N 20),(N 227)], trans = 0},
+{fin = [(N 77),(N 227)], trans = 93},
+{fin = [(N 154)], trans = 0},
+{fin = [(N 10),(N 227)], trans = 95},
+{fin = [(N 10)], trans = 95},
+{fin = [(N 7)], trans = 0},
+{fin = [(N 227)], trans = 98},
+{fin = [], trans = 98},
+{fin = [(N 5)], trans = 0},
+{fin = [(N 10),(N 227)], trans = 101},
+{fin = [(N 10)], trans = 101},
+{fin = [(N 18)], trans = 0},
+{fin = [(N 18)], trans = 104},
+{fin = [(N 16)], trans = 0},
+{fin = [(N 10),(N 18)], trans = 95},
+{fin = [(N 18)], trans = 98},
+{fin = [(N 10),(N 18)], trans = 101},
+{fin = [(N 26)], trans = 109},
+{fin = [], trans = 110},
+{fin = [(N 49)], trans = 0},
+{fin = [(N 49)], trans = 112},
+{fin = [(N 42)], trans = 112},
+{fin = [(N 49)], trans = 114},
+{fin = [(N 46)], trans = 0},
+{fin = [(N 49)], trans = 116},
+{fin = [], trans = 117},
+{fin = [(N 37)], trans = 0},
+{fin = [(N 32),(N 49)], trans = 116},
+{fin = [(N 29)], trans = 0},
+{fin = [(N 22)], trans = 0},
+{fin = [(N 24)], trans = 0}])
+end
+structure StartStates =
+	struct
+	datatype yystartstate = STARTSTATE of int
 
-      end
+(* start state definitions *)
 
-    datatype yymatch 
-      = yyNO_MATCH
-      | yyMATCH of yyInput.stream * action * yymatch
-    withtype action = yyInput.stream * yymatch -> UserDeclarations.lexresult
+val C = STARTSTATE 3;
+val INITIAL = STARTSTATE 1;
+val S = STARTSTATE 5;
 
-    local
+end
+type result = UserDeclarations.lexresult
+	exception LexerError (* raised if illegal leaf action tried *)
+end
 
-    val yytable = 
-#[
-]
+fun makeLexer yyinput =
+let	val yygone0=1
+	val yyb = ref "\n" 		(* buffer *)
+	val yybl = ref 1		(*buffer length *)
+	val yybufpos = ref 1		(* location of next character to use *)
+	val yygone = ref yygone0	(* position in file of beginning of buffer *)
+	val yydone = ref false		(* eof found yet? *)
+	val yybegin = ref 1		(*Current 'start state' for lexer *)
 
-    fun mk yyins = let
-        (* current start state *)
-        val yyss = ref INITIAL
-	fun YYBEGIN ss = (yyss := ss)
-	(* current input stream *)
-        val yystrm = ref yyins
-	(* get one char of input *)
-	val yygetc = yyInput.getc
-	(* create yytext *)
-	fun yymktext(strm) = yyInput.subtract (strm, !yystrm)
-        open UserDeclarations
-        fun lex 
-(yyarg as ({comLevel,errWarn,sourceMap,charlist,stringstart})) () = let 
-     fun continue() = let
-            val yylastwasn = yyInput.lastWasNL (!yystrm)
-            fun yystuck (yyNO_MATCH) = raise Fail "stuck state"
-	      | yystuck (yyMATCH (strm, action, old)) = 
-		  action (strm, old)
-	    val yypos = yyInput.getpos (!yystrm)
-	    val yygetlineNo = yyInput.getlineNo
-	    fun yyactsToMatches (strm, [],	  oldMatches) = oldMatches
-	      | yyactsToMatches (strm, act::acts, oldMatches) = 
-		  yyMATCH (strm, act, yyactsToMatches (strm, acts, oldMatches))
-	    fun yygo actTable = 
-		(fn (~1, _, oldMatches) => yystuck oldMatches
-		  | (curState, strm, oldMatches) => let
-		      val (transitions, finals') = Vector.sub (yytable, curState)
-		      val finals = map (fn i => Vector.sub (actTable, i)) finals'
-		      fun tryfinal() = 
-		            yystuck (yyactsToMatches (strm, finals, oldMatches))
-		      fun find (c, []) = NONE
-			| find (c, (c1, c2, s)::ts) = 
-		            if c1 <= c andalso c <= c2 then SOME s
-			    else find (c, ts)
-		      in case yygetc strm
-			  of SOME(c, strm') => 
-			       (case find (c, transitions)
-				 of NONE => tryfinal()
-				  | SOME n => 
-				      yygo actTable
-					(n, strm', 
-					 yyactsToMatches (strm, finals, oldMatches)))
-			   | NONE => tryfinal()
-		      end)
-	    in 
-let
-fun yyAction0 (strm, lastMatch : yymatch) = let
-      val oldStrm = !(yystrm)
-      fun REJECT () = (yystrm := oldStrm; yystuck(lastMatch))
-      val yytext = yymktext(strm)
-      in
-        yystrm := strm;
-        if not yylastwasn then REJECT() else ((SourceMap.parseDirective sourceMap 
-                         (yypos,yytext); continue()))
-      end
-fun yyAction1 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (SourceMap.newline sourceMap yypos; continue()))
-fun yyAction2 (strm, lastMatch : yymatch) = (yystrm := strm; (continue()))
-fun yyAction3 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (YYBEGIN C; continue()))
-fun yyAction4 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (YYBEGIN INITIAL; continue()))
-fun yyAction5 (strm, lastMatch : yymatch) = (yystrm := strm; (continue()))
-fun yyAction6 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (charlist := [""]; stringstart := yypos; YYBEGIN S; continue()))
-fun yyAction7 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (YYBEGIN INITIAL;Tokens.STRING(makeString charlist,!stringstart,yypos+1)))
-fun yyAction8 (strm, lastMatch : yymatch) = (yystrm := strm;
-      ((#err errWarn) (!stringstart,yypos,"unclosed string");
-		    SourceMap.newline sourceMap yypos;
-		    YYBEGIN INITIAL; Tokens.STRING(makeString charlist,!stringstart,yypos)))
-fun yyAction9 (strm, lastMatch : yymatch) = let
-      val yytext = yymktext(strm)
-      in
-        yystrm := strm; (addString(charlist,yytext); continue())
-      end
-fun yyAction10 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (SourceMap.newline sourceMap yypos; continue()))
-fun yyAction11 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (addString(charlist,chr 0);continue()))
-fun yyAction12 (strm, lastMatch : yymatch) = let
-      val yytext = yymktext(strm)
-      in
-        yystrm := strm;
-        (addString(charlist, chr(mkOctChar(substring(yytext, 1, size(yytext)-1), yypos, yypos+size(yytext), errWarn))); continue())
-      end
-fun yyAction13 (strm, lastMatch : yymatch) = let
-      val yytext = yymktext(strm)
-      in
-        yystrm := strm;
-        (addString(charlist, chr(mkHexChar(substring(yytext, 2, size(yytext)-2), yypos, yypos+size(yytext), errWarn))); continue())
-      end
-fun yyAction14 (strm, lastMatch : yymatch) = let
-      val yytext = yymktext(strm)
-      in
-        yystrm := strm;
-        (addString(charlist,chr(ordof(yytext,2)-ord("@"))); continue())
-      end
-fun yyAction15 (strm, lastMatch : yymatch) = let
-      val yytext = yymktext(strm)
-      in
-        yystrm := strm;
-        (addString(charlist, chr(special_char(yytext, yypos, yypos+size(yytext), errWarn))); continue())
-      end
-fun yyAction16 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.COLON(yypos,yypos+1)))
-fun yyAction17 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.SEMICOLON(yypos,yypos+1)))
-fun yyAction18 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.LPAREN(yypos,yypos+1)))
-fun yyAction19 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.RPAREN(yypos,yypos+1)))
-fun yyAction20 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.LBRACE(yypos,yypos+1)))
-fun yyAction21 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.RBRACE(yypos,yypos+1)))
-fun yyAction22 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.LCURLY(yypos,yypos+1)))
-fun yyAction23 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.RCURLY(yypos,yypos+1)))
-fun yyAction24 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.DOT(yypos,yypos+1)))
-fun yyAction25 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.ELIPSIS(yypos,yypos+3)))
-fun yyAction26 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.COMMA(yypos,yypos+1)))
-fun yyAction27 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.TIMES(yypos,yypos+1)))
-fun yyAction28 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.BANG(yypos,yypos+1)))
-fun yyAction29 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.HAT(yypos,yypos+1)))
-fun yyAction30 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.PLUS(yypos,yypos+1)))
-fun yyAction31 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.MINUS(yypos,yypos+1)))
-fun yyAction32 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.INC(yypos,yypos+2)))
-fun yyAction33 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.DEC(yypos,yypos+2)))
-fun yyAction34 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.ARROW(yypos,yypos+1)))
-fun yyAction35 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.DIVIDE(yypos,yypos+1)))
-fun yyAction36 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.TILDE(yypos,yypos+1)))
-fun yyAction37 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.QUESTION(yypos,yypos+1)))
-fun yyAction38 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.BAR(yypos,yypos+1)))
-fun yyAction39 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.AMP(yypos,yypos+1)))
-fun yyAction40 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.PERCENT(yypos,yypos+1)))
-fun yyAction41 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.LTE(yypos,yypos+2)))
-fun yyAction42 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.GTE(yypos,yypos+2)))
-fun yyAction43 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.EQ(yypos,yypos+2)))
-fun yyAction44 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.EQUALS(yypos,yypos+1)))
-fun yyAction45 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.PLUSEQUALS(yypos,yypos+2)))
-fun yyAction46 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.MINUSEQUALS(yypos,yypos+2)))
-fun yyAction47 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.XOREQUALS(yypos,yypos+2)))
-fun yyAction48 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.MODEQUALS(yypos,yypos+2)))
-fun yyAction49 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.TIMESEQUALS(yypos,yypos+2)))
-fun yyAction50 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.DIVEQUALS(yypos,yypos+2)))
-fun yyAction51 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.OREQUALS(yypos,yypos+2)))
-fun yyAction52 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.ANDEQUALS(yypos,yypos+2)))
-fun yyAction53 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.LSHIFTEQUALS(yypos,yypos+3)))
-fun yyAction54 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.RSHIFTEQUALS(yypos,yypos+3)))
-fun yyAction55 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.LT(yypos,yypos+1)))
-fun yyAction56 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.GT(yypos,yypos+1)))
-fun yyAction57 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.NEQ(yypos,yypos+2)))
-fun yyAction58 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.OR(yypos,yypos+2)))
-fun yyAction59 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.AND(yypos,yypos+2)))
-fun yyAction60 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.LSHIFT(yypos,yypos+2)))
-fun yyAction61 (strm, lastMatch : yymatch) = (yystrm := strm;
-      (Tokens.RSHIFT(yypos,yypos+2)))
-fun yyAction62 (strm, lastMatch : yymatch) = let
-      val yytext = yymktext(strm)
-      in
-        yystrm := strm;
-        (Tokens.DECNUM(mkOctInt(yytext,yypos,yypos+size(yytext),errWarn),yypos, yypos+size(yytext)))
-      end
-fun yyAction63 (strm, lastMatch : yymatch) = let
-      val yytext = yymktext(strm)
-      in
-        yystrm := strm;
-        (Tokens.DECNUM(mkHexInt(yytext,yypos,yypos+size(yytext),errWarn),yypos, yypos+size(yytext)))
-      end
-fun yyAction64 (strm, lastMatch : yymatch) = let
-      val yytext = yymktext(strm)
-      in
-        yystrm := strm;
-        (Tokens.DECNUM(mkInt (yytext,yypos,yypos+size(yytext),errWarn), yypos,yypos+size(yytext)))
-      end
-fun yyAction65 (strm, lastMatch : yymatch) = let
-      val yytext = yymktext(strm)
-      in
-        yystrm := strm;
-        (Tokens.REALNUM(mkRealNum(yytext,yypos,yypos+size(yytext),errWarn), yypos, yypos
-+ size(yytext)))
-      end
-fun yyAction66 (strm, lastMatch : yymatch) = let
-      val yytext = yymktext(strm)
-      in
-        yystrm := strm;
-        (let val s = substring(yytext, 2, size(yytext)-3)
+	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
+		 yybegin := x
+
+fun lex (yyarg as ({comLevel,errWarn,sourceMap,charlist,stringstart})) =
+let fun continue() : Internal.result = 
+  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
+	let fun action (i,nil) = raise LexError
+	| action (i,nil::l) = action (i-1,l)
+	| action (i,(node::acts)::l) =
+		case node of
+		    Internal.N yyk => 
+			(let fun yymktext() = String.substring(!yyb,i0,i-i0)
+			     val yypos = i0+ !yygone
+			open UserDeclarations Internal.StartStates
+ in (yybufpos := i; case yyk of 
+
+			(* Application actions *)
+
+  10 => (continue())
+| 100 => (Tokens.BAR(yypos,yypos+1))
+| 102 => (Tokens.AMP(yypos,yypos+1))
+| 104 => (Tokens.PERCENT(yypos,yypos+1))
+| 107 => (Tokens.LTE(yypos,yypos+2))
+| 110 => (Tokens.GTE(yypos,yypos+2))
+| 113 => (Tokens.EQ(yypos,yypos+2))
+| 115 => (Tokens.EQUALS(yypos,yypos+1))
+| 118 => (Tokens.PLUSEQUALS(yypos,yypos+2))
+| 121 => (Tokens.MINUSEQUALS(yypos,yypos+2))
+| 124 => (Tokens.XOREQUALS(yypos,yypos+2))
+| 127 => (Tokens.MODEQUALS(yypos,yypos+2))
+| 13 => (YYBEGIN C; continue())
+| 130 => (Tokens.TIMESEQUALS(yypos,yypos+2))
+| 133 => (Tokens.DIVEQUALS(yypos,yypos+2))
+| 136 => (Tokens.OREQUALS(yypos,yypos+2))
+| 139 => (Tokens.ANDEQUALS(yypos,yypos+2))
+| 143 => (Tokens.LSHIFTEQUALS(yypos,yypos+3))
+| 147 => (Tokens.RSHIFTEQUALS(yypos,yypos+3))
+| 149 => (Tokens.LT(yypos,yypos+1))
+| 151 => (Tokens.GT(yypos,yypos+1))
+| 154 => (Tokens.NEQ(yypos,yypos+2))
+| 157 => (Tokens.OR(yypos,yypos+2))
+| 16 => (YYBEGIN INITIAL; continue())
+| 160 => (Tokens.AND(yypos,yypos+2))
+| 163 => (Tokens.LSHIFT(yypos,yypos+2))
+| 166 => (Tokens.RSHIFT(yypos,yypos+2))
+| 172 => let val yytext=yymktext() in Tokens.DECNUM(mkOctInt(yytext,yypos,yypos+size(yytext),errWarn),yypos, yypos+size(yytext)) end
+| 179 => let val yytext=yymktext() in Tokens.DECNUM(mkHexInt(yytext,yypos,yypos+size(yytext),errWarn),yypos, yypos+size(yytext)) end
+| 18 => (continue())
+| 185 => let val yytext=yymktext() in Tokens.DECNUM(mkInt (yytext,yypos,yypos+size(yytext),errWarn), yypos,yypos+size(yytext)) end
+| 199 => let val yytext=yymktext() in Tokens.REALNUM(mkRealNum(yytext,yypos,yypos+size(yytext),errWarn), yypos, yypos
++ size(yytext)) end
+| 20 => (charlist := [""]; stringstart := yypos; YYBEGIN S; continue())
+| 206 => let val yytext=yymktext() in let val s = substring(yytext, 2, size(yytext)-3)
 				     in Tokens.CCONST(IntInf.fromInt (mkOctChar(s,yypos,yypos+size(yytext),errWarn)),
 						      yypos,
 					      yypos+size(yytext))
-	                             end)
-      end
-fun yyAction67 (strm, lastMatch : yymatch) = let
-      val yytext = yymktext(strm)
-      in
-        yystrm := strm;
-        (let val s = substring(yytext, 3, size(yytext)-4)
+	                             end end
+| 213 => let val yytext=yymktext() in let val s = substring(yytext, 3, size(yytext)-4)
 				     in Tokens.CCONST(IntInf.fromInt (mkHexChar(s,yypos,yypos+size(yytext),errWarn)),
 						      yypos,
 						      yypos+size(yytext))
-	                             end)
-      end
-fun yyAction68 (strm, lastMatch : yymatch) = let
-      val yytext = yymktext(strm)
-      in
-        yystrm := strm;
-        (let val cval = ordof(yytext,1)
+	                             end end
+| 217 => let val yytext=yymktext() in let val cval = ordof(yytext,1)
 	                            in Tokens.CCONST(Int.toLarge cval,yypos,yypos+size(yytext))
-                                    end)
-      end
-fun yyAction69 (strm, lastMatch : yymatch) = let
-      val yytext = yymktext(strm)
-      in
-        yystrm := strm;
-        (Tokens.CCONST(IntInf.fromInt(special_char(substring(yytext,1,size(yytext)-2),yypos,yypos+size(yytext),errWarn)), yypos, yypos+size(yytext)))
-      end
-fun yyAction70 (strm, lastMatch : yymatch) = let
-      val yytext = yymktext(strm)
-      in
-        yystrm := strm; (TokTable.checkToken(yytext,yypos))
-      end
-fun yyAction71 (strm, lastMatch : yymatch) = (yystrm := strm; (continue()))
-fun yyQ57 (strm, lastMatch : yymatch) = yyAction36(strm, yyNO_MATCH)
-fun yyQ56 (strm, lastMatch : yymatch) = yyAction23(strm, yyNO_MATCH)
-fun yyQ59 (strm, lastMatch : yymatch) = yyAction58(strm, yyNO_MATCH)
-fun yyQ58 (strm, lastMatch : yymatch) = yyAction51(strm, yyNO_MATCH)
-fun yyQ55 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction38(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #">"
-              then yyAction38(strm, yyNO_MATCH)
-            else if inp < #">"
-              then if inp = #"="
-                  then yyQ58(strm', yyMATCH(strm, yyAction38, yyNO_MATCH))
-                  else yyAction38(strm, yyNO_MATCH)
-            else if inp = #"|"
-              then yyQ59(strm', yyMATCH(strm, yyAction38, yyNO_MATCH))
-              else yyAction38(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ54 (strm, lastMatch : yymatch) = yyAction22(strm, yyNO_MATCH)
-fun yyQ60 (strm, lastMatch : yymatch) = yyAction47(strm, yyNO_MATCH)
-fun yyQ53 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction29(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"="
-              then yyQ60(strm', yyMATCH(strm, yyAction29, yyNO_MATCH))
-              else yyAction29(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ52 (strm, lastMatch : yymatch) = yyAction21(strm, yyNO_MATCH)
-fun yyQ51 (strm, lastMatch : yymatch) = yyAction20(strm, yyNO_MATCH)
-fun yyQ61 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction70(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"["
-              then yyAction70(strm, yyNO_MATCH)
-            else if inp < #"["
-              then if inp = #":"
-                  then yyAction70(strm, yyNO_MATCH)
-                else if inp < #":"
-                  then if inp <= #"/"
-                      then yyAction70(strm, yyNO_MATCH)
-                      else yyQ61(strm', yyMATCH(strm, yyAction70, yyNO_MATCH))
-                else if inp <= #"@"
-                  then yyAction70(strm, yyNO_MATCH)
-                  else yyQ61(strm', yyMATCH(strm, yyAction70, yyNO_MATCH))
-            else if inp = #"`"
-              then yyAction70(strm, yyNO_MATCH)
-            else if inp < #"`"
-              then if inp = #"_"
-                  then yyQ61(strm', yyMATCH(strm, yyAction70, yyNO_MATCH))
-                  else yyAction70(strm, yyNO_MATCH)
-            else if inp <= #"z"
-              then yyQ61(strm', yyMATCH(strm, yyAction70, yyNO_MATCH))
-              else yyAction70(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ50 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction70(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"["
-              then yyAction70(strm, yyNO_MATCH)
-            else if inp < #"["
-              then if inp = #":"
-                  then yyAction70(strm, yyNO_MATCH)
-                else if inp < #":"
-                  then if inp <= #"/"
-                      then yyAction70(strm, yyNO_MATCH)
-                      else yyQ61(strm', yyMATCH(strm, yyAction70, yyNO_MATCH))
-                else if inp <= #"@"
-                  then yyAction70(strm, yyNO_MATCH)
-                  else yyQ61(strm', yyMATCH(strm, yyAction70, yyNO_MATCH))
-            else if inp = #"`"
-              then yyAction70(strm, yyNO_MATCH)
-            else if inp < #"`"
-              then if inp = #"_"
-                  then yyQ61(strm', yyMATCH(strm, yyAction70, yyNO_MATCH))
-                  else yyAction70(strm, yyNO_MATCH)
-            else if inp <= #"z"
-              then yyQ61(strm', yyMATCH(strm, yyAction70, yyNO_MATCH))
-              else yyAction70(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ49 (strm, lastMatch : yymatch) = yyAction37(strm, yyNO_MATCH)
-fun yyQ64 (strm, lastMatch : yymatch) = yyAction54(strm, yyNO_MATCH)
-fun yyQ63 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction61(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"="
-              then yyQ64(strm', yyMATCH(strm, yyAction61, yyNO_MATCH))
-              else yyAction61(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ62 (strm, lastMatch : yymatch) = yyAction42(strm, yyNO_MATCH)
-fun yyQ48 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction56(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #">"
-              then yyQ63(strm', yyMATCH(strm, yyAction56, yyNO_MATCH))
-            else if inp < #">"
-              then if inp = #"="
-                  then yyQ62(strm', yyMATCH(strm, yyAction56, yyNO_MATCH))
-                  else yyAction56(strm, yyNO_MATCH)
-              else yyAction56(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ65 (strm, lastMatch : yymatch) = yyAction43(strm, yyNO_MATCH)
-fun yyQ47 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction44(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"="
-              then yyQ65(strm', yyMATCH(strm, yyAction44, yyNO_MATCH))
-              else yyAction44(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ67 (strm, lastMatch : yymatch) = yyAction41(strm, yyNO_MATCH)
-fun yyQ68 (strm, lastMatch : yymatch) = yyAction53(strm, yyNO_MATCH)
-fun yyQ66 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction60(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"="
-              then yyQ68(strm', yyMATCH(strm, yyAction60, yyNO_MATCH))
-              else yyAction60(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ46 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction55(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"="
-              then yyQ67(strm', yyMATCH(strm, yyAction55, yyNO_MATCH))
-            else if inp < #"="
-              then if inp = #"<"
-                  then yyQ66(strm', yyMATCH(strm, yyAction55, yyNO_MATCH))
-                  else yyAction55(strm, yyNO_MATCH)
-              else yyAction55(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ45 (strm, lastMatch : yymatch) = yyAction17(strm, yyNO_MATCH)
-fun yyQ44 (strm, lastMatch : yymatch) = yyAction16(strm, yyNO_MATCH)
-fun yyQ74 (strm, lastMatch : yymatch) = yyAction64(strm, yyNO_MATCH)
-fun yyQ73 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction64(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"V"
-              then yyAction64(strm, yyNO_MATCH)
-            else if inp < #"V"
-              then if inp = #"M"
-                  then yyAction64(strm, yyNO_MATCH)
-                else if inp < #"M"
-                  then if inp = #"L"
-                      then yyQ74(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                      else yyAction64(strm, yyNO_MATCH)
-                else if inp = #"U"
-                  then yyQ74(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                  else yyAction64(strm, yyNO_MATCH)
-            else if inp = #"m"
-              then yyAction64(strm, yyNO_MATCH)
-            else if inp < #"m"
-              then if inp = #"l"
-                  then yyQ74(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                  else yyAction64(strm, yyNO_MATCH)
-            else if inp = #"u"
-              then yyQ74(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-              else yyAction64(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ72 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction64(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"V"
-              then yyAction64(strm, yyNO_MATCH)
-            else if inp < #"V"
-              then if inp = #"M"
-                  then yyAction64(strm, yyNO_MATCH)
-                else if inp < #"M"
-                  then if inp = #"L"
-                      then yyQ74(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                      else yyAction64(strm, yyNO_MATCH)
-                else if inp = #"U"
-                  then yyQ74(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                  else yyAction64(strm, yyNO_MATCH)
-            else if inp = #"m"
-              then yyAction64(strm, yyNO_MATCH)
-            else if inp < #"m"
-              then if inp = #"l"
-                  then yyQ74(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                  else yyAction64(strm, yyNO_MATCH)
-            else if inp = #"u"
-              then yyQ74(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-              else yyAction64(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ77 (strm, lastMatch : yymatch) = yyAction65(strm, yyNO_MATCH)
-fun yyQ76 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction65(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"L"
-              then yyQ77(strm', yyMATCH(strm, yyAction65, yyNO_MATCH))
-            else if inp < #"L"
-              then if inp = #"0"
-                  then yyQ76(strm', yyMATCH(strm, yyAction65, yyNO_MATCH))
-                else if inp < #"0"
-                  then yyAction65(strm, yyNO_MATCH)
-                else if inp <= #"9"
-                  then yyQ76(strm', yyMATCH(strm, yyAction65, yyNO_MATCH))
-                  else yyAction65(strm, yyNO_MATCH)
-            else if inp = #"l"
-              then yyQ77(strm', yyMATCH(strm, yyAction65, yyNO_MATCH))
-              else yyAction65(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ75 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yystuck(lastMatch)
-        | SOME(inp, strm') =>
-            if inp = #"0"
-              then yyQ76(strm', lastMatch)
-            else if inp < #"0"
-              then yystuck(lastMatch)
-            else if inp <= #"9"
-              then yyQ76(strm', lastMatch)
-              else yystuck(lastMatch)
-      (* end case *))
-fun yyQ71 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yystuck(lastMatch)
-        | SOME(inp, strm') =>
-            if inp = #"-"
-              then yyQ75(strm', lastMatch)
-            else if inp < #"-"
-              then if inp = #"+"
-                  then yyQ75(strm', lastMatch)
-                  else yystuck(lastMatch)
-            else if inp = #"0"
-              then yyQ76(strm', lastMatch)
-            else if inp < #"0"
-              then yystuck(lastMatch)
-            else if inp <= #"9"
-              then yyQ76(strm', lastMatch)
-              else yystuck(lastMatch)
-      (* end case *))
-fun yyQ78 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction65(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"L"
-              then yyQ77(strm', yyMATCH(strm, yyAction65, yyNO_MATCH))
-            else if inp < #"L"
-              then if inp = #":"
-                  then yyAction65(strm, yyNO_MATCH)
-                else if inp < #":"
-                  then if inp <= #"/"
-                      then yyAction65(strm, yyNO_MATCH)
-                      else yyQ78(strm', yyMATCH(strm, yyAction65, yyNO_MATCH))
-                else if inp = #"E"
-                  then yyQ71(strm', yyMATCH(strm, yyAction65, yyNO_MATCH))
-                  else yyAction65(strm, yyNO_MATCH)
-            else if inp = #"f"
-              then yyAction65(strm, yyNO_MATCH)
-            else if inp < #"f"
-              then if inp = #"e"
-                  then yyQ71(strm', yyMATCH(strm, yyAction65, yyNO_MATCH))
-                  else yyAction65(strm, yyNO_MATCH)
-            else if inp = #"l"
-              then yyQ77(strm', yyMATCH(strm, yyAction65, yyNO_MATCH))
-              else yyAction65(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ69 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yystuck(lastMatch)
-        | SOME(inp, strm') =>
-            if inp = #"0"
-              then yyQ78(strm', lastMatch)
-            else if inp < #"0"
-              then yystuck(lastMatch)
-            else if inp <= #"9"
-              then yyQ78(strm', lastMatch)
-              else yystuck(lastMatch)
-      (* end case *))
-fun yyQ70 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction64(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"M"
-              then yyAction64(strm, yyNO_MATCH)
-            else if inp < #"M"
-              then if inp = #":"
-                  then yyAction64(strm, yyNO_MATCH)
-                else if inp < #":"
-                  then if inp = #"/"
-                      then yyAction64(strm, yyNO_MATCH)
-                    else if inp < #"/"
-                      then if inp = #"."
-                          then yyQ69(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                          else yyAction64(strm, yyNO_MATCH)
-                      else yyQ70(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                else if inp = #"F"
-                  then yyAction64(strm, yyNO_MATCH)
-                else if inp < #"F"
-                  then if inp = #"E"
-                      then yyQ71(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                      else yyAction64(strm, yyNO_MATCH)
-                else if inp = #"L"
-                  then yyQ72(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                  else yyAction64(strm, yyNO_MATCH)
-            else if inp = #"f"
-              then yyAction64(strm, yyNO_MATCH)
-            else if inp < #"f"
-              then if inp = #"V"
-                  then yyAction64(strm, yyNO_MATCH)
-                else if inp < #"V"
-                  then if inp = #"U"
-                      then yyQ73(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                      else yyAction64(strm, yyNO_MATCH)
-                else if inp = #"e"
-                  then yyQ71(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                  else yyAction64(strm, yyNO_MATCH)
-            else if inp = #"m"
-              then yyAction64(strm, yyNO_MATCH)
-            else if inp < #"m"
-              then if inp = #"l"
-                  then yyQ72(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                  else yyAction64(strm, yyNO_MATCH)
-            else if inp = #"u"
-              then yyQ73(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-              else yyAction64(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ43 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction64(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"M"
-              then yyAction64(strm, yyNO_MATCH)
-            else if inp < #"M"
-              then if inp = #":"
-                  then yyAction64(strm, yyNO_MATCH)
-                else if inp < #":"
-                  then if inp = #"/"
-                      then yyAction64(strm, yyNO_MATCH)
-                    else if inp < #"/"
-                      then if inp = #"."
-                          then yyQ69(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                          else yyAction64(strm, yyNO_MATCH)
-                      else yyQ70(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                else if inp = #"F"
-                  then yyAction64(strm, yyNO_MATCH)
-                else if inp < #"F"
-                  then if inp = #"E"
-                      then yyQ71(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                      else yyAction64(strm, yyNO_MATCH)
-                else if inp = #"L"
-                  then yyQ72(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                  else yyAction64(strm, yyNO_MATCH)
-            else if inp = #"f"
-              then yyAction64(strm, yyNO_MATCH)
-            else if inp < #"f"
-              then if inp = #"V"
-                  then yyAction64(strm, yyNO_MATCH)
-                else if inp < #"V"
-                  then if inp = #"U"
-                      then yyQ73(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                      else yyAction64(strm, yyNO_MATCH)
-                else if inp = #"e"
-                  then yyQ71(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                  else yyAction64(strm, yyNO_MATCH)
-            else if inp = #"m"
-              then yyAction64(strm, yyNO_MATCH)
-            else if inp < #"m"
-              then if inp = #"l"
-                  then yyQ72(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                  else yyAction64(strm, yyNO_MATCH)
-            else if inp = #"u"
-              then yyQ73(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-              else yyAction64(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ84 (strm, lastMatch : yymatch) = yyAction63(strm, yyNO_MATCH)
-fun yyQ83 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction63(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"V"
-              then yyAction63(strm, yyNO_MATCH)
-            else if inp < #"V"
-              then if inp = #"M"
-                  then yyAction63(strm, yyNO_MATCH)
-                else if inp < #"M"
-                  then if inp = #"L"
-                      then yyQ84(strm', yyMATCH(strm, yyAction63, yyNO_MATCH))
-                      else yyAction63(strm, yyNO_MATCH)
-                else if inp = #"U"
-                  then yyQ84(strm', yyMATCH(strm, yyAction63, yyNO_MATCH))
-                  else yyAction63(strm, yyNO_MATCH)
-            else if inp = #"m"
-              then yyAction63(strm, yyNO_MATCH)
-            else if inp < #"m"
-              then if inp = #"l"
-                  then yyQ84(strm', yyMATCH(strm, yyAction63, yyNO_MATCH))
-                  else yyAction63(strm, yyNO_MATCH)
-            else if inp = #"u"
-              then yyQ84(strm', yyMATCH(strm, yyAction63, yyNO_MATCH))
-              else yyAction63(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ82 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction63(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"U"
-              then yyQ83(strm', yyMATCH(strm, yyAction63, yyNO_MATCH))
-            else if inp < #"U"
-              then if inp = #"A"
-                  then yyQ82(strm', yyMATCH(strm, yyAction63, yyNO_MATCH))
-                else if inp < #"A"
-                  then if inp = #"0"
-                      then yyQ82(strm', yyMATCH(strm, yyAction63, yyNO_MATCH))
-                    else if inp < #"0"
-                      then yyAction63(strm, yyNO_MATCH)
-                    else if inp <= #"9"
-                      then yyQ82(strm', yyMATCH(strm, yyAction63, yyNO_MATCH))
-                      else yyAction63(strm, yyNO_MATCH)
-                else if inp = #"L"
-                  then yyQ83(strm', yyMATCH(strm, yyAction63, yyNO_MATCH))
-                else if inp < #"L"
-                  then if inp <= #"F"
-                      then yyQ82(strm', yyMATCH(strm, yyAction63, yyNO_MATCH))
-                      else yyAction63(strm, yyNO_MATCH)
-                  else yyAction63(strm, yyNO_MATCH)
-            else if inp = #"l"
-              then yyQ83(strm', yyMATCH(strm, yyAction63, yyNO_MATCH))
-            else if inp < #"l"
-              then if inp = #"a"
-                  then yyQ82(strm', yyMATCH(strm, yyAction63, yyNO_MATCH))
-                else if inp < #"a"
-                  then yyAction63(strm, yyNO_MATCH)
-                else if inp <= #"f"
-                  then yyQ82(strm', yyMATCH(strm, yyAction63, yyNO_MATCH))
-                  else yyAction63(strm, yyNO_MATCH)
-            else if inp = #"u"
-              then yyQ83(strm', yyMATCH(strm, yyAction63, yyNO_MATCH))
-              else yyAction63(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ81 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yystuck(lastMatch)
-        | SOME(inp, strm') =>
-            if inp = #"A"
-              then yyQ82(strm', lastMatch)
-            else if inp < #"A"
-              then if inp = #"0"
-                  then yyQ82(strm', lastMatch)
-                else if inp < #"0"
-                  then yystuck(lastMatch)
-                else if inp <= #"9"
-                  then yyQ82(strm', lastMatch)
-                  else yystuck(lastMatch)
-            else if inp = #"a"
-              then yyQ82(strm', lastMatch)
-            else if inp < #"a"
-              then if inp <= #"F"
-                  then yyQ82(strm', lastMatch)
-                  else yystuck(lastMatch)
-            else if inp <= #"f"
-              then yyQ82(strm', lastMatch)
-              else yystuck(lastMatch)
-      (* end case *))
-fun yyQ80 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction65(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"F"
-              then yyAction65(strm, yyNO_MATCH)
-            else if inp < #"F"
-              then if inp = #"0"
-                  then yyQ80(strm', yyMATCH(strm, yyAction65, yyNO_MATCH))
-                else if inp < #"0"
-                  then if inp = #"."
-                      then yyQ69(strm', yyMATCH(strm, yyAction65, yyNO_MATCH))
-                      else yyAction65(strm, yyNO_MATCH)
-                else if inp = #":"
-                  then yyAction65(strm, yyNO_MATCH)
-                else if inp < #":"
-                  then yyQ80(strm', yyMATCH(strm, yyAction65, yyNO_MATCH))
-                else if inp = #"E"
-                  then yyQ71(strm', yyMATCH(strm, yyAction65, yyNO_MATCH))
-                  else yyAction65(strm, yyNO_MATCH)
-            else if inp = #"e"
-              then yyQ71(strm', yyMATCH(strm, yyAction65, yyNO_MATCH))
-            else if inp < #"e"
-              then if inp = #"L"
-                  then yyQ77(strm', yyMATCH(strm, yyAction65, yyNO_MATCH))
-                  else yyAction65(strm, yyNO_MATCH)
-            else if inp = #"l"
-              then yyQ77(strm', yyMATCH(strm, yyAction65, yyNO_MATCH))
-              else yyAction65(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ87 (strm, lastMatch : yymatch) = yyAction62(strm, yyNO_MATCH)
-fun yyQ86 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction62(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"V"
-              then yyAction62(strm, yyNO_MATCH)
-            else if inp < #"V"
-              then if inp = #"M"
-                  then yyAction62(strm, yyNO_MATCH)
-                else if inp < #"M"
-                  then if inp = #"L"
-                      then yyQ87(strm', yyMATCH(strm, yyAction62, yyNO_MATCH))
-                      else yyAction62(strm, yyNO_MATCH)
-                else if inp = #"U"
-                  then yyQ87(strm', yyMATCH(strm, yyAction62, yyNO_MATCH))
-                  else yyAction62(strm, yyNO_MATCH)
-            else if inp = #"m"
-              then yyAction62(strm, yyNO_MATCH)
-            else if inp < #"m"
-              then if inp = #"l"
-                  then yyQ87(strm', yyMATCH(strm, yyAction62, yyNO_MATCH))
-                  else yyAction62(strm, yyNO_MATCH)
-            else if inp = #"u"
-              then yyQ87(strm', yyMATCH(strm, yyAction62, yyNO_MATCH))
-              else yyAction62(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ85 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction62(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"V"
-              then yyAction62(strm, yyNO_MATCH)
-            else if inp < #"V"
-              then if inp = #"M"
-                  then yyAction62(strm, yyNO_MATCH)
-                else if inp < #"M"
-                  then if inp = #"L"
-                      then yyQ87(strm', yyMATCH(strm, yyAction62, yyNO_MATCH))
-                      else yyAction62(strm, yyNO_MATCH)
-                else if inp = #"U"
-                  then yyQ87(strm', yyMATCH(strm, yyAction62, yyNO_MATCH))
-                  else yyAction62(strm, yyNO_MATCH)
-            else if inp = #"m"
-              then yyAction62(strm, yyNO_MATCH)
-            else if inp < #"m"
-              then if inp = #"l"
-                  then yyQ87(strm', yyMATCH(strm, yyAction62, yyNO_MATCH))
-                  else yyAction62(strm, yyNO_MATCH)
-            else if inp = #"u"
-              then yyQ87(strm', yyMATCH(strm, yyAction62, yyNO_MATCH))
-              else yyAction62(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ79 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction62(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"M"
-              then yyAction62(strm, yyNO_MATCH)
-            else if inp < #"M"
-              then if inp = #"8"
-                  then yyQ80(strm', yyMATCH(strm, yyAction62, yyNO_MATCH))
-                else if inp < #"8"
-                  then if inp = #"/"
-                      then yyAction62(strm, yyNO_MATCH)
-                    else if inp < #"/"
-                      then if inp = #"."
-                          then yyQ69(strm', yyMATCH(strm, yyAction62, yyNO_MATCH))
-                          else yyAction62(strm, yyNO_MATCH)
-                      else yyQ79(strm', yyMATCH(strm, yyAction62, yyNO_MATCH))
-                else if inp = #"E"
-                  then yyQ71(strm', yyMATCH(strm, yyAction62, yyNO_MATCH))
-                else if inp < #"E"
-                  then if inp <= #"9"
-                      then yyQ80(strm', yyMATCH(strm, yyAction62, yyNO_MATCH))
-                      else yyAction62(strm, yyNO_MATCH)
-                else if inp = #"L"
-                  then yyQ85(strm', yyMATCH(strm, yyAction62, yyNO_MATCH))
-                  else yyAction62(strm, yyNO_MATCH)
-            else if inp = #"f"
-              then yyAction62(strm, yyNO_MATCH)
-            else if inp < #"f"
-              then if inp = #"V"
-                  then yyAction62(strm, yyNO_MATCH)
-                else if inp < #"V"
-                  then if inp = #"U"
-                      then yyQ86(strm', yyMATCH(strm, yyAction62, yyNO_MATCH))
-                      else yyAction62(strm, yyNO_MATCH)
-                else if inp = #"e"
-                  then yyQ71(strm', yyMATCH(strm, yyAction62, yyNO_MATCH))
-                  else yyAction62(strm, yyNO_MATCH)
-            else if inp = #"m"
-              then yyAction62(strm, yyNO_MATCH)
-            else if inp < #"m"
-              then if inp = #"l"
-                  then yyQ85(strm', yyMATCH(strm, yyAction62, yyNO_MATCH))
-                  else yyAction62(strm, yyNO_MATCH)
-            else if inp = #"u"
-              then yyQ86(strm', yyMATCH(strm, yyAction62, yyNO_MATCH))
-              else yyAction62(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ42 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction64(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"V"
-              then yyAction64(strm, yyNO_MATCH)
-            else if inp < #"V"
-              then if inp = #":"
-                  then yyAction64(strm, yyNO_MATCH)
-                else if inp < #":"
-                  then if inp = #"/"
-                      then yyAction64(strm, yyNO_MATCH)
-                    else if inp < #"/"
-                      then if inp = #"."
-                          then yyQ69(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                          else yyAction64(strm, yyNO_MATCH)
-                    else if inp <= #"7"
-                      then yyQ79(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                      else yyQ80(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                else if inp = #"L"
-                  then yyQ72(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                else if inp < #"L"
-                  then if inp = #"E"
-                      then yyQ71(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                      else yyAction64(strm, yyNO_MATCH)
-                else if inp = #"U"
-                  then yyQ73(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                  else yyAction64(strm, yyNO_MATCH)
-            else if inp = #"l"
-              then yyQ72(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-            else if inp < #"l"
-              then if inp = #"Y"
-                  then yyAction64(strm, yyNO_MATCH)
-                else if inp < #"Y"
-                  then if inp = #"X"
-                      then yyQ81(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                      else yyAction64(strm, yyNO_MATCH)
-                else if inp = #"e"
-                  then yyQ71(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                  else yyAction64(strm, yyNO_MATCH)
-            else if inp = #"v"
-              then yyAction64(strm, yyNO_MATCH)
-            else if inp < #"v"
-              then if inp = #"u"
-                  then yyQ73(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-                  else yyAction64(strm, yyNO_MATCH)
-            else if inp = #"x"
-              then yyQ81(strm', yyMATCH(strm, yyAction64, yyNO_MATCH))
-              else yyAction64(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ89 (strm, lastMatch : yymatch) = yyAction50(strm, yyNO_MATCH)
-fun yyQ88 (strm, lastMatch : yymatch) = yyAction3(strm, yyNO_MATCH)
-fun yyQ41 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction35(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"+"
-              then yyAction35(strm, yyNO_MATCH)
-            else if inp < #"+"
-              then if inp = #"*"
-                  then yyQ88(strm', yyMATCH(strm, yyAction35, yyNO_MATCH))
-                  else yyAction35(strm, yyNO_MATCH)
-            else if inp = #"="
-              then yyQ89(strm', yyMATCH(strm, yyAction35, yyNO_MATCH))
-              else yyAction35(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ91 (strm, lastMatch : yymatch) = yyAction25(strm, yyNO_MATCH)
-fun yyQ90 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yystuck(lastMatch)
-        | SOME(inp, strm') =>
-            if inp = #"."
-              then yyQ91(strm', lastMatch)
-              else yystuck(lastMatch)
-      (* end case *))
-fun yyQ40 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction24(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"/"
-              then yyAction24(strm, yyNO_MATCH)
-            else if inp < #"/"
-              then if inp = #"."
-                  then yyQ90(strm', yyMATCH(strm, yyAction24, yyNO_MATCH))
-                  else yyAction24(strm, yyNO_MATCH)
-            else if inp <= #"9"
-              then yyQ78(strm', yyMATCH(strm, yyAction24, yyNO_MATCH))
-              else yyAction24(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ94 (strm, lastMatch : yymatch) = yyAction34(strm, yyNO_MATCH)
-fun yyQ93 (strm, lastMatch : yymatch) = yyAction46(strm, yyNO_MATCH)
-fun yyQ92 (strm, lastMatch : yymatch) = yyAction33(strm, yyNO_MATCH)
-fun yyQ39 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction31(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"="
-              then yyQ93(strm', yyMATCH(strm, yyAction31, yyNO_MATCH))
-            else if inp < #"="
-              then if inp = #"-"
-                  then yyQ92(strm', yyMATCH(strm, yyAction31, yyNO_MATCH))
-                  else yyAction31(strm, yyNO_MATCH)
-            else if inp = #">"
-              then yyQ94(strm', yyMATCH(strm, yyAction31, yyNO_MATCH))
-              else yyAction31(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ38 (strm, lastMatch : yymatch) = yyAction26(strm, yyNO_MATCH)
-fun yyQ96 (strm, lastMatch : yymatch) = yyAction45(strm, yyNO_MATCH)
-fun yyQ95 (strm, lastMatch : yymatch) = yyAction32(strm, yyNO_MATCH)
-fun yyQ37 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction30(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #","
-              then yyAction30(strm, yyNO_MATCH)
-            else if inp < #","
-              then if inp = #"+"
-                  then yyQ95(strm', yyMATCH(strm, yyAction30, yyNO_MATCH))
-                  else yyAction30(strm, yyNO_MATCH)
-            else if inp = #"="
-              then yyQ96(strm', yyMATCH(strm, yyAction30, yyNO_MATCH))
-              else yyAction30(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ97 (strm, lastMatch : yymatch) = yyAction49(strm, yyNO_MATCH)
-fun yyQ36 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction27(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"="
-              then yyQ97(strm', yyMATCH(strm, yyAction27, yyNO_MATCH))
-              else yyAction27(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ35 (strm, lastMatch : yymatch) = yyAction19(strm, yyNO_MATCH)
-fun yyQ34 (strm, lastMatch : yymatch) = yyAction18(strm, yyNO_MATCH)
-fun yyQ105 (strm, lastMatch : yymatch) = yyAction67(strm, yyNO_MATCH)
-fun yyQ104 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yystuck(lastMatch)
-        | SOME(inp, strm') =>
-            if inp = #":"
-              then yystuck(lastMatch)
-            else if inp < #":"
-              then if inp = #"("
-                  then yystuck(lastMatch)
-                else if inp < #"("
-                  then if inp = #"'"
-                      then yyQ105(strm', lastMatch)
-                      else yystuck(lastMatch)
-                else if inp <= #"/"
-                  then yystuck(lastMatch)
-                  else yyQ104(strm', lastMatch)
-            else if inp = #"G"
-              then yystuck(lastMatch)
-            else if inp < #"G"
-              then if inp <= #"@"
-                  then yystuck(lastMatch)
-                  else yyQ104(strm', lastMatch)
-            else if inp = #"a"
-              then yyQ104(strm', lastMatch)
-            else if inp < #"a"
-              then yystuck(lastMatch)
-            else if inp <= #"f"
-              then yyQ104(strm', lastMatch)
-              else yystuck(lastMatch)
-      (* end case *))
-fun yyQ103 (strm, lastMatch : yymatch) = yyAction69(strm, yyNO_MATCH)
-fun yyQ102 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yystuck(lastMatch)
-        | SOME(inp, strm') =>
-            if inp = #":"
-              then yystuck(lastMatch)
-            else if inp < #":"
-              then if inp = #"("
-                  then yystuck(lastMatch)
-                else if inp < #"("
-                  then if inp = #"'"
-                      then yyQ103(strm', lastMatch)
-                      else yystuck(lastMatch)
-                else if inp <= #"/"
-                  then yystuck(lastMatch)
-                  else yyQ104(strm', lastMatch)
-            else if inp = #"G"
-              then yystuck(lastMatch)
-            else if inp < #"G"
-              then if inp <= #"@"
-                  then yystuck(lastMatch)
-                  else yyQ104(strm', lastMatch)
-            else if inp = #"a"
-              then yyQ104(strm', lastMatch)
-            else if inp < #"a"
-              then yystuck(lastMatch)
-            else if inp <= #"f"
-              then yyQ104(strm', lastMatch)
-              else yystuck(lastMatch)
-      (* end case *))
-fun yyQ108 (strm, lastMatch : yymatch) = yyAction66(strm, yyNO_MATCH)
-fun yyQ109 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yystuck(lastMatch)
-        | SOME(inp, strm') =>
-            if inp = #"'"
-              then yyQ108(strm', lastMatch)
-              else yystuck(lastMatch)
-      (* end case *))
-fun yyQ107 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yystuck(lastMatch)
-        | SOME(inp, strm') =>
-            if inp = #"("
-              then yystuck(lastMatch)
-            else if inp < #"("
-              then if inp = #"'"
-                  then yyQ108(strm', lastMatch)
-                  else yystuck(lastMatch)
-            else if inp = #"0"
-              then yyQ109(strm', lastMatch)
-            else if inp < #"0"
-              then yystuck(lastMatch)
-            else if inp <= #"7"
-              then yyQ109(strm', lastMatch)
-              else yystuck(lastMatch)
-      (* end case *))
-fun yyQ106 (strm, lastMatch : yymatch) = yyAction66(strm, yyNO_MATCH)
-fun yyQ101 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yystuck(lastMatch)
-        | SOME(inp, strm') =>
-            if inp = #"("
-              then yystuck(lastMatch)
-            else if inp < #"("
-              then if inp = #"'"
-                  then yyQ106(strm', lastMatch)
-                  else yystuck(lastMatch)
-            else if inp = #"0"
-              then yyQ107(strm', lastMatch)
-            else if inp < #"0"
-              then yystuck(lastMatch)
-            else if inp <= #"7"
-              then yyQ107(strm', lastMatch)
-              else yystuck(lastMatch)
-      (* end case *))
-fun yyQ100 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yystuck(lastMatch)
-        | SOME(inp, strm') =>
-            if inp = #"'"
-              then yyQ103(strm', lastMatch)
-              else yystuck(lastMatch)
-      (* end case *))
-fun yyQ99 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yystuck(lastMatch)
-        | SOME(inp, strm') =>
-            if inp = #"0"
-              then yyQ101(strm', lastMatch)
-            else if inp < #"0"
-              then if inp = #"\n"
-                  then yystuck(lastMatch)
-                  else yyQ100(strm', lastMatch)
-            else if inp = #"x"
-              then yyQ102(strm', lastMatch)
-            else if inp < #"x"
-              then if inp <= #"7"
-                  then yyQ101(strm', lastMatch)
-                  else yyQ100(strm', lastMatch)
-              else yyQ100(strm', lastMatch)
-      (* end case *))
-fun yyQ110 (strm, lastMatch : yymatch) = yyAction68(strm, yyNO_MATCH)
-fun yyQ98 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yystuck(lastMatch)
-        | SOME(inp, strm') =>
-            if inp = #"'"
-              then yyQ110(strm', lastMatch)
-              else yystuck(lastMatch)
-      (* end case *))
-fun yyQ33 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction71(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"\v"
-              then yyQ98(strm', yyMATCH(strm, yyAction71, yyNO_MATCH))
-            else if inp < #"\v"
-              then if inp = #"\n"
-                  then yyAction71(strm, yyNO_MATCH)
-                  else yyQ98(strm', yyMATCH(strm, yyAction71, yyNO_MATCH))
-            else if inp = #"\\"
-              then yyQ99(strm', yyMATCH(strm, yyAction71, yyNO_MATCH))
-              else yyQ98(strm', yyMATCH(strm, yyAction71, yyNO_MATCH))
-      (* end case *))
-fun yyQ112 (strm, lastMatch : yymatch) = yyAction52(strm, yyNO_MATCH)
-fun yyQ111 (strm, lastMatch : yymatch) = yyAction59(strm, yyNO_MATCH)
-fun yyQ32 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction39(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"'"
-              then yyAction39(strm, yyNO_MATCH)
-            else if inp < #"'"
-              then if inp = #"&"
-                  then yyQ111(strm', yyMATCH(strm, yyAction39, yyNO_MATCH))
-                  else yyAction39(strm, yyNO_MATCH)
-            else if inp = #"="
-              then yyQ112(strm', yyMATCH(strm, yyAction39, yyNO_MATCH))
-              else yyAction39(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ113 (strm, lastMatch : yymatch) = yyAction48(strm, yyNO_MATCH)
-fun yyQ31 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction40(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"="
-              then yyQ113(strm', yyMATCH(strm, yyAction40, yyNO_MATCH))
-              else yyAction40(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ10 (strm, lastMatch : yymatch) = yyAction0(strm, lastMatch)
-fun yyQ9 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yystuck(lastMatch)
-        | SOME(inp, strm') =>
-            if inp = #"\n"
-              then yyQ10(strm', lastMatch)
-              else yyQ9(strm', lastMatch)
-      (* end case *))
-fun yyQ30 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction71(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"\n"
-              then yyQ10(strm', yyMATCH(strm, yyAction71, yyNO_MATCH))
-              else yyQ9(strm', yyMATCH(strm, yyAction71, yyNO_MATCH))
-      (* end case *))
-fun yyQ29 (strm, lastMatch : yymatch) = yyAction6(strm, yyNO_MATCH)
-fun yyQ114 (strm, lastMatch : yymatch) = yyAction57(strm, yyNO_MATCH)
-fun yyQ28 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction28(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"="
-              then yyQ114(strm', yyMATCH(strm, yyAction28, yyNO_MATCH))
-              else yyAction28(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ5 (strm, lastMatch : yymatch) = yyAction1(strm, yyNO_MATCH)
-fun yyQ11 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction2(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"\r"
-              then yyAction2(strm, yyNO_MATCH)
-            else if inp < #"\r"
-              then if inp = #"\n"
-                  then yyAction2(strm, yyNO_MATCH)
-                else if inp < #"\n"
-                  then if inp = #"\t"
-                      then yyQ11(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                      else yyAction2(strm, yyNO_MATCH)
-                else if inp = #"\f"
-                  then yyQ11(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                  else yyAction2(strm, yyNO_MATCH)
-            else if inp = #"!"
-              then yyAction2(strm, yyNO_MATCH)
-            else if inp < #"!"
-              then if inp = #" "
-                  then yyQ11(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                  else yyAction2(strm, yyNO_MATCH)
-            else if inp = #"#"
-              then yyQ9(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-              else yyAction2(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ27 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction2(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"\r"
-              then yyAction2(strm, yyNO_MATCH)
-            else if inp < #"\r"
-              then if inp = #"\n"
-                  then yyAction2(strm, yyNO_MATCH)
-                else if inp < #"\n"
-                  then if inp = #"\t"
-                      then yyQ11(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                      else yyAction2(strm, yyNO_MATCH)
-                else if inp = #"\f"
-                  then yyQ11(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                  else yyAction2(strm, yyNO_MATCH)
-            else if inp = #"!"
-              then yyAction2(strm, yyNO_MATCH)
-            else if inp < #"!"
-              then if inp = #" "
-                  then yyQ11(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                  else yyAction2(strm, yyNO_MATCH)
-            else if inp = #"#"
-              then yyQ9(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-              else yyAction2(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ26 (strm, lastMatch : yymatch) = yyAction71(strm, yyNO_MATCH)
-fun yyQ2 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE =>
-            if yyInput.eof(!(yystrm))
-              then UserDeclarations.eof(yyarg)
-              else yyAction2(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"0"
-              then yyQ42(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-            else if inp < #"0"
-              then if inp = #"%"
-                  then yyQ31(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                else if inp < #"%"
-                  then if inp = #"\r"
-                      then yyQ26(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                    else if inp < #"\r"
-                      then if inp = #"\n"
-                          then yyQ5(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                        else if inp < #"\n"
-                          then if inp = #"\t"
-                              then yyQ27(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                              else yyQ26(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                        else if inp = #"\v"
-                          then yyQ26(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                          else yyQ27(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                    else if inp = #"\""
-                      then yyQ29(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                    else if inp < #"\""
-                      then if inp = #" "
-                          then yyQ27(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                        else if inp = #"!"
-                          then yyQ28(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                          else yyQ26(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                    else if inp = #"#"
-                      then yyQ30(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                      else yyQ26(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                else if inp = #"+"
-                  then yyQ37(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                else if inp < #"+"
-                  then if inp = #"("
-                      then yyQ34(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                    else if inp < #"("
-                      then if inp = #"&"
-                          then yyQ32(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                          else yyQ33(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                    else if inp = #")"
-                      then yyQ35(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                      else yyQ36(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                else if inp = #"."
-                  then yyQ40(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                else if inp < #"."
-                  then if inp = #","
-                      then yyQ38(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                      else yyQ39(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                  else yyQ41(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-            else if inp = #"\\"
-              then yyQ26(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-            else if inp < #"\\"
-              then if inp = #">"
-                  then yyQ48(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                else if inp < #">"
-                  then if inp = #";"
-                      then yyQ45(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                    else if inp < #";"
-                      then if inp = #":"
-                          then yyQ44(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                          else yyQ43(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                    else if inp = #"<"
-                      then yyQ46(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                      else yyQ47(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                else if inp = #"A"
-                  then yyQ50(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                else if inp < #"A"
-                  then if inp = #"?"
-                      then yyQ49(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                      else yyQ26(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                else if inp = #"["
-                  then yyQ51(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                  else yyQ50(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-            else if inp = #"{"
-              then yyQ54(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-            else if inp < #"{"
-              then if inp = #"_"
-                  then yyQ50(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                else if inp < #"_"
-                  then if inp = #"]"
-                      then yyQ52(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                      else yyQ53(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                else if inp = #"`"
-                  then yyQ26(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                  else yyQ50(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-            else if inp = #"~"
-              then yyQ57(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-            else if inp < #"~"
-              then if inp = #"|"
-                  then yyQ55(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                  else yyQ56(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-              else yyQ26(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-      (* end case *))
-fun yyQ22 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction13(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"A"
-              then yyQ22(strm', yyMATCH(strm, yyAction13, yyNO_MATCH))
-            else if inp < #"A"
-              then if inp = #"0"
-                  then yyQ22(strm', yyMATCH(strm, yyAction13, yyNO_MATCH))
-                else if inp < #"0"
-                  then yyAction13(strm, yyNO_MATCH)
-                else if inp <= #"9"
-                  then yyQ22(strm', yyMATCH(strm, yyAction13, yyNO_MATCH))
-                  else yyAction13(strm, yyNO_MATCH)
-            else if inp = #"a"
-              then yyQ22(strm', yyMATCH(strm, yyAction13, yyNO_MATCH))
-            else if inp < #"a"
-              then if inp <= #"F"
-                  then yyQ22(strm', yyMATCH(strm, yyAction13, yyNO_MATCH))
-                  else yyAction13(strm, yyNO_MATCH)
-            else if inp <= #"f"
-              then yyQ22(strm', yyMATCH(strm, yyAction13, yyNO_MATCH))
-              else yyAction13(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ21 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction15(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"A"
-              then yyQ22(strm', yyMATCH(strm, yyAction15, yyNO_MATCH))
-            else if inp < #"A"
-              then if inp = #"0"
-                  then yyQ22(strm', yyMATCH(strm, yyAction15, yyNO_MATCH))
-                else if inp < #"0"
-                  then yyAction15(strm, yyNO_MATCH)
-                else if inp <= #"9"
-                  then yyQ22(strm', yyMATCH(strm, yyAction15, yyNO_MATCH))
-                  else yyAction15(strm, yyNO_MATCH)
-            else if inp = #"a"
-              then yyQ22(strm', yyMATCH(strm, yyAction15, yyNO_MATCH))
-            else if inp < #"a"
-              then if inp <= #"F"
-                  then yyQ22(strm', yyMATCH(strm, yyAction15, yyNO_MATCH))
-                  else yyAction15(strm, yyNO_MATCH)
-            else if inp <= #"f"
-              then yyQ22(strm', yyMATCH(strm, yyAction15, yyNO_MATCH))
-              else yyAction15(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ23 (strm, lastMatch : yymatch) = yyAction14(strm, yyNO_MATCH)
-fun yyQ20 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction15(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"@"
-              then yyQ23(strm', yyMATCH(strm, yyAction15, yyNO_MATCH))
-            else if inp < #"@"
-              then yyAction15(strm, yyNO_MATCH)
-            else if inp <= #"_"
-              then yyQ23(strm', yyMATCH(strm, yyAction15, yyNO_MATCH))
-              else yyAction15(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ25 (strm, lastMatch : yymatch) = yyAction12(strm, yyNO_MATCH)
-fun yyQ24 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yystuck(lastMatch)
-        | SOME(inp, strm') =>
-            if inp = #"0"
-              then yyQ25(strm', lastMatch)
-            else if inp < #"0"
-              then yystuck(lastMatch)
-            else if inp <= #"7"
-              then yyQ25(strm', lastMatch)
-              else yystuck(lastMatch)
-      (* end case *))
-fun yyQ19 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction15(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"0"
-              then yyQ24(strm', yyMATCH(strm, yyAction15, yyNO_MATCH))
-            else if inp < #"0"
-              then yyAction15(strm, yyNO_MATCH)
-            else if inp <= #"7"
-              then yyQ24(strm', yyMATCH(strm, yyAction15, yyNO_MATCH))
-              else yyAction15(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ18 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction11(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"0"
-              then yyQ24(strm', yyMATCH(strm, yyAction11, yyNO_MATCH))
-            else if inp < #"0"
-              then yyAction11(strm, yyNO_MATCH)
-            else if inp <= #"7"
-              then yyQ24(strm', yyMATCH(strm, yyAction11, yyNO_MATCH))
-              else yyAction11(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ17 (strm, lastMatch : yymatch) = yyAction10(strm, yyNO_MATCH)
-fun yyQ16 (strm, lastMatch : yymatch) = yyAction15(strm, yyNO_MATCH)
-fun yyQ15 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yystuck(lastMatch)
-        | SOME(inp, strm') =>
-            if inp = #"8"
-              then yyQ16(strm', lastMatch)
-            else if inp < #"8"
-              then if inp = #"\v"
-                  then yyQ16(strm', lastMatch)
-                else if inp < #"\v"
-                  then if inp = #"\n"
-                      then yyQ17(strm', lastMatch)
-                      else yyQ16(strm', lastMatch)
-                else if inp = #"0"
-                  then yyQ18(strm', lastMatch)
-                else if inp <= #"/"
-                  then yyQ16(strm', lastMatch)
-                  else yyQ19(strm', lastMatch)
-            else if inp = #"_"
-              then yyQ16(strm', lastMatch)
-            else if inp < #"_"
-              then if inp = #"^"
-                  then yyQ20(strm', lastMatch)
-                  else yyQ16(strm', lastMatch)
-            else if inp = #"x"
-              then yyQ21(strm', lastMatch)
-              else yyQ16(strm', lastMatch)
-      (* end case *))
-fun yyQ14 (strm, lastMatch : yymatch) = yyAction7(strm, yyNO_MATCH)
-fun yyQ13 (strm, lastMatch : yymatch) = yyAction8(strm, yyNO_MATCH)
-fun yyQ12 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction9(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"\""
-              then yyAction9(strm, yyNO_MATCH)
-            else if inp < #"\""
-              then if inp = #"\n"
-                  then yyAction9(strm, yyNO_MATCH)
-                  else yyQ12(strm', yyMATCH(strm, yyAction9, yyNO_MATCH))
-            else if inp = #"\\"
-              then yyAction9(strm, yyNO_MATCH)
-              else yyQ12(strm', yyMATCH(strm, yyAction9, yyNO_MATCH))
-      (* end case *))
-fun yyQ1 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE =>
-            if yyInput.eof(!(yystrm))
-              then UserDeclarations.eof(yyarg)
-              else yyAction9(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"\""
-              then yyQ14(strm', yyMATCH(strm, yyAction9, yyNO_MATCH))
-            else if inp < #"\""
-              then if inp = #"\n"
-                  then yyQ13(strm', yyMATCH(strm, yyAction9, yyNO_MATCH))
-                  else yyQ12(strm', yyMATCH(strm, yyAction9, yyNO_MATCH))
-            else if inp = #"\\"
-              then yyQ15(strm', yyMATCH(strm, yyAction9, yyNO_MATCH))
-              else yyQ12(strm', yyMATCH(strm, yyAction9, yyNO_MATCH))
-      (* end case *))
-fun yyQ8 (strm, lastMatch : yymatch) = yyAction4(strm, yyNO_MATCH)
-fun yyQ7 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction5(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"/"
-              then yyQ8(strm', yyMATCH(strm, yyAction5, yyNO_MATCH))
-              else yyAction5(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ6 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction5(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"\n"
-              then yyQ10(strm', yyMATCH(strm, yyAction5, yyNO_MATCH))
-              else yyQ9(strm', yyMATCH(strm, yyAction5, yyNO_MATCH))
-      (* end case *))
-fun yyQ4 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE => yyAction2(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #"\r"
-              then yyAction2(strm, yyNO_MATCH)
-            else if inp < #"\r"
-              then if inp = #"\n"
-                  then yyAction2(strm, yyNO_MATCH)
-                else if inp < #"\n"
-                  then if inp = #"\t"
-                      then yyQ11(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                      else yyAction2(strm, yyNO_MATCH)
-                else if inp = #"\f"
-                  then yyQ11(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                  else yyAction2(strm, yyNO_MATCH)
-            else if inp = #"!"
-              then yyAction2(strm, yyNO_MATCH)
-            else if inp < #"!"
-              then if inp = #" "
-                  then yyQ11(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                  else yyAction2(strm, yyNO_MATCH)
-            else if inp = #"#"
-              then yyQ9(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-              else yyAction2(strm, yyNO_MATCH)
-      (* end case *))
-fun yyQ3 (strm, lastMatch : yymatch) = yyAction5(strm, yyNO_MATCH)
-fun yyQ0 (strm, lastMatch : yymatch) = (case (yygetc(strm))
-       of NONE =>
-            if yyInput.eof(!(yystrm))
-              then UserDeclarations.eof(yyarg)
-              else yyAction2(strm, yyNO_MATCH)
-        | SOME(inp, strm') =>
-            if inp = #" "
-              then yyQ4(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-            else if inp < #" "
-              then if inp = #"\v"
-                  then yyQ3(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                else if inp < #"\v"
-                  then if inp = #"\t"
-                      then yyQ4(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                    else if inp = #"\n"
-                      then yyQ5(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                      else yyQ3(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                else if inp = #"\f"
-                  then yyQ4(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                  else yyQ3(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-            else if inp = #"$"
-              then yyQ3(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-            else if inp < #"$"
-              then if inp = #"#"
-                  then yyQ6(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-                  else yyQ3(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-            else if inp = #"*"
-              then yyQ7(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-              else yyQ3(strm', yyMATCH(strm, yyAction2, yyNO_MATCH))
-      (* end case *))
-in
-  (case (!(yyss))
-   of C => yyQ0(!(yystrm), yyNO_MATCH)
-    | S => yyQ1(!(yystrm), yyNO_MATCH)
-    | INITIAL => yyQ2(!(yystrm), yyNO_MATCH)
-  (* end case *))
-end
-            end
-	  in 
-            continue() 	  
-	    handle IO.Io{cause, ...} => raise cause
-          end
-        in 
-          lex 
-        end
-    in
-    fun makeLexer yyinputN = mk (yyInput.mkStream yyinputN)
-    fun makeLexer' ins = mk (yyInput.mkStream ins)
-    end
+                                    end end
+| 22 => (YYBEGIN INITIAL;Tokens.STRING(makeString charlist,!stringstart,yypos+1))
+| 222 => let val yytext=yymktext() in Tokens.CCONST(IntInf.fromInt(special_char(substring(yytext,1,size(yytext)-2),yypos,yypos+size(yytext),errWarn)), yypos, yypos+size(yytext)) end
+| 225 => let val yytext=yymktext() in TokTable.checkToken(yytext,yypos) end
+| 227 => (continue())
+| 24 => ((#err errWarn) (!stringstart,yypos,"unclosed string");
+		    SourceMap.newline sourceMap yypos;
+		    YYBEGIN INITIAL; Tokens.STRING(makeString charlist,!stringstart,yypos))
+| 26 => let val yytext=yymktext() in addString(charlist,yytext); continue() end
+| 29 => (SourceMap.newline sourceMap yypos; continue())
+| 32 => (addString(charlist,chr 0);continue())
+| 37 => let val yytext=yymktext() in addString(charlist, chr(mkOctChar(substring(yytext, 1, size(yytext)-1), yypos, yypos+size(yytext), errWarn))); continue() end
+| 42 => let val yytext=yymktext() in addString(charlist, chr(mkHexChar(substring(yytext, 2, size(yytext)-2), yypos, yypos+size(yytext), errWarn))); continue() end
+| 46 => let val yytext=yymktext() in addString(charlist,chr(ordof(yytext,2)-ord("@"))); continue() end
+| 49 => let val yytext=yymktext() in addString(charlist, chr(special_char(yytext, yypos, yypos+size(yytext), errWarn))); continue() end
+| 5 => let val yytext=yymktext() in SourceMap.parseDirective sourceMap 
+                         (yypos,yytext); continue() end
+| 51 => (Tokens.COLON(yypos,yypos+1))
+| 53 => (Tokens.SEMICOLON(yypos,yypos+1))
+| 55 => (Tokens.LPAREN(yypos,yypos+1))
+| 57 => (Tokens.RPAREN(yypos,yypos+1))
+| 59 => (Tokens.LBRACE(yypos,yypos+1))
+| 61 => (Tokens.RBRACE(yypos,yypos+1))
+| 63 => (Tokens.LCURLY(yypos,yypos+1))
+| 65 => (Tokens.RCURLY(yypos,yypos+1))
+| 67 => (Tokens.DOT(yypos,yypos+1))
+| 7 => (SourceMap.newline sourceMap yypos; continue())
+| 71 => (Tokens.ELIPSIS(yypos,yypos+3))
+| 73 => (Tokens.COMMA(yypos,yypos+1))
+| 75 => (Tokens.TIMES(yypos,yypos+1))
+| 77 => (Tokens.BANG(yypos,yypos+1))
+| 79 => (Tokens.HAT(yypos,yypos+1))
+| 81 => (Tokens.PLUS(yypos,yypos+1))
+| 83 => (Tokens.MINUS(yypos,yypos+1))
+| 86 => (Tokens.INC(yypos,yypos+2))
+| 89 => (Tokens.DEC(yypos,yypos+2))
+| 92 => (Tokens.ARROW(yypos,yypos+1))
+| 94 => (Tokens.DIVIDE(yypos,yypos+1))
+| 96 => (Tokens.TILDE(yypos,yypos+1))
+| 98 => (Tokens.QUESTION(yypos,yypos+1))
+| _ => raise Internal.LexerError
+
+		) end )
 
+	val {fin,trans} = Unsafe.Vector.sub(Internal.tab, s)
+	val NewAcceptingLeaves = fin::AcceptingLeaves
+	in if l = !yybl then
+	     if trans = #trans(Vector.sub(Internal.tab,0))
+	       then action(l,NewAcceptingLeaves
+) else	    let val newchars= if !yydone then "" else yyinput 1024
+	    in if (String.size newchars)=0
+		  then (yydone := true;
+		        if (l=i0) then UserDeclarations.eof yyarg
+		                  else action(l,NewAcceptingLeaves))
+		  else (if i0=l then yyb := newchars
+		     else yyb := String.substring(!yyb,i0,l-i0)^newchars;
+		     yygone := !yygone+i0;
+		     yybl := String.size (!yyb);
+		     scan (s,AcceptingLeaves,l-i0,0))
+	    end
+	  else let val NewChar = Char.ord(Unsafe.CharVector.sub(!yyb,l))
+		val NewChar = if NewChar<128 then NewChar else 128
+		val NewState = Char.ord(Unsafe.CharVector.sub(trans,NewChar))
+		in if NewState=0 then action(l,NewAcceptingLeaves)
+		else scan(NewState,NewAcceptingLeaves,l+1,i0)
+	end
+	end
+	val start= if String.substring(!yyb,!yybufpos-1,1)="\n"
+then !yybegin+1 else !yybegin
+	in scan(start,nil,!yybufpos,!yybufpos)
+    end
+in continue end
+  in lex
   end
+end
diff --git a/src/parser/parse-tree-sig.sml b/src/parser/parse-tree-sig.sml
index 4ac8151..a50f78c 100644
--- a/src/parser/parse-tree-sig.sml
+++ b/src/parser/parse-tree-sig.sml
@@ -27,8 +27,10 @@ sig
     | ModAssign | XorAssign | OrAssign | AndAssign
     | LshiftAssign | RshiftAssign 
     | Uplus 
-    | SizeofType of ctype
-    | OperatorExt of operatorExt
+    | SizeofType of
+        (* ctype *) {qualifiers : qualifier list, specifiers : specifier list}
+    | OperatorExt of
+        ParseTreeExt.operatorExt
 
   and expression
     = EmptyExpr
@@ -40,10 +42,17 @@ sig
     | Binop of operator * expression * expression
     | QuestionColon of expression * expression * expression
     | Call of expression * expression list
-    | Cast of ctype * expression
+    | Cast of
+        (* ctype *) {qualifiers : qualifier list, specifiers : specifier list} *
+        expression
     | InitList of expression list
     | MARKexpression of (SourceMap.location * expression)
-    | ExprExt of expressionExt
+    | ExprExt of
+        (specifier, declarator,
+         (* ctype *) {qualifiers : qualifier list, specifiers : specifier list},
+         (* decltype *) {qualifiers : qualifier list, specifiers : specifier list, storage : storage list},
+         operator, expression, statement)
+        ParseTreeExt.expressionExt
 
   and specifier
     = Void
@@ -60,11 +69,15 @@ sig
     | Wholenum
     | Saturate
     | Nonsaturate
-    | Array of expression * ctype
-    | Pointer of ctype
+    | Array of
+        expression *
+        (* ctype *) {qualifiers : qualifier list, specifiers : specifier list}
+    | Pointer of
+        (* ctype *) {qualifiers : qualifier list, specifiers : specifier list}
     | Function of
-        {retType : ctype,  
-	 params : (decltype * declarator) list}
+        {retType : (* ctype *) {qualifiers : qualifier list, specifiers : specifier list},
+         params : ((* decltype *) {qualifiers : qualifier list, specifiers : specifier list, storage : storage list} *
+                   declarator) list}
     | Enum of
         {tagOpt : string option,
 	 enumerators : (string * expression) list,
@@ -72,13 +85,19 @@ sig
     | Struct of
         {isStruct : bool,   (* struct or union; true => struct *)
 	 tagOpt : string option,  (* optional tag *)
-	 members: (ctype * (declarator * expression) list) list} (* member specs *)
+         members: ((* ctype *) {qualifiers : qualifier list, specifiers : specifier list} *
+                   (declarator * expression) list) list} (* member specs *)
     | TypedefName of string
     | StructTag of
 	{isStruct : bool,   (* ??? *)
 	 name : string}
     | EnumTag of string 
-    | SpecExt of specifierExt
+    | SpecExt of
+        (specifier, declarator,
+         (* ctype *) {qualifiers : qualifier list, specifiers : specifier list},
+         (* decltype *) {qualifiers : qualifier list, specifiers : specifier list, storage : storage list},
+         operator, expression, statement)
+        ParseTreeExt.specifierExt
 
   and declarator  (* constructor suffix: "Decr" *)
     = EmptyDecr
@@ -87,9 +106,17 @@ sig
     | ArrayDecr of declarator * expression
     | PointerDecr of declarator
     | QualDecr of qualifier * declarator
-    | FuncDecr of declarator * (decltype * declarator) list
+    | FuncDecr of
+        declarator *
+        ((* decltype *) {qualifiers : qualifier list, specifiers : specifier list, storage : storage list} *
+         declarator) list
     | MARKdeclarator of (SourceMap.location * declarator)
-    | DecrExt of declaratorExt
+    | DecrExt of
+        (specifier, declarator,
+         (* ctype *) {qualifiers : qualifier list, specifiers : specifier list},
+         (* decltype *) {qualifiers : qualifier list, specifiers : specifier list, storage : storage list},
+         operator, expression, statement)
+        ParseTreeExt.declaratorExt
 
   (* supports extensions of C in which expressions contain statements *)
   and statement
@@ -110,25 +137,42 @@ sig
     | IfThenElse of expression * statement * statement
     | Switch of expression * statement
     | MARKstatement of (SourceMap.location * statement)
-    | StatExt of statementExt
+    | StatExt of
+        (specifier, declarator,
+         (* ctype *) {qualifiers : qualifier list, specifiers : specifier list},
+         (* decltype *) {qualifiers : qualifier list, specifiers : specifier list, storage : storage list},
+         operator, expression, statement)
+        ParseTreeExt.statementExt
 
   and declaration
-    = Declaration of decltype * (declarator * expression) list
+    = Declaration of
+        (* decltype *) {qualifiers : qualifier list, specifiers : specifier list, storage : storage list} *
+        (declarator * expression) list
     | MARKdeclaration of (SourceMap.location * declaration)
-    | DeclarationExt of declarationExt
+    | DeclarationExt of
+        (specifier, declarator,
+         (* ctype *) {qualifiers : qualifier list, specifiers : specifier list},
+         (* decltype *) {qualifiers : qualifier list, specifiers : specifier list, storage : storage list},
+         operator, expression, statement)
+        ParseTreeExt.declarationExt
 
   (* the top-level constructs in a translation unit (i.e. source file) *)
   and externalDecl
     = ExternalDecl of declaration
     | FunctionDef of
-       {retType : decltype,      (* return type *)
+       {retType : (* decltype *) {qualifiers : qualifier list, specifiers : specifier list, storage : storage list},      (* return type *)
 	funDecr : declarator,   (* function name declarator *)
         krParams : declaration list, (* K&R-style parameter declarations *)
         body : statement}        (* function body *)
     | MARKexternalDecl of (SourceMap.location * externalDecl)
-    | ExternalDeclExt of externalDeclExt
-
-  withtype ctype =
+    | ExternalDeclExt of
+        (specifier, declarator,
+         (* ctype *) {qualifiers : qualifier list, specifiers : specifier list},
+         (* decltype *) {qualifiers : qualifier list, specifiers : specifier list, storage : storage list},
+         operator, expression, statement)
+        ParseTreeExt.externalDeclExt
+
+  type ctype =
       {qualifiers : qualifier list,
        specifiers : specifier list}
   and decltype =
@@ -137,7 +181,7 @@ sig
        storage : storage list}
 
   (* extension types for basic constructs *)
-  and externalDeclExt = 
+  type externalDeclExt =
       (specifier, declarator, ctype, decltype, operator, expression, statement)
       ParseTreeExt.externalDeclExt
   and declarationExt = 
diff --git a/src/parser/parse-tree.sml b/src/parser/parse-tree.sml
index 160eb5e..b62b955 100644
--- a/src/parser/parse-tree.sml
+++ b/src/parser/parse-tree.sml
@@ -23,8 +23,10 @@ struct
     | ModAssign | XorAssign | OrAssign | AndAssign
     | LshiftAssign | RshiftAssign 
     | Uplus 
-    | SizeofType of ctype
-    | OperatorExt of operatorExt
+    | SizeofType of
+        (* ctype *) {qualifiers : qualifier list, specifiers : specifier list}
+    | OperatorExt of
+        ParseTreeExt.operatorExt
 
   and expression
     = EmptyExpr
@@ -36,10 +38,17 @@ struct
     | Binop of operator * expression * expression
     | QuestionColon of expression * expression * expression
     | Call of expression * expression list
-    | Cast of ctype * expression
+    | Cast of
+        (* ctype *) {qualifiers : qualifier list, specifiers : specifier list} *
+	expression
     | InitList of expression list
     | MARKexpression of (SourceMap.location * expression)
-    | ExprExt of expressionExt
+    | ExprExt of
+        (specifier, declarator,
+	 (* ctype *) {qualifiers : qualifier list, specifiers : specifier list},
+	 (* decltype *) {qualifiers : qualifier list, specifiers : specifier list, storage : storage list},
+	 operator, expression, statement)
+	ParseTreeExt.expressionExt
 
   and specifier
     = Void
@@ -56,11 +65,15 @@ struct
     | Wholenum
     | Saturate
     | Nonsaturate
-    | Array of expression * ctype
-    | Pointer of ctype
+    | Array of
+        expression *
+	(* ctype *) {qualifiers : qualifier list, specifiers : specifier list}
+    | Pointer of
+	(* ctype *) {qualifiers : qualifier list, specifiers : specifier list}
     | Function of
-        {retType : ctype, 
-	 params : (decltype * declarator) list}
+        {retType : (* ctype *) {qualifiers : qualifier list, specifiers : specifier list},
+	 params : ((* decltype *) {qualifiers : qualifier list, specifiers : specifier list, storage : storage list} *
+		   declarator) list}
     | Enum of
         {tagOpt : string option,
 	 enumerators : (string * expression) list,
@@ -68,13 +81,19 @@ struct
     | Struct of
         {isStruct : bool,   (* struct or union; true => struct *)
 	 tagOpt : string option,  (* optional tag *)
-	 members: (ctype * (declarator * expression) list) list} (* member specs *)
+	 members: ((* ctype *) {qualifiers : qualifier list, specifiers : specifier list} *
+		   (declarator * expression) list) list} (* member specs *)
     | TypedefName of string
     | StructTag of
 	{isStruct : bool,   (* ??? *)
 	 name : string}
     | EnumTag of string 
-    | SpecExt of specifierExt
+    | SpecExt of
+        (specifier, declarator,
+	 (* ctype *) {qualifiers : qualifier list, specifiers : specifier list},
+	 (* decltype *) {qualifiers : qualifier list, specifiers : specifier list, storage : storage list},
+	 operator, expression, statement)
+        ParseTreeExt.specifierExt
 
   and declarator  (* constructor suffix: "Decr" *)
     = EmptyDecr
@@ -83,9 +102,17 @@ struct
     | ArrayDecr of declarator * expression
     | PointerDecr of declarator
     | QualDecr of qualifier * declarator
-    | FuncDecr of declarator * (decltype * declarator) list
+    | FuncDecr of
+        declarator *
+	((* decltype *) {qualifiers : qualifier list, specifiers : specifier list, storage : storage list} *
+	 declarator) list
     | MARKdeclarator of (SourceMap.location * declarator)
-    | DecrExt of declaratorExt
+    | DecrExt of
+        (specifier, declarator,
+	 (* ctype *) {qualifiers : qualifier list, specifiers : specifier list},
+	 (* decltype *) {qualifiers : qualifier list, specifiers : specifier list, storage : storage list},
+	 operator, expression, statement)
+	ParseTreeExt.declaratorExt
 
   (* supports extensions of C in which expressions contain statements *)
   and statement
@@ -106,24 +133,41 @@ struct
     | IfThenElse of expression * statement * statement
     | Switch of expression * statement
     | MARKstatement of (SourceMap.location * statement)
-    | StatExt of statementExt
+    | StatExt of
+        (specifier, declarator,
+	 (* ctype *) {qualifiers : qualifier list, specifiers : specifier list},
+	 (* decltype *) {qualifiers : qualifier list, specifiers : specifier list, storage : storage list},
+	 operator, expression, statement)
+	ParseTreeExt.statementExt
 
   and declaration
-    = Declaration of decltype * (declarator * expression) list
+    = Declaration of
+        (* decltype *) {qualifiers : qualifier list, specifiers : specifier list, storage : storage list} *
+        (declarator * expression) list
     | MARKdeclaration of (SourceMap.location * declaration)
-    | DeclarationExt of declarationExt
+    | DeclarationExt of
+        (specifier, declarator,
+	 (* ctype *) {qualifiers : qualifier list, specifiers : specifier list},
+	 (* decltype *) {qualifiers : qualifier list, specifiers : specifier list, storage : storage list},
+	 operator, expression, statement)
+	ParseTreeExt.declarationExt
 
   and externalDecl
     = ExternalDecl of declaration
     | FunctionDef of (* record? *)
-       {retType : decltype,      (* return type *)
+       {retType : (* decltype *) {qualifiers : qualifier list, specifiers : specifier list, storage : storage list},      (* return type *)
 	funDecr : declarator,   (* function name declarator *)
         krParams : declaration list, (* K&R-style parameter declarations *)
         body : statement}        (* function body *)
     | MARKexternalDecl of (SourceMap.location * externalDecl)
-    | ExternalDeclExt of externalDeclExt
+    | ExternalDeclExt of
+        (specifier, declarator,
+	 (* ctype *) {qualifiers : qualifier list, specifiers : specifier list},
+	 (* decltype *) {qualifiers : qualifier list, specifiers : specifier list, storage : storage list},
+	 operator, expression, statement)
+	ParseTreeExt.externalDeclExt
 
-  withtype ctype =
+  type ctype =
            {qualifiers : qualifier list,
 	    specifiers : specifier list}
   and decltype =
@@ -131,7 +175,7 @@ struct
        specifiers : specifier list,
        storage : storage list}      
 
-  and externalDeclExt = 
+  type externalDeclExt =
       (specifier, declarator, ctype, decltype, operator, expression, statement)
       ParseTreeExt.externalDeclExt
   and declarationExt = 
