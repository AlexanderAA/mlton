/* MLton g9a43e11 (built Sun Apr  5 22:29:53 NZST 2015 on xeon) */
/*   created this file on Sun Apr 05 23:03:38 2015. */
/* Do not edit this file. */
/* Flag settings:  */
/*    align: 8 */
/*    atMLtons: (16, @MLton, --) */
/*    chunk: chunk per function */
/*    closureConvertGlobalize: true */
/*    closureConvertShrink: true */
/*    codegen: amd64 */
/*    contifyIntoMain: false */
/*    debug: false */
/*    defaultChar: char8 */
/*    defaultWideChar: widechar32 */
/*    defaultInt: int32 */
/*    defaultReal: real64 */
/*    defaultWord: word32 */
/*    diag passes: [] */
/*    drop passes: [] */
/*    elaborate allowConstant (default): false */
/*    elaborate allowConstant (enabled): true */
/*    elaborate allowFFI (default): false */
/*    elaborate allowFFI (enabled): true */
/*    elaborate allowPrim (default): false */
/*    elaborate allowPrim (enabled): true */
/*    elaborate allowOverload (default): false */
/*    elaborate allowOverload (enabled): true */
/*    elaborate allowRebindEquals (default): false */
/*    elaborate allowRebindEquals (enabled): true */
/*    elaborate deadCode (default): false */
/*    elaborate deadCode (enabled): true */
/*    elaborate forceUsed (default): false */
/*    elaborate forceUsed (enabled): true */
/*    elaborate ffiStr (default):  */
/*    elaborate ffiStr (enabled): true */
/*    elaborate nonexhaustiveExnMatch (default): default */
/*    elaborate nonexhaustiveExnMatch (enabled): true */
/*    elaborate nonexhaustiveMatch (default): warn */
/*    elaborate nonexhaustiveMatch (enabled): true */
/*    elaborate redundantMatch (default): warn */
/*    elaborate redundantMatch (enabled): true */
/*    elaborate resolveScope (default): strdec */
/*    elaborate resolveScope (enabled): true */
/*    elaborate sequenceNonUnit (default): ignore */
/*    elaborate sequenceNonUnit (enabled): true */
/*    elaborate warnUnused (default): false */
/*    elaborate warnUnused (enabled): true */
/*    elaborate only: false */
/*    emit main: true */
/*    export header: None */
/*    exn history: false */
/*    generated output format: executable */
/*    gc check: Limit */
/*    indentation: 3 */
/*    inlineIntoMain: true */
/*    inlineLeafA: {loops = true, repeat = true, size = Some 20} */
/*    inlineLeafB: {loops = true, repeat = true, size = Some 40} */
/*    inlineNonRec: {small = 60, product = 320} */
/*    input file: 16 */
/*    keep CoreML: false */
/*    keep def use: true */
/*    keep dot: false */
/*    keep Machine: false */
/*    keep passes: [] */
/*    keep RSSA: false */
/*    keep SSA: false */
/*    keep SSA2: false */
/*    keep SXML: false */
/*    keep XML: false */
/*    extra_: false */
/*    lib dir: /home/a/Projects/mlton/build/lib */
/*    lib target dir: /home/a/Projects/mlton/build/lib/targets/unknown */
/*    loop passes: 1 */
/*    mark cards: true */
/*    max function size: 10000 */
/*    mlb path vars: [{var = MLTON_ROOT, path = $(LIB_MLTON_DIR)/sml}, {var = SML_LIB, path = $(LIB_MLTON_DIR)/sml}] */
/*    native commented: 0 */
/*    native live stack: false */
/*    native optimize: 1 */
/*    native move hoist: true */
/*    native copy prop: true */
/*    native copy prop cutoff: 1000 */
/*    native cutoff: 100 */
/*    native live transfer: 8 */
/*    native shuffle: true */
/*    native ieee fp: false */
/*    native split: Some 20000 */
/*    optimizationPasses: [<ssa2::default>, <ssa::default>, <sxml::default>, <xml::default>] */
/*    polyvariance: Some {hofo = true, rounds = 2, small = 30, product = 300} */
/*    prefer abs paths: false */
/*    prof passes: [] */
/*    profile: None */
/*    profile branch: false */
/*    profile C: [] */
/*    profile IL: ProfileSource */
/*    profile include/exclude: [(Seq [Star [.], Or [Seq [Seq [[$], [(], [S], [M], [L], [_], [L], [I], [B], [)]]]], Star [.]], false)] */
/*    profile raise: false */
/*    profile stack: false */
/*    profile val: false */
/*    show basis: None */
/*    show def-use: None */
/*    show types: true */
/*    target: unknown */
/*    target arch: AMD64 */
/*    target OS: OpenBSD */
/*    type check: true */
/*    verbosity: Silent */
/*    warn unrecognized annotation: true */
/*    warn deprecated features: true */
/*    zone cut depth: 100 */
.text
.p2align 0x4
.globl MLton_jumpToSML
.hidden MLton_jumpToSML
MLton_jumpToSML:
	subq $0x48,%rsp
	movq %rbp,0x40(%rsp)
	movq %rbx,0x38(%rsp)
	movq %r12,0x30(%rsp)
	movq %r13,0x28(%rsp)
	movq %r14,0x20(%rsp)
	movq %r15,0x18(%rsp)
	movq c_stackP(%rip),%rbx
	movq %rbx,0x10(%rsp)
	movq %rsp,c_stackP(%rip)
	movq (gcState+0x10)(%rip),%rbp
	movq (gcState+0x0)(%rip),%r12
	jmp *%rdi
.p2align 0x4
.globl Thread_returnToC
.hidden Thread_returnToC
Thread_returnToC:
	movq c_stackP(%rip),%rsp
	movq 0x10(%rsp),%rbx
	movq %rbx,c_stackP(%rip)
	movq 0x18(%rsp),%r15
	movq 0x20(%rsp),%r14
	movq 0x28(%rsp),%r13
	movq 0x30(%rsp),%r12
	movq 0x38(%rsp),%rbx
	movq 0x40(%rsp),%rbp
	addq $0x48,%rsp
	ret
.text
.p2align 0x4
.globl F_0
.hidden F_0
F_0:
L_0:
	movq (gcState+0x18)(%rip),%r15
	cmpq %rbp,%r15
	setb %al
	movzbl %al,%eax
	testl %eax,%eax
	movl %eax,(globalWord32+0x0)(%rip)
	jnz L_8
L_1:
	movq (gcState+0x458)(%rip),%r14
	movq %r14,%r13
	subq %r12,%r13
	cmpq $0xEB0,%r13
	setb %bl
	movzbl %bl,%ebx
	testl %ebx,%ebx
	movq %r13,(globalWord64+0x0)(%rip)
	movl %ebx,(globalWord32+0x4)(%rip)
	jnz L_870
L_2:
	movq $0x11,%r15
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,%r13
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	xorq %r15,%r15
	xorq %r14,%r14
	movq %r14,0x8(%r13)
	movq %r15,0x0(%r13)
	movq $0x51,%r11
	movq %r12,%r10
	addq $0x8,%r10
	movq %r10,%r9
	movq %r11,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %r13,%r11
	movq $0x1,%r10
	movq %r10,0x8(%r9)
	movq %r11,0x0(%r9)
	movq $0x11,%r8
	movq %r12,%rsp
	addq $0x8,%rsp
	movq %rsp,%rsi
	movq %r8,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq $0x1,%r8
	xorq %rsp,%rsp
	movq %rsp,0x8(%rsi)
	movq %r8,0x0(%rsi)
	movq $0x51,%rdi
	movq %r12,%rdx
	addq $0x8,%rdx
	movq %rdx,%rcx
	movq %rdi,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %rsi,%rdi
	movq $0x1,%rdx
	movq %rdx,0x8(%rcx)
	movq %rdi,0x0(%rcx)
	movq $0x27,%rbx
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%r15
	movq %rbx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0xD,%ebx
	xorl %eax,%eax
	movq (globalObjptr+0x510)(%rip),%r14
	movq %r14,%r11
	movq %r11,0x8(%r15)
	movl %eax,0x4(%r15)
	movl %ebx,0x0(%r15)
	movq $0x27,%r10
	movq %r12,%r8
	addq $0x8,%r8
	movq %r8,%rsp
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x30,%r10d
	xorl %r8d,%r8d
	movq (globalObjptr+0x518)(%rip),%rdi
	movq %rdi,%rdx
	movq %rdx,0x8(%rsp)
	movl %r8d,0x4(%rsp)
	movl %r10d,0x0(%rsp)
	movq $0x27,%rbx
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,%r11
	movq %rbx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x31,%r14d
	xorl %ebx,%ebx
	movq (globalObjptr+0x520)(%rip),%rax
	movq %rax,%r10
	movq %r10,0x8(%r11)
	movl %r14d,0x0(%r11)
	movl %ebx,0x4(%r11)
	movq $0x27,%rdi
	movq %r12,%r8
	addq $0x8,%r8
	movq %r8,%rdx
	movq %rdi,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x2F,%r8d
	xorl %edi,%edi
	movq (globalObjptr+0x528)(%rip),%r14
	movq %r14,%rax
	movq %rax,0x8(%rdx)
	movl %edi,0x4(%rdx)
	movl %r8d,0x0(%rdx)
	movq $0x27,%r10
	movq %r12,%rbx
	addq $0x8,%rbx
	movq %rbx,%r8
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x23,%r10d
	xorl %ebx,%ebx
	movq (globalObjptr+0x530)(%rip),%r14
	movq %r14,%rdi
	movq %rdi,0x8(%r8)
	movl %r10d,0x0(%r8)
	movl %ebx,0x4(%r8)
	movq $0x27,%rax
	movq %r12,%r10
	addq $0x8,%r10
	movq %r10,%r14
	movq %rax,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x25,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x538)(%rip),%rdi
	movq %rdi,%rbx
	movq %rbx,0x8(%r14)
	movl %r10d,0x0(%r14)
	movl %eax,0x4(%r14)
	movq $0x27,%r10
	movq %r12,%rdi
	addq $0x8,%rdi
	movq %rdi,%rbx
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x9,%r10d
	xorl %edi,%edi
	movq (globalObjptr+0x540)(%rip),%rax
	movq %rbp,(gcState+0x10)(%rip)
	movq %rax,%rbp
	movq %rbp,0x8(%rbx)
	movl %edi,0x4(%rbx)
	movl %r10d,0x0(%rbx)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rbp
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x10,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x548)(%rip),%rdi
	movq %r13,(globalObjptr+0x0)(%rip)
	movq %rdi,%r13
	movq %r13,0x8(%rbp)
	movl %eax,0x4(%rbp)
	movl %r10d,0x0(%rbp)
	movq $0x27,%r10
	movq %r12,%rdi
	addq $0x8,%rdi
	movq %rdi,%r13
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x58,%r10d
	xorl %edi,%edi
	movq (globalObjptr+0x550)(%rip),%rax
	movq %r9,(globalObjptr+0x8)(%rip)
	movq %rax,%r9
	movq %r9,0x8(%r13)
	movl %edi,0x4(%r13)
	movl %r10d,0x0(%r13)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%r9
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0xA,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x558)(%rip),%rdi
	movq %rsi,(globalObjptr+0x10)(%rip)
	movq %rdi,%rsi
	movq %rsi,0x8(%r9)
	movl %eax,0x4(%r9)
	movl %r10d,0x0(%r9)
	movq $0x27,%r10
	movq %r12,%rdi
	addq $0x8,%rdi
	movq %rdi,%rsi
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x35,%r10d
	xorl %edi,%edi
	movq (globalObjptr+0x560)(%rip),%rax
	movq %rcx,(globalObjptr+0x18)(%rip)
	movq %rax,%rcx
	movq %rcx,0x8(%rsi)
	movl %edi,0x4(%rsi)
	movl %r10d,0x0(%rsi)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rdi
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x3D,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x568)(%rip),%rcx
	movq %r15,(globalObjptr+0x20)(%rip)
	movq %rcx,%r15
	movq %r15,0x8(%rdi)
	movl %eax,0x4(%rdi)
	movl %r10d,0x0(%rdi)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%r15
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x36,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x570)(%rip),%rax
	movq %rsp,(globalObjptr+0x28)(%rip)
	movq %rax,%rsp
	movq %rsp,0x8(%r15)
	movl %ecx,0x4(%r15)
	movl %r10d,0x0(%r15)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rsp
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0xB,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x578)(%rip),%rcx
	movq %r11,(globalObjptr+0x30)(%rip)
	movq %rcx,%r11
	movq %r11,0x8(%rsp)
	movl %eax,0x4(%rsp)
	movl %r10d,0x0(%rsp)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%r11
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x27,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x580)(%rip),%rax
	movq %rdx,(globalObjptr+0x38)(%rip)
	movq %rax,%rdx
	movq %rdx,0x8(%r11)
	movl %ecx,0x4(%r11)
	movl %r10d,0x0(%r11)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rdx
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x21,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x588)(%rip),%rcx
	movq %r8,(globalObjptr+0x40)(%rip)
	movq %rcx,%r8
	movq %r8,0x8(%rdx)
	movl %eax,0x4(%rdx)
	movl %r10d,0x0(%rdx)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%r8
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x45,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x590)(%rip),%rax
	movq %r14,(globalObjptr+0x48)(%rip)
	movq %rax,%r14
	movq %r14,0x8(%r8)
	movl %ecx,0x4(%r8)
	movl %r10d,0x0(%r8)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%r14
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x11,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x598)(%rip),%rcx
	movq %rbx,(globalObjptr+0x50)(%rip)
	movq %rcx,%rbx
	movq %rbx,0x8(%r14)
	movl %eax,0x4(%r14)
	movl %r10d,0x0(%r14)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%rbx
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0xE,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x5A0)(%rip),%rax
	movq %rbp,(globalObjptr+0x58)(%rip)
	movq %rax,%rbp
	movq %rbp,0x8(%rbx)
	movl %ecx,0x4(%rbx)
	movl %r10d,0x0(%rbx)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rbp
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x1B,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x5A8)(%rip),%rcx
	movq %r13,(globalObjptr+0x60)(%rip)
	movq %rcx,%r13
	movq %r13,0x8(%rbp)
	movl %eax,0x4(%rbp)
	movl %r10d,0x0(%rbp)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%r13
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x41,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x5B0)(%rip),%rax
	movq %r9,(globalObjptr+0x68)(%rip)
	movq %rax,%r9
	movq %r9,0x8(%r13)
	movl %ecx,0x4(%r13)
	movl %r10d,0x0(%r13)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%r9
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x59,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x5B8)(%rip),%rcx
	movq %rsi,(globalObjptr+0x70)(%rip)
	movq %rcx,%rsi
	movq %rsi,0x8(%r9)
	movl %eax,0x4(%r9)
	movl %r10d,0x0(%r9)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%rsi
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x54,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x5C0)(%rip),%rax
	movq %rdi,(globalObjptr+0x78)(%rip)
	movq %rax,%rdi
	movq %rdi,0x8(%rsi)
	movl %ecx,0x4(%rsi)
	movl %r10d,0x0(%rsi)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rdi
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x24,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x5C8)(%rip),%rcx
	movq %r15,(globalObjptr+0x80)(%rip)
	movq %rcx,%r15
	movq %r15,0x8(%rdi)
	movl %eax,0x4(%rdi)
	movl %r10d,0x0(%rdi)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%r15
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x4,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x5D0)(%rip),%rax
	movq %rsp,(globalObjptr+0x88)(%rip)
	movq %rax,%rsp
	movq %rsp,0x8(%r15)
	movl %ecx,0x4(%r15)
	movl %r10d,0x0(%r15)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rsp
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x16,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x5D8)(%rip),%rcx
	movq %r11,(globalObjptr+0x90)(%rip)
	movq %rcx,%r11
	movq %r11,0x8(%rsp)
	movl %eax,0x4(%rsp)
	movl %r10d,0x0(%rsp)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%r11
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x5,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x5E0)(%rip),%rax
	movq %rdx,(globalObjptr+0x98)(%rip)
	movq %rax,%rdx
	movq %rdx,0x8(%r11)
	movl %ecx,0x4(%r11)
	movl %r10d,0x0(%r11)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rdx
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x38,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x5E8)(%rip),%rcx
	movq %r8,(globalObjptr+0xA0)(%rip)
	movq %rcx,%r8
	movq %r8,0x8(%rdx)
	movl %eax,0x4(%rdx)
	movl %r10d,0x0(%rdx)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%r8
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x15,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x5F0)(%rip),%rax
	movq %r14,(globalObjptr+0xA8)(%rip)
	movq %rax,%r14
	movq %r14,0x8(%r8)
	movl %ecx,0x4(%r8)
	movl %r10d,0x0(%r8)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%r14
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x3E,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x5F8)(%rip),%rcx
	movq %rbx,(globalObjptr+0xB0)(%rip)
	movq %rcx,%rbx
	movq %rbx,0x8(%r14)
	movl %eax,0x4(%r14)
	movl %r10d,0x0(%r14)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%rbx
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x18,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x600)(%rip),%rax
	movq %rbp,(globalObjptr+0xB8)(%rip)
	movq %rax,%rbp
	movq %rbp,0x8(%rbx)
	movl %ecx,0x4(%rbx)
	movl %r10d,0x0(%rbx)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rbp
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x1F,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x608)(%rip),%rcx
	movq %r13,(globalObjptr+0xC0)(%rip)
	movq %rcx,%r13
	movq %r13,0x8(%rbp)
	movl %eax,0x4(%rbp)
	movl %r10d,0x0(%rbp)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%r13
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x28,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x610)(%rip),%rax
	movq %r9,(globalObjptr+0xC8)(%rip)
	movq %rax,%r9
	movq %r9,0x8(%r13)
	movl %ecx,0x4(%r13)
	movl %r10d,0x0(%r13)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%r9
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x3F,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x618)(%rip),%rcx
	movq %rsi,(globalObjptr+0xD0)(%rip)
	movq %rcx,%rsi
	movq %rsi,0x8(%r9)
	movl %eax,0x4(%r9)
	movl %r10d,0x0(%r9)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%rsi
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x32,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x620)(%rip),%rax
	movq %rdi,(globalObjptr+0xD8)(%rip)
	movq %rax,%rdi
	movq %rdi,0x8(%rsi)
	movl %ecx,0x4(%rsi)
	movl %r10d,0x0(%rsi)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rdi
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x34,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x628)(%rip),%rcx
	movq %r15,(globalObjptr+0xE0)(%rip)
	movq %rcx,%r15
	movq %r15,0x8(%rdi)
	movl %eax,0x4(%rdi)
	movl %r10d,0x0(%rdi)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%r15
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x33,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x630)(%rip),%rax
	movq %rsp,(globalObjptr+0xE8)(%rip)
	movq %rax,%rsp
	movq %rsp,0x8(%r15)
	movl %ecx,0x4(%r15)
	movl %r10d,0x0(%r15)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rsp
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x17,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x638)(%rip),%rcx
	movq %r11,(globalObjptr+0xF0)(%rip)
	movq %rcx,%r11
	movq %r11,0x8(%rsp)
	movl %eax,0x4(%rsp)
	movl %r10d,0x0(%rsp)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%r11
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x37,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x640)(%rip),%rax
	movq %rdx,(globalObjptr+0xF8)(%rip)
	movq %rax,%rdx
	movq %rdx,0x8(%r11)
	movl %ecx,0x4(%r11)
	movl %r10d,0x0(%r11)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rdx
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x13,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x648)(%rip),%rcx
	movq %r8,(globalObjptr+0x100)(%rip)
	movq %rcx,%r8
	movq %r8,0x8(%rdx)
	movl %eax,0x4(%rdx)
	movl %r10d,0x0(%rdx)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%r8
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x2,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x650)(%rip),%rax
	movq %r14,(globalObjptr+0x108)(%rip)
	movq %rax,%r14
	movq %r14,0x8(%r8)
	movl %ecx,0x4(%r8)
	movl %r10d,0x0(%r8)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%r14
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x8,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x658)(%rip),%rcx
	movq %rbx,(globalObjptr+0x110)(%rip)
	movq %rcx,%rbx
	movq %rbx,0x8(%r14)
	movl %eax,0x4(%r14)
	movl %r10d,0x0(%r14)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%rbx
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x4D,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x660)(%rip),%rax
	movq %rbp,(globalObjptr+0x118)(%rip)
	movq %rax,%rbp
	movq %rbp,0x8(%rbx)
	movl %ecx,0x4(%rbx)
	movl %r10d,0x0(%rbx)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rbp
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0xC,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x668)(%rip),%rcx
	movq %r13,(globalObjptr+0x120)(%rip)
	movq %rcx,%r13
	movq %r13,0x8(%rbp)
	movl %eax,0x4(%rbp)
	movl %r10d,0x0(%rbp)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%r13
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x5A,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x670)(%rip),%rax
	movq %r9,(globalObjptr+0x128)(%rip)
	movq %rax,%r9
	movq %r9,0x8(%r13)
	movl %ecx,0x4(%r13)
	movl %r10d,0x0(%r13)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%r9
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x2A,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x678)(%rip),%rcx
	movq %rsi,(globalObjptr+0x130)(%rip)
	movq %rcx,%rsi
	movq %rsi,0x8(%r9)
	movl %eax,0x4(%r9)
	movl %r10d,0x0(%r9)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%rsi
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x1C,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x680)(%rip),%rax
	movq %rdi,(globalObjptr+0x138)(%rip)
	movq %rax,%rdi
	movq %rdi,0x8(%rsi)
	movl %ecx,0x4(%rsi)
	movl %r10d,0x0(%rsi)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rdi
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x4E,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x688)(%rip),%rcx
	movq %r15,(globalObjptr+0x140)(%rip)
	movq %rcx,%r15
	movq %r15,0x8(%rdi)
	movl %eax,0x4(%rdi)
	movl %r10d,0x0(%rdi)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%r15
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x39,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x690)(%rip),%rax
	movq %rsp,(globalObjptr+0x148)(%rip)
	movq %rax,%rsp
	movq %rsp,0x8(%r15)
	movl %ecx,0x4(%r15)
	movl %r10d,0x0(%r15)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rsp
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x14,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x698)(%rip),%rcx
	movq %r11,(globalObjptr+0x150)(%rip)
	movq %rcx,%r11
	movq %r11,0x8(%rsp)
	movl %eax,0x4(%rsp)
	movl %r10d,0x0(%rsp)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%r11
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x42,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x6A0)(%rip),%rax
	movq %rdx,(globalObjptr+0x158)(%rip)
	movq %rax,%rdx
	movq %rdx,0x8(%r11)
	movl %ecx,0x4(%r11)
	movl %r10d,0x0(%r11)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rdx
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x26,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x6A8)(%rip),%rcx
	movq %r8,(globalObjptr+0x160)(%rip)
	movq %rcx,%r8
	movq %r8,0x8(%rdx)
	movl %eax,0x4(%rdx)
	movl %r10d,0x0(%rdx)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%r8
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x5B,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x6B0)(%rip),%rax
	movq %r14,(globalObjptr+0x168)(%rip)
	movq %rax,%r14
	movq %r14,0x8(%r8)
	movl %ecx,0x4(%r8)
	movl %r10d,0x0(%r8)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%r14
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x19,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x6B8)(%rip),%rcx
	movq %rbx,(globalObjptr+0x170)(%rip)
	movq %rcx,%rbx
	movq %rbx,0x8(%r14)
	movl %eax,0x4(%r14)
	movl %r10d,0x0(%r14)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%rbx
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x6,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x6C0)(%rip),%rax
	movq %rbp,(globalObjptr+0x178)(%rip)
	movq %rax,%rbp
	movq %rbp,0x8(%rbx)
	movl %ecx,0x4(%rbx)
	movl %r10d,0x0(%rbx)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rbp
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x2D,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x6C8)(%rip),%rcx
	movq %r13,(globalObjptr+0x180)(%rip)
	movq %rcx,%r13
	movq %r13,0x8(%rbp)
	movl %eax,0x4(%rbp)
	movl %r10d,0x0(%rbp)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%r13
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x57,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x6D0)(%rip),%rax
	movq %r9,(globalObjptr+0x188)(%rip)
	movq %rax,%r9
	movq %r9,0x8(%r13)
	movl %ecx,0x4(%r13)
	movl %r10d,0x0(%r13)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%r9
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x1,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x6D8)(%rip),%rcx
	movq %rsi,(globalObjptr+0x190)(%rip)
	movq %rcx,%rsi
	movq %rsi,0x8(%r9)
	movl %eax,0x4(%r9)
	movl %r10d,0x0(%r9)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%rsi
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x20,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x6E0)(%rip),%rax
	movq %rdi,(globalObjptr+0x198)(%rip)
	movq %rax,%rdi
	movq %rdi,0x8(%rsi)
	movl %ecx,0x4(%rsi)
	movl %r10d,0x0(%rsi)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rdi
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x2B,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x6E8)(%rip),%rcx
	movq %r15,(globalObjptr+0x1A0)(%rip)
	movq %rcx,%r15
	movq %r15,0x8(%rdi)
	movl %eax,0x4(%rdi)
	movl %r10d,0x0(%rdi)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%r15
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x29,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x6F0)(%rip),%rax
	movq %rsp,(globalObjptr+0x1A8)(%rip)
	movq %rax,%rsp
	movq %rsp,0x8(%r15)
	movl %ecx,0x4(%r15)
	movl %r10d,0x0(%r15)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rsp
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x22,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x6F8)(%rip),%rcx
	movq %r11,(globalObjptr+0x1B0)(%rip)
	movq %rcx,%r11
	movq %r11,0x8(%rsp)
	movl %eax,0x4(%rsp)
	movl %r10d,0x0(%rsp)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%r11
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x1E,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x700)(%rip),%rax
	movq %rdx,(globalObjptr+0x1B8)(%rip)
	movq %rax,%rdx
	movq %rdx,0x8(%r11)
	movl %ecx,0x4(%r11)
	movl %r10d,0x0(%r11)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rdx
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x1D,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x708)(%rip),%rcx
	movq %r8,(globalObjptr+0x1C0)(%rip)
	movq %rcx,%r8
	movq %r8,0x8(%rdx)
	movl %eax,0x4(%rdx)
	movl %r10d,0x0(%rdx)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%r8
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x3,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x710)(%rip),%rax
	movq %r14,(globalObjptr+0x1C8)(%rip)
	movq %rax,%r14
	movq %r14,0x8(%r8)
	movl %ecx,0x4(%r8)
	movl %r10d,0x0(%r8)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%r14
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x46,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x718)(%rip),%rcx
	movq %rbx,(globalObjptr+0x1D0)(%rip)
	movq %rcx,%rbx
	movq %rbx,0x8(%r14)
	movl %eax,0x4(%r14)
	movl %r10d,0x0(%r14)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%rbx
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x3C,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x720)(%rip),%rax
	movq %rbp,(globalObjptr+0x1D8)(%rip)
	movq %rax,%rbp
	movq %rbp,0x8(%rbx)
	movl %ecx,0x4(%rbx)
	movl %r10d,0x0(%rbx)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rbp
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x7,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x728)(%rip),%rcx
	movq %r13,(globalObjptr+0x1E0)(%rip)
	movq %rcx,%r13
	movq %r13,0x8(%rbp)
	movl %eax,0x4(%rbp)
	movl %r10d,0x0(%rbp)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%r13
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x1A,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x730)(%rip),%rax
	movq %r9,(globalObjptr+0x1E8)(%rip)
	movq %rax,%r9
	movq %r9,0x8(%r13)
	movl %ecx,0x4(%r13)
	movl %r10d,0x0(%r13)
	movq $0x27,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%r9
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x23,%r10d
	xorl %eax,%eax
	movq (globalObjptr+0x738)(%rip),%rcx
	movq %rsi,(globalObjptr+0x1F0)(%rip)
	movq %rcx,%rsi
	movq %rsi,0x8(%r9)
	movl %eax,0x4(%r9)
	movl %r10d,0x0(%r9)
	movq $0x27,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%rsi
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x12,%r10d
	xorl %ecx,%ecx
	movq (globalObjptr+0x740)(%rip),%rax
	movq %rdi,(globalObjptr+0x1F8)(%rip)
	movq %rax,%rdi
	movq %rdi,0x8(%rsi)
	movl %ecx,0x4(%rsi)
	movl %r10d,0x0(%rsi)
	movq $0x45,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rdi
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %rsi,%r10
	movq $0x1,%rax
	movq %rax,0x8(%rdi)
	movq %r10,0x0(%rdi)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r10,%rax
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %r9,%r10
	movq %rdi,%rcx
	movq %rcx,0x8(%rax)
	movq %r10,0x0(%rax)
	movq $0x45,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %r15,(globalObjptr+0x200)(%rip)
	movq %rcx,%r15
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %r13,%r10
	movq %rax,%rcx
	movq %rcx,0x8(%r15)
	movq %r10,0x0(%r15)
	movq $0x45,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rsp,(globalObjptr+0x208)(%rip)
	movq %rcx,%rsp
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %rbp,%r10
	movq %r15,%rcx
	movq %rcx,0x8(%rsp)
	movq %r10,0x0(%rsp)
	movq $0x45,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %r11,(globalObjptr+0x210)(%rip)
	movq %rcx,%r11
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %rbx,%r10
	movq %rsp,%rcx
	movq %rcx,0x8(%r11)
	movq %r10,0x0(%r11)
	movq $0x45,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rdx,(globalObjptr+0x218)(%rip)
	movq %rcx,%rdx
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %r14,%r10
	movq %r11,%rcx
	movq %rcx,0x8(%rdx)
	movq %r10,0x0(%rdx)
	movq $0x45,%r10
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %r8,(globalObjptr+0x220)(%rip)
	movq %rcx,%r8
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x220)(%rip),%r10
	movq %r10,%rcx
	movq %rdx,%r10
	movq %r10,0x8(%r8)
	movq %rcx,0x0(%r8)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r14,(globalObjptr+0x228)(%rip)
	movq %r10,%r14
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x218)(%rip),%r10
	movq %r10,%rcx
	movq %r8,%r10
	movq %r10,0x8(%r14)
	movq %rcx,0x0(%r14)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rbx,(globalObjptr+0x230)(%rip)
	movq %r10,%rbx
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x210)(%rip),%r10
	movq %r10,%rcx
	movq %r14,%r10
	movq %r10,0x8(%rbx)
	movq %rcx,0x0(%rbx)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rbp,(globalObjptr+0x238)(%rip)
	movq %r10,%rbp
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x208)(%rip),%r10
	movq %r10,%rcx
	movq %rbx,%r10
	movq %r10,0x8(%rbp)
	movq %rcx,0x0(%rbp)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r13,(globalObjptr+0x240)(%rip)
	movq %r10,%r13
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x200)(%rip),%r10
	movq %r10,%rcx
	movq %rbp,%r10
	movq %r10,0x8(%r13)
	movq %rcx,0x0(%r13)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r9,(globalObjptr+0x248)(%rip)
	movq %r10,%r9
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x1F8)(%rip),%r10
	movq %r10,%rcx
	movq %r13,%r10
	movq %r10,0x8(%r9)
	movq %rcx,0x0(%r9)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rsi,(globalObjptr+0x250)(%rip)
	movq %r10,%rsi
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x1F0)(%rip),%r10
	movq %r10,%rcx
	movq %r9,%r10
	movq %r10,0x8(%rsi)
	movq %rcx,0x0(%rsi)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rdi,(globalObjptr+0x258)(%rip)
	movq %r10,%rdi
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x1E8)(%rip),%r10
	movq %r10,%rcx
	movq %rsi,%r10
	movq %r10,0x8(%rdi)
	movq %rcx,0x0(%rdi)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rax,(globalObjptr+0x260)(%rip)
	movq %r10,%rax
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x1E0)(%rip),%r10
	movq %r10,%rcx
	movq %rdi,%r10
	movq %r10,0x8(%rax)
	movq %rcx,0x0(%rax)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,(globalObjptr+0x268)(%rip)
	movq %r10,%r15
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x1D8)(%rip),%r10
	movq %r10,%rcx
	movq %rax,%r10
	movq %r10,0x8(%r15)
	movq %rcx,0x0(%r15)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rsp,(globalObjptr+0x270)(%rip)
	movq %r10,%rsp
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x1D0)(%rip),%r10
	movq %r10,%rcx
	movq %r15,%r10
	movq %r10,0x8(%rsp)
	movq %rcx,0x0(%rsp)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r11,(globalObjptr+0x278)(%rip)
	movq %r10,%r11
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x1C8)(%rip),%r10
	movq %r10,%rcx
	movq %rsp,%r10
	movq %r10,0x8(%r11)
	movq %rcx,0x0(%r11)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rdx,(globalObjptr+0x280)(%rip)
	movq %r10,%rdx
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x1C0)(%rip),%r10
	movq %r10,%rcx
	movq %r11,%r10
	movq %r10,0x8(%rdx)
	movq %rcx,0x0(%rdx)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r8,(globalObjptr+0x288)(%rip)
	movq %r10,%r8
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x1B8)(%rip),%r10
	movq %r10,%rcx
	movq %rdx,%r10
	movq %r10,0x8(%r8)
	movq %rcx,0x0(%r8)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r14,(globalObjptr+0x290)(%rip)
	movq %r10,%r14
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x1B0)(%rip),%r10
	movq %r10,%rcx
	movq %r8,%r10
	movq %r10,0x8(%r14)
	movq %rcx,0x0(%r14)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rbx,(globalObjptr+0x298)(%rip)
	movq %r10,%rbx
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x1A8)(%rip),%r10
	movq %r10,%rcx
	movq %r14,%r10
	movq %r10,0x8(%rbx)
	movq %rcx,0x0(%rbx)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rbp,(globalObjptr+0x2A0)(%rip)
	movq %r10,%rbp
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x1A0)(%rip),%r10
	movq %r10,%rcx
	movq %rbx,%r10
	movq %r10,0x8(%rbp)
	movq %rcx,0x0(%rbp)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r13,(globalObjptr+0x2A8)(%rip)
	movq %r10,%r13
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x198)(%rip),%r10
	movq %r10,%rcx
	movq %rbp,%r10
	movq %r10,0x8(%r13)
	movq %rcx,0x0(%r13)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r9,(globalObjptr+0x2B0)(%rip)
	movq %r10,%r9
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x190)(%rip),%r10
	movq %r10,%rcx
	movq %r13,%r10
	movq %r10,0x8(%r9)
	movq %rcx,0x0(%r9)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rsi,(globalObjptr+0x2B8)(%rip)
	movq %r10,%rsi
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x188)(%rip),%r10
	movq %r10,%rcx
	movq %r9,%r10
	movq %r10,0x8(%rsi)
	movq %rcx,0x0(%rsi)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rdi,(globalObjptr+0x2C0)(%rip)
	movq %r10,%rdi
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x180)(%rip),%r10
	movq %r10,%rcx
	movq %rsi,%r10
	movq %r10,0x8(%rdi)
	movq %rcx,0x0(%rdi)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rax,(globalObjptr+0x2C8)(%rip)
	movq %r10,%rax
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x178)(%rip),%r10
	movq %r10,%rcx
	movq %rdi,%r10
	movq %r10,0x8(%rax)
	movq %rcx,0x0(%rax)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,(globalObjptr+0x2D0)(%rip)
	movq %r10,%r15
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x170)(%rip),%r10
	movq %r10,%rcx
	movq %rax,%r10
	movq %r10,0x8(%r15)
	movq %rcx,0x0(%r15)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rsp,(globalObjptr+0x2D8)(%rip)
	movq %r10,%rsp
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x168)(%rip),%r10
	movq %r10,%rcx
	movq %r15,%r10
	movq %r10,0x8(%rsp)
	movq %rcx,0x0(%rsp)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r11,(globalObjptr+0x2E0)(%rip)
	movq %r10,%r11
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x160)(%rip),%r10
	movq %r10,%rcx
	movq %rsp,%r10
	movq %r10,0x8(%r11)
	movq %rcx,0x0(%r11)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rdx,(globalObjptr+0x2E8)(%rip)
	movq %r10,%rdx
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x158)(%rip),%r10
	movq %r10,%rcx
	movq %r11,%r10
	movq %r10,0x8(%rdx)
	movq %rcx,0x0(%rdx)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r8,(globalObjptr+0x2F0)(%rip)
	movq %r10,%r8
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x150)(%rip),%r10
	movq %r10,%rcx
	movq %rdx,%r10
	movq %r10,0x8(%r8)
	movq %rcx,0x0(%r8)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r14,(globalObjptr+0x2F8)(%rip)
	movq %r10,%r14
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x148)(%rip),%r10
	movq %r10,%rcx
	movq %r8,%r10
	movq %r10,0x8(%r14)
	movq %rcx,0x0(%r14)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rbx,(globalObjptr+0x300)(%rip)
	movq %r10,%rbx
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x140)(%rip),%r10
	movq %r10,%rcx
	movq %r14,%r10
	movq %r10,0x8(%rbx)
	movq %rcx,0x0(%rbx)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rbp,(globalObjptr+0x308)(%rip)
	movq %r10,%rbp
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x138)(%rip),%r10
	movq %r10,%rcx
	movq %rbx,%r10
	movq %r10,0x8(%rbp)
	movq %rcx,0x0(%rbp)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r13,(globalObjptr+0x310)(%rip)
	movq %r10,%r13
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x130)(%rip),%r10
	movq %r10,%rcx
	movq %rbp,%r10
	movq %r10,0x8(%r13)
	movq %rcx,0x0(%r13)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r9,(globalObjptr+0x318)(%rip)
	movq %r10,%r9
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x128)(%rip),%r10
	movq %r10,%rcx
	movq %r13,%r10
	movq %r10,0x8(%r9)
	movq %rcx,0x0(%r9)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rsi,(globalObjptr+0x320)(%rip)
	movq %r10,%rsi
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x120)(%rip),%r10
	movq %r10,%rcx
	movq %r9,%r10
	movq %r10,0x8(%rsi)
	movq %rcx,0x0(%rsi)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rdi,(globalObjptr+0x328)(%rip)
	movq %r10,%rdi
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x118)(%rip),%r10
	movq %r10,%rcx
	movq %rsi,%r10
	movq %r10,0x8(%rdi)
	movq %rcx,0x0(%rdi)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rax,(globalObjptr+0x330)(%rip)
	movq %r10,%rax
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x110)(%rip),%r10
	movq %r10,%rcx
	movq %rdi,%r10
	movq %r10,0x8(%rax)
	movq %rcx,0x0(%rax)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,(globalObjptr+0x338)(%rip)
	movq %r10,%r15
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x108)(%rip),%r10
	movq %r10,%rcx
	movq %rax,%r10
	movq %r10,0x8(%r15)
	movq %rcx,0x0(%r15)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rsp,(globalObjptr+0x340)(%rip)
	movq %r10,%rsp
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x100)(%rip),%r10
	movq %r10,%rcx
	movq %r15,%r10
	movq %r10,0x8(%rsp)
	movq %rcx,0x0(%rsp)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r11,(globalObjptr+0x348)(%rip)
	movq %r10,%r11
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0xF8)(%rip),%r10
	movq %r10,%rcx
	movq %rsp,%r10
	movq %r10,0x8(%r11)
	movq %rcx,0x0(%r11)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rdx,(globalObjptr+0x350)(%rip)
	movq %r10,%rdx
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0xF0)(%rip),%r10
	movq %r10,%rcx
	movq %r11,%r10
	movq %r10,0x8(%rdx)
	movq %rcx,0x0(%rdx)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r8,(globalObjptr+0x358)(%rip)
	movq %r10,%r8
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0xE8)(%rip),%r10
	movq %r10,%rcx
	movq %rdx,%r10
	movq %r10,0x8(%r8)
	movq %rcx,0x0(%r8)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r14,(globalObjptr+0x360)(%rip)
	movq %r10,%r14
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0xE0)(%rip),%r10
	movq %r10,%rcx
	movq %r8,%r10
	movq %r10,0x8(%r14)
	movq %rcx,0x0(%r14)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rbx,(globalObjptr+0x368)(%rip)
	movq %r10,%rbx
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0xD8)(%rip),%r10
	movq %r10,%rcx
	movq %r14,%r10
	movq %r10,0x8(%rbx)
	movq %rcx,0x0(%rbx)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rbp,(globalObjptr+0x370)(%rip)
	movq %r10,%rbp
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0xD0)(%rip),%r10
	movq %r10,%rcx
	movq %rbx,%r10
	movq %r10,0x8(%rbp)
	movq %rcx,0x0(%rbp)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r13,(globalObjptr+0x378)(%rip)
	movq %r10,%r13
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0xC8)(%rip),%r10
	movq %r10,%rcx
	movq %rbp,%r10
	movq %r10,0x8(%r13)
	movq %rcx,0x0(%r13)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r9,(globalObjptr+0x380)(%rip)
	movq %r10,%r9
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0xC0)(%rip),%r10
	movq %r10,%rcx
	movq %r13,%r10
	movq %r10,0x8(%r9)
	movq %rcx,0x0(%r9)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rsi,(globalObjptr+0x388)(%rip)
	movq %r10,%rsi
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0xB8)(%rip),%r10
	movq %r10,%rcx
	movq %r9,%r10
	movq %r10,0x8(%rsi)
	movq %rcx,0x0(%rsi)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rdi,(globalObjptr+0x390)(%rip)
	movq %r10,%rdi
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0xB0)(%rip),%r10
	movq %r10,%rcx
	movq %rsi,%r10
	movq %r10,0x8(%rdi)
	movq %rcx,0x0(%rdi)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rax,(globalObjptr+0x398)(%rip)
	movq %r10,%rax
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0xA8)(%rip),%r10
	movq %r10,%rcx
	movq %rdi,%r10
	movq %r10,0x8(%rax)
	movq %rcx,0x0(%rax)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,(globalObjptr+0x3A0)(%rip)
	movq %r10,%r15
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0xA0)(%rip),%r10
	movq %r10,%rcx
	movq %rax,%r10
	movq %r10,0x8(%r15)
	movq %rcx,0x0(%r15)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rsp,(globalObjptr+0x3A8)(%rip)
	movq %r10,%rsp
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x98)(%rip),%r10
	movq %r10,%rcx
	movq %r15,%r10
	movq %r10,0x8(%rsp)
	movq %rcx,0x0(%rsp)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r11,(globalObjptr+0x3B0)(%rip)
	movq %r10,%r11
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x90)(%rip),%r10
	movq %r10,%rcx
	movq %rsp,%r10
	movq %r10,0x8(%r11)
	movq %rcx,0x0(%r11)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rdx,(globalObjptr+0x3B8)(%rip)
	movq %r10,%rdx
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x88)(%rip),%r10
	movq %r10,%rcx
	movq %r11,%r10
	movq %r10,0x8(%rdx)
	movq %rcx,0x0(%rdx)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r8,(globalObjptr+0x3C0)(%rip)
	movq %r10,%r8
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x80)(%rip),%r10
	movq %r10,%rcx
	movq %rdx,%r10
	movq %r10,0x8(%r8)
	movq %rcx,0x0(%r8)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r14,(globalObjptr+0x3C8)(%rip)
	movq %r10,%r14
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x78)(%rip),%r10
	movq %r10,%rcx
	movq %r8,%r10
	movq %r10,0x8(%r14)
	movq %rcx,0x0(%r14)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rbx,(globalObjptr+0x3D0)(%rip)
	movq %r10,%rbx
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x70)(%rip),%r10
	movq %r10,%rcx
	movq %r14,%r10
	movq %r10,0x8(%rbx)
	movq %rcx,0x0(%rbx)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rbp,(globalObjptr+0x3D8)(%rip)
	movq %r10,%rbp
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x68)(%rip),%r10
	movq %r10,%rcx
	movq %rbx,%r10
	movq %r10,0x8(%rbp)
	movq %rcx,0x0(%rbp)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r13,(globalObjptr+0x3E0)(%rip)
	movq %r10,%r13
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x60)(%rip),%r10
	movq %r10,%rcx
	movq %rbp,%r10
	movq %r10,0x8(%r13)
	movq %rcx,0x0(%r13)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r9,(globalObjptr+0x3E8)(%rip)
	movq %r10,%r9
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x58)(%rip),%r10
	movq %r10,%rcx
	movq %r13,%r10
	movq %r10,0x8(%r9)
	movq %rcx,0x0(%r9)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rsi,(globalObjptr+0x3F0)(%rip)
	movq %r10,%rsi
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x50)(%rip),%r10
	movq %r10,%rcx
	movq %r9,%r10
	movq %r10,0x8(%rsi)
	movq %rcx,0x0(%rsi)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rdi,(globalObjptr+0x3F8)(%rip)
	movq %r10,%rdi
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x48)(%rip),%r10
	movq %r10,%rcx
	movq %rsi,%r10
	movq %r10,0x8(%rdi)
	movq %rcx,0x0(%rdi)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rax,(globalObjptr+0x400)(%rip)
	movq %r10,%rax
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x40)(%rip),%r10
	movq %r10,%rcx
	movq %rdi,%r10
	movq %r10,0x8(%rax)
	movq %rcx,0x0(%rax)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,(globalObjptr+0x408)(%rip)
	movq %r10,%r15
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x38)(%rip),%r10
	movq %r10,%rcx
	movq %rax,%r10
	movq %r10,0x8(%r15)
	movq %rcx,0x0(%r15)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rsp,(globalObjptr+0x410)(%rip)
	movq %r10,%rsp
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x30)(%rip),%r10
	movq %r10,%rcx
	movq %r15,%r10
	movq %r10,0x8(%rsp)
	movq %rcx,0x0(%rsp)
	movq $0x45,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %r11,(globalObjptr+0x418)(%rip)
	movq %r10,%r11
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x28)(%rip),%r10
	movq %r10,%rcx
	movq %rsp,%r10
	movq %r10,0x8(%r11)
	movq %rcx,0x0(%r11)
	movq $0x4D,%rcx
	movq %r12,%r10
	addq $0x8,%r10
	movq %rdx,(globalObjptr+0x420)(%rip)
	movq %r10,%rdx
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x748)(%rip),%r10
	movq %r10,%rcx
	movq $0x1,%r10
	movq %r8,(globalObjptr+0x428)(%rip)
	movq (c_stackP+0x0)(%rip),%r8
	xchgq %r8,%rsp
	movq %r14,(globalObjptr+0x430)(%rip)
	movq $0x17,%r14
	xchgq %r14,%rcx
	movq %rbx,(globalObjptr+0x438)(%rip)
	xorq %rbx,%rbx
	xchgq %rbx,%rdx
	movq %rbp,(globalObjptr+0x440)(%rip)
	movq $0x100,%rbp
	xchgq %rbp,%rsi
	movq %r13,(globalObjptr+0x448)(%rip)
	leaq gcState(%rip),%r13
	movq %r9,(globalObjptr+0x450)(%rip)
	movq %r13,%r9
	xchgq %r9,%rdi
	xorq %r13,%r13
	xchgq %r13,%rax
	movq %rbp,(globalObjptr+0x458)(%rip)
	movq (gcState+0x10)(%rip),%rbp
	addq $0x8,%rbp
	movq %r9,(globalObjptr+0x460)(%rip)
	leaq (L_3+0x0)(%rip),%r9
	movq %r9,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %r14,0x0(%rbx)
	movq %r10,0x8(%rbx)
	movq %r11,(globalObjptr+0x480)(%rip)
	movq %r15,(globalObjptr+0x470)(%rip)
	movq %r8,(globalObjptr+0x478)(%rip)
	movq %rbx,(globalObjptr+0x488)(%rip)
	movq %r13,(globalObjptr+0x468)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	movq %rbp,(gcState+0x10)(%rip)
	xchgq %r9,%r13
	xchgq %r8,%r15
	xchgq %r11,%r15
	xchgq %r10,%r12
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r15
	movq %r15,%r12
	movq (gcState+0x10)(%rip),%r15
	movq %r15,%rbp
	jmp L_3
.p2align 0x4
.long 0x0
L_3:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq %rax,%r15
	movq (c_stackP+0x0)(%rip),%r14
	movq %r14,%rsp
	movq $0x17,%r14
	movq %r14,%rcx
	xorq %r14,%r14
	movq %r14,%rdx
	movq $0x100,%r14
	movq %r14,%rsi
	leaq gcState(%rip),%r14
	movq %r14,%r13
	movq %r13,%rdi
	xorq %r14,%r14
	xchgq %r14,%rax
	addq $0x8,%rbp
	leaq (L_4+0x0)(%rip),%r13
	movq %r13,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %r15,(globalObjptr+0x490)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	movq %rbp,(gcState+0x10)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r15
	movq %r15,%r12
	movq (gcState+0x10)(%rip),%r15
	movq %r15,%rbp
	jmp L_4
.p2align 0x4
.long 0x0
L_4:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq %rax,%r15
	movq (c_stackP+0x0)(%rip),%r14
	movq %r14,%rsp
	movq $0x17,%r14
	movq %r14,%rcx
	xorq %r14,%r14
	movq %r14,%rdx
	movq $0x100,%r14
	movq %r14,%rsi
	leaq gcState(%rip),%r14
	movq %r14,%r13
	movq %r13,%rdi
	xorq %r14,%r14
	xchgq %r14,%rax
	addq $0x8,%rbp
	leaq (L_5+0x0)(%rip),%r13
	movq %r13,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %r15,(globalObjptr+0x498)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	movq %rbp,(gcState+0x10)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r15
	movq %r15,%r12
	movq (gcState+0x10)(%rip),%r15
	movq %r15,%rbp
	jmp L_5
.p2align 0x4
.long 0x0
L_5:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq %rax,%r15
	movq $0x2B,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r11
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	xorl %r14d,%r14d
	movl $0x30,%r13d
	movl $0x3930,%r10d
	xorl %r9d,%r9d
	movl %r9d,0xC(%r11)
	movl %r13d,0x4(%r11)
	movl %r14d,0x0(%r11)
	movl %r10d,0x8(%r11)
	movq $0x2B,%r8
	movq %r12,%rsp
	addq $0x8,%rsp
	movq %rsp,%rsi
	movq %r8,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0xA,%r8d
	movl $0x61,%esp
	movl $0x6661,%edi
	xorl %edx,%edx
	movl %edx,0xC(%rsi)
	movl %esp,0x4(%rsi)
	movl %r8d,0x0(%rsi)
	movl %edi,0x8(%rsi)
	movq $0x2B,%rcx
	movq %r12,%rbx
	addq $0x8,%rbx
	movq %rbx,%r14
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0xA,%ecx
	movl $0x41,%ebx
	movl $0x4641,%r13d
	xorl %r10d,%r10d
	movl %r10d,0xC(%r14)
	movl %ecx,0x0(%r14)
	movl %ebx,0x4(%r14)
	movl %r13d,0x8(%r14)
	movq $0x41,%r9
	movq %r12,%r8
	addq $0x8,%r8
	movq %r8,%rsp
	movq %r9,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %r14,%r9
	movq $0x1,%r8
	movq %r8,0x8(%rsp)
	movq %r9,0x0(%rsp)
	movq $0x41,%rdi
	movq %r12,%rdx
	addq $0x8,%rdx
	movq %rdx,%rcx
	movq %rdi,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %rsi,%rdi
	movq %rsp,%rdx
	movq %rdx,0x8(%rcx)
	movq %rdi,0x0(%rcx)
	movq $0x37,%rbx
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r10
	movq %rbx,0x0(%r12)
	movq %r12,%r12
	addq $0x10,%r12
	movq (globalObjptr+0x750)(%rip),%r13
	movq %r13,%rbx
	movq %rbx,0x0(%r10)
	movq $0x39,%r9
	movq %r12,%r8
	addq $0x8,%r8
	movq %r8,%rdi
	movq %r9,0x0(%r12)
	movq %r12,%r12
	addq $0x10,%r12
	movq (globalObjptr+0x758)(%rip),%r9
	movq %r9,%r8
	movq %r8,0x0(%rdi)
	movq $0x39,%rdx
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rbx
	movq %rdx,0x0(%r12)
	movq %r12,%r12
	addq $0x10,%r12
	movq (globalObjptr+0x760)(%rip),%r13
	movq %r13,%rdx
	movq (c_stackP+0x0)(%rip),%r9
	xchgq %r9,%rsp
	movq $0x17,%r8
	xchgq %r8,%rcx
	xorq %r13,%r13
	xchgq %r13,%rdx
	movq %rax,(cReturnTemp+0x0)(%rip)
	movq $0x58,%rax
	xchgq %rax,%rsi
	movq %r15,(globalObjptr+0x4A0)(%rip)
	leaq gcState(%rip),%r15
	movq %rbp,(gcState+0x10)(%rip)
	movq %r15,%rbp
	xchgq %rbp,%rdi
	xorq %r15,%r15
	xchgq %r15,%rax
	movq %r11,(globalObjptr+0x4A8)(%rip)
	movq (gcState+0x10)(%rip),%r11
	addq $0x8,%r11
	movq %r15,(globalObjptr+0x4B0)(%rip)
	leaq (L_6+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%r11)
	movq %rbp,(globalObjptr+0x4D8)(%rip)
	movq %r8,(globalObjptr+0x4C8)(%rip)
	movq %rbx,(globalObjptr+0x4E0)(%rip)
	movq %r10,(globalObjptr+0x4D0)(%rip)
	movq %r14,(globalObjptr+0x4B8)(%rip)
	movq %r9,(globalObjptr+0x4C0)(%rip)
	movq %r13,0x0(%rbx)
	movq %r12,(gcState+0x0)(%rip)
	movq %r11,(gcState+0x10)(%rip)
	xchgq %r10,%r14
	xchgq %r11,%r14
	xchgq %r8,%r13
	xchgq %r9,%r13
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r15
	movq %r15,%r12
	movq (gcState+0x10)(%rip),%r15
	movq %r15,%rbp
	jmp L_6
.p2align 0x4
.long 0x0
L_6:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq %rax,%r15
	movq $0x4D,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r11
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x768)(%rip),%r14
	movq %r14,%r13
	movq $0x1,%r10
	movq %r10,0x8(%r11)
	movq %r13,0x0(%r11)
	movq $0x4D,%r9
	movq %r12,%r8
	addq $0x8,%r8
	movq %r8,%rsp
	movq %r9,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x770)(%rip),%r9
	movq %r9,%r8
	movq %r11,%rsi
	movq %rsi,0x8(%rsp)
	movq %r8,0x0(%rsp)
	movq $0x39,%rdi
	movq %r12,%rdx
	addq $0x8,%rdx
	movq %rdx,%rcx
	movq %rdi,0x0(%r12)
	movq %r12,%r12
	addq $0x10,%r12
	movq (globalObjptr+0x778)(%rip),%rdi
	movq %rdi,%rdx
	movq %rdx,0x0(%rcx)
	movq $0x4D,%rbx
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,%r13
	movq %rbx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x780)(%rip),%r14
	movq %r14,%rbx
	movq $0x1,%r10
	addq $0x8,%rbp
	leaq (L_7+0x0)(%rip),%r9
	movq %r9,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %r10,0x8(%r13)
	movq %r13,(globalObjptr+0x508)(%rip)
	movq %rcx,(globalObjptr+0x500)(%rip)
	movq %rsp,(globalObjptr+0x4F8)(%rip)
	movq %r11,(globalObjptr+0x4F0)(%rip)
	movq %r15,(globalObjptr+0x4E8)(%rip)
	movq %rbx,0x0(%r13)
	jmp main_0
.p2align 0x4
L_870:
L_8:
	movq (c_stackP+0x0)(%rip),%r15
	movq %r15,%rsp
	movl $0x0,%r15d
	movl %r15d,%r14d
	movq %r14,%rdx
	movq $0xEB0,%r15
	movq %r15,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%r14
	movq %r14,%rdi
	xorq %r15,%r15
	movq %r15,%rax
	addq $0x8,%rbp
	leaq (L_9+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r15
	movq %r15,%r12
	movq (gcState+0x10)(%rip),%r15
	movq %r15,%rbp
	jmp L_9
.p2align 0x4
.long 0x0
L_9:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	jmp L_2
.p2align 0x4
.long 0x1
L_7:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq (c_stackP+0x0)(%rip),%r15
	movq %r15,%rsp
	movq (globalObjptr+0x788)(%rip),%r15
	movq %r15,%r14
	movq %r14,%rdi
	xorq %r14,%r14
	movq %r14,%rax
	call MLton_bug
.text
.p2align 0x4
.globl main_0
.hidden main_0
main_0:
L_10:
	movq (gcState+0x20)(%rip),%r15
	movq %r15,0x8(%rbp)
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_586
L_11:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_994
L_12:
	movq $0x19,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x10(%rbp)
	addq $0x10,%r12
	movq $0x0,0x0(%r15)
	movq $0x19,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x18(%rbp)
	addq $0x10,%r12
	movq $0x0,0x0(%r15)
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x20(%rbp)
	addq $0x10,%r12
	movl $0x0,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x28(%rbp)
	addq $0x10,%r12
	movl $0x0,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq (globalObjptr+0x8)(%rip),%r15
	movq %r15,0x30(%rbp)
	movq $0x1,0x38(%rbp)
	movq $0x4000000000000000,%r15
	movq %r15,0x40(%rbp)
.p2align 0x4,,0x7
loop_0:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_993
.p2align 0x4,,0x7
L_13:
	movq 0x40(%rbp),%r15
	testq %r15,%r15
	jz L_880
L_14:
	movq 0x38(%rbp),%r14
	movq %r14,%r13
	incq %r13
	jo L_872
L_32:
	movq $0x11,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	addq $0x18,%r12
	movq %r15,0x0(%r11)
	movq %r14,0x8(%r11)
	movq %r13,0x38(%rbp)
	movq $0x51,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r11,0x0(%r15)
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x30(%rbp)
	movq $0x0,0x40(%rbp)
	jmp loop_0
.p2align 0x4
L_872:
L_15:
	movq $0x1,0x10(%rbp)
L_16:
	movq (c_stackP+0x0)(%rip),%rsp
	movq (globalObjptr+0x790)(%rip),%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_17+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Stdio_print
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_17
.p2align 0x4
.long 0x2
L_17:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq 0x10(%rbp),%r15
	cmpq $0x1,%r15
	je L_879
	cmpq $0x2,%r15
	je L_878
	cmpq $0x3,%r15
	je L_877
	cmpq $0x5,%r15
	je L_876
L_18:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0x1C,%r14
	je L_875
	cmpq $0x1D,%r14
	je L_874
	cmpq $0x1E,%r14
	je L_873
L_19:
	movq 0x0(%r15),%r14
	movq %r14,0x18(%rbp)
	movq (c_stackP+0x0)(%rip),%rsp
	movq (globalObjptr+0x798)(%rip),%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_20+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Stdio_print
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_20
.p2align 0x4
.long 0x3
L_20:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x18(%rbp),%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_21+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Stdio_print
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_21
.p2align 0x4
.long 0x4
L_21:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
print_0:
	movq (c_stackP+0x0)(%rip),%rsp
	movq (globalObjptr+0x780)(%rip),%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_22+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Stdio_print
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_22
.p2align 0x4
.long 0x4
L_22:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	movq (globalObjptr+0x7A0)(%rip),%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_23+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call MLton_bug
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_23
.p2align 0x4
.long 0x4
L_23:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_873:
L_27:
	movq (globalObjptr+0x7B8)(%rip),%r14
	xchgq %r14,%r15
print_1:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_25+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Stdio_print
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_25
.p2align 0x4
.long 0x4
L_25:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	jmp print_0
.p2align 0x4
L_874:
L_26:
	movq (globalObjptr+0x7B0)(%rip),%r14
	xchgq %r14,%r15
	jmp print_1
.p2align 0x4
L_875:
L_24:
	movq (globalObjptr+0x7A8)(%rip),%r14
	xchgq %r14,%r15
	jmp print_1
.p2align 0x4
L_876:
L_31:
	movq (globalObjptr+0x7D8)(%rip),%r14
	xchgq %r14,%r15
	jmp print_1
.p2align 0x4
L_877:
L_30:
	movq (globalObjptr+0x7D0)(%rip),%r14
	xchgq %r14,%r15
	jmp print_1
.p2align 0x4
L_878:
L_29:
	movq (globalObjptr+0x7C8)(%rip),%r14
	xchgq %r14,%r15
	jmp print_1
.p2align 0x4
L_879:
L_28:
	movq (globalObjptr+0x7C0)(%rip),%r14
	xchgq %r14,%r15
	jmp print_1
.p2align 0x4
L_880:
L_33:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_34
L_582:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r14d
	movl %r14d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r14
	movq %r14,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_583+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_583
.p2align 0x4
.long 0x24
L_583:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_34:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x2D,%rcx
	movq 0x38(%rbp),%rdx
	movq $0x10,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_35+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_35
.p2align 0x4
.long 0x5
L_35:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x30(%rbp),%r11
	cmpq $0x1,%r11
	je L_41
L_36:
	movq 0x8(%r11),%r13
	movq 0x0(%r11),%r14
	movq %rax,%r15
.p2align 0x4,,0x7
L_37:
	movq 0x8(%r14),%r11
	movq 0x0(%r14),%r10
	movq %r10,0x0(%r15,%r11,8)
	cmpq $0x1,%r13
	je L_881
L_38:
	movq 0x0(%r13),%r14
	movq 0x8(%r13),%r13
	jmp L_37
.p2align 0x4
L_881:
L_39:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_41
L_579:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_580+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_580
.p2align 0x4
.long 0x23
L_580:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_41:
	movq $0xF,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x30(%rbp)
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq (globalObjptr+0x8)(%rip),%r15
	movq %r15,0x38(%rbp)
	movq $0x1,0x40(%rbp)
	movq $0x7FFFFFFFFFFFFFFF,%r15
	movq %r15,0x48(%rbp)
.p2align 0x4,,0x7
loop_1:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_989
.p2align 0x4,,0x7
L_42:
	movq 0x48(%rbp),%r15
	testq %r15,%r15
	jz L_883
L_43:
	movq 0x40(%rbp),%r14
	movq %r14,%r13
	incq %r13
	jo L_882
L_45:
	movq $0x11,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	addq $0x18,%r12
	movq %r15,0x0(%r11)
	movq %r14,0x8(%r11)
	movq %r13,0x40(%rbp)
	movq $0x51,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r11,0x0(%r15)
	addq $0x18,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x38(%rbp)
	movq $0x0,0x48(%rbp)
	jmp loop_1
.p2align 0x4
L_882:
L_44:
	movq $0x1,0x10(%rbp)
	jmp L_16
.p2align 0x4
L_883:
L_46:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x2D,%rcx
	movq 0x40(%rbp),%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r14
	movq %r14,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_47+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_47
.p2align 0x4
.long 0x6
L_47:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x38(%rbp),%r11
	cmpq $0x1,%r11
	je L_52
L_48:
	movq 0x8(%r11),%r13
	movq 0x0(%r11),%r14
	movq %rax,%r15
.p2align 0x4,,0x7
L_49:
	movq 0x8(%r14),%r11
	movq 0x0(%r14),%r10
	movq %r10,0x0(%r15,%r11,8)
	cmpq $0x1,%r13
	je L_884
L_50:
	movq 0x0(%r13),%r14
	movq 0x8(%r13),%r13
	jmp L_49
.p2align 0x4
L_884:
L_52:
	movq (globalObjptr+0x8)(%rip),%r15
	movq %r15,0x38(%rbp)
	movq $0x1,0x40(%rbp)
	movq $0x7FFFFFFFFFFFFFFF,%r15
	movq %r15,0x48(%rbp)
.p2align 0x4,,0x7
loop_2:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_987
.p2align 0x4,,0x7
L_53:
	movq 0x48(%rbp),%r15
	testq %r15,%r15
	jz L_886
L_54:
	movq 0x40(%rbp),%r14
	movq %r14,%r13
	incq %r13
	jo L_885
L_56:
	movq $0x11,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	addq $0x18,%r12
	movq %r15,0x0(%r11)
	movq %r14,0x8(%r11)
	movq %r13,0x40(%rbp)
	movq $0x51,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r11,0x0(%r15)
	addq $0x18,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x38(%rbp)
	movq $0x0,0x48(%rbp)
	jmp loop_2
.p2align 0x4
L_885:
L_55:
	movq $0x1,0x10(%rbp)
	jmp L_16
.p2align 0x4
L_886:
L_57:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x2D,%rcx
	movq 0x40(%rbp),%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r14
	movq %r14,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_58+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_58
.p2align 0x4
.long 0x6
L_58:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x38(%rbp),%r11
	cmpq $0x1,%r11
	je L_63
L_59:
	movq 0x8(%r11),%r13
	movq 0x0(%r11),%r14
	movq %rax,%r15
.p2align 0x4,,0x7
L_60:
	movq 0x8(%r14),%r11
	movq 0x0(%r14),%r10
	movq %r10,0x0(%r15,%r11,8)
	cmpq $0x1,%r13
	je L_887
L_61:
	movq 0x0(%r13),%r14
	movq 0x8(%r13),%r13
	jmp L_60
.p2align 0x4
L_887:
L_63:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_3:
	cmpq $0x100,%r15
	jnl L_888
L_572:
	incq %r15
	jmp loop_3
.p2align 0x4
L_888:
L_64:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_4:
	cmpq $0x100,%r15
	jnl L_889
L_571:
	incq %r15
	jmp loop_4
.p2align 0x4
L_889:
L_65:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_5:
	cmpq $0x100,%r15
	jnl L_890
L_570:
	incq %r15
	jmp loop_5
.p2align 0x4
L_890:
L_66:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_6:
	cmpq $0x100,%r15
	jnl L_894
L_560:
	movb %r15b,%dl
	movq (globalObjptr+0x4C8)(%rip),%r13
	movq (globalObjptr+0x4A8)(%rip),%r14
.p2align 0x4,,0x7
L_561:
	movb 0x9(%r14),%r11b
	cmpb 0x8(%r14),%dl
	jb L_893
L_562:
	cmpb %dl,%r11b
	jnb L_892
	movq %r15,(localWord64+0x0)(%rip)
L_566:
	cmpq $0x1,%r13
	je L_891
L_567:
	movq 0x0(%r13),%r14
	movq 0x8(%r13),%r13
	movq (localWord64+0x0)(%rip),%r15
	jmp L_561
.p2align 0x4
L_891:
L_564:
	movq (localWord64+0x0)(%rip),%r15
	incq %r15
	jmp loop_6
.p2align 0x4
L_892:
	movq %r15,(localWord64+0x0)(%rip)
	jmp L_564
.p2align 0x4
L_893:
	movq %r15,(localWord64+0x0)(%rip)
	jmp L_566
.p2align 0x4
L_894:
L_67:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_7:
	cmpq $0x100,%r15
	jnl L_895
L_559:
	incq %r15
	jmp loop_7
.p2align 0x4
L_895:
L_68:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	movq $0x21,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_69+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_69
.p2align 0x4
.long 0x5
L_69:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq %rax,0x38(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_8:
	cmpq $0x21,%r15
	jnl L_896
L_558:
	movq 0x38(%rbp),%r14
	movb $0x0,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_8
.p2align 0x4
L_896:
L_70:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_71
L_556:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_557+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_557
.p2align 0x4
.long 0x6
L_557:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_71:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq %r12,(gcState+0x0)(%rip)
	movl $0x0,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq %r15,0x40(%rbp)
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	movq $0x41,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_72+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_72
.p2align 0x4
.long 0x7
L_72:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	xorq %r15,%r15
	movq %rax,%r14
.p2align 0x4,,0x7
loop_9:
	cmpq $0x41,%r15
	jnl L_897
L_555:
	movb $0x0,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_9
.p2align 0x4
L_897:
L_73:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_10:
	cmpq $0x1,%r15
	jnl L_898
L_554:
	incq %r15
	jmp loop_10
.p2align 0x4
L_898:
L_74:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_75
L_552:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_553+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_553
.p2align 0x4
.long 0x7
L_553:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_75:
	movq 0x30(%rbp),%r15
	movq 0x0(%r15),%r14
	movq $0x3F,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x8(%r13)
	addq $0x18,%r12
	movq $0x1,0x0(%r13)
	movq %r15,%r14
	shrq $0x8,%r14
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r14,1)
	movq %r13,0x0(%r15)
	movq $0x2F,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq 0x0(%r15),%r13
	movq $0x3F,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r13,0x8(%r10)
	addq $0x18,%r12
	movq $0x2,0x0(%r10)
	movq %r15,%r13
	shrq $0x8,%r13
	movb $0x1,0x0(%r11,%r13,1)
	movq %r10,%r13
	movq %r10,0x0(%r15)
	movq $0x3F,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r13,0x8(%r10)
	addq $0x18,%r12
	movq %r15,0x0(%r10)
	movq %r15,%r13
	shrq $0x8,%r13
	movb $0x1,0x0(%r11,%r13,1)
	movq %r10,0x0(%r15)
	movq $0x29,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq 0x0(%r14),%r13
	movq $0x43,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r13,0x8(%r10)
	addq $0x18,%r12
	movq %r12,(gcState+0x0)(%rip)
	movq %r15,0x0(%r10)
	movq %r15,0x50(%rbp)
	movq %r14,%r15
	shrq $0x8,%r15
	movb $0x1,0x0(%r11,%r15,1)
	movq %r10,0x0(%r14)
	movq %r14,0x48(%rbp)
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x1,%r15d
	movl %r15d,%edi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_76+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	call Posix_ProcEnv_isatty
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_76
.p2align 0x4
.long 0x8
L_76:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movl %eax,0x58(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_77
L_550:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_551+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_551
.p2align 0x4
.long 0x21
L_551:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_77:
	movl 0x58(%rbp),%r15d
	testl %r15d,%r15d
	jz L_982
L_78:
	movb $0x1,0x58(%rbp)
L_79:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq %r12,(gcState+0x0)(%rip)
	movl $0x0,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq %r15,0x60(%rbp)
	incl (gcState+0x44)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x1,%r15d
	movl %r15d,%edi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_80+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	call Posix_FileSys_Stat_fstat
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_80
.p2align 0x4
.long 0x9
L_80:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	cmpl $0xFFFFFFFF,%eax
	je L_974
L_81:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_82+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_FileSys_Stat_getDev
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82
.p2align 0x4
.long 0x9
L_82:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %r15,%r15
	movl %eax,(cReturnTemp+0x0)(%rip)
	movq %r15,%rax
	addq $0x70,%rbp
	leaq (L_83+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_FileSys_Stat_getINo
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83
.p2align 0x4
.long 0x9
L_83:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %r15,%r15
	xchgq %r15,%rax
	addq $0x70,%rbp
	leaq (L_84+0x0)(%rip),%r14
	movq %r14,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_FileSys_Stat_getMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84
.p2align 0x4
.long 0x9
L_84:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movl %eax,0x5C(%rbp)
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_85+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_FileSys_Stat_getNLink
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_85
.p2align 0x4
.long 0x9
L_85:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	cmpl $0x0,%eax
	jl L_96
L_86:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_87+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_FileSys_Stat_getUId
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_87
.p2align 0x4
.long 0x9
L_87:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %r15,%r15
	movl %eax,(cReturnTemp+0x0)(%rip)
	movq %r15,%rax
	addq $0x70,%rbp
	leaq (L_88+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_FileSys_Stat_getGId
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_88
.p2align 0x4
.long 0x9
L_88:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %r15,%r15
	movl %eax,(cReturnTemp+0x0)(%rip)
	movq %r15,%rax
	addq $0x70,%rbp
	leaq (L_89+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_FileSys_Stat_getSize
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89
.p2align 0x4
.long 0x9
L_89:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %r15,%r15
	xchgq %r15,%rax
	addq $0x70,%rbp
	leaq (L_90+0x0)(%rip),%r14
	movq %r14,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_FileSys_Stat_getATime
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90
.p2align 0x4
.long 0x9
L_90:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq %rax,%r15
	sarq $0x3E,%r15
	jz L_972
L_91:
	cmpq $0xFFFFFFFFFFFFFFFF,%r15
	je L_971
L_92:
	cmpq $0x0,%rax
	jl L_970
L_93:
	movq %rax,0x78(%rbp)
	movq (globalObjptr+0x8)(%rip),%r15
	movq %r15,0x68(%rbp)
	movq $0x1,0x70(%rbp)
.p2align 0x4,,0x7
loop_11:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_969
.p2align 0x4,,0x7
L_94:
	movq 0x78(%rbp),%r15
	testq %r15,%r15
	jz L_901
L_95:
	movq 0x70(%rbp),%r14
	movq %r14,%r13
	incq %r13
	jo L_899
L_99:
	movq $0x11,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	addq $0x18,%r12
	movq %r15,0x0(%r11)
	movq %r14,0x8(%r11)
	movq %r13,0x70(%rbp)
	movq $0x51,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r11,0x0(%r15)
	addq $0x18,%r12
	movq 0x68(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x68(%rbp)
	movq $0x0,0x78(%rbp)
	jmp loop_11
.p2align 0x4
L_899:
L_96:
	movl (gcState+0x44)(%rip),%r15d
	testl %r15d,%r15d
	jz L_900
L_97:
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	movq $0x1,0x10(%rbp)
	jmp L_16
.p2align 0x4
L_900:
L_98:
	movq (globalObjptr+0x4D0)(%rip),%r14
	movq %r14,0x10(%rbp)
	jmp L_16
.p2align 0x4
L_901:
L_100:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x2D,%rcx
	movq 0x70(%rbp),%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r14
	movq %r14,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_101+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_101
.p2align 0x4
.long 0xA
L_101:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq 0x68(%rbp),%r11
	cmpq $0x1,%r11
	je L_968
L_102:
	movq 0x8(%r11),%r13
	movq 0x0(%r11),%r14
	movq %rax,%r15
.p2align 0x4,,0x7
L_103:
	movq 0x8(%r14),%r11
	movq 0x0(%r14),%r10
	movq %r10,0x0(%r15,%r11,8)
	cmpq $0x1,%r13
	je L_902
L_104:
	movq 0x0(%r13),%r14
	movq 0x8(%r13),%r13
	jmp L_103
.p2align 0x4
L_902:
L_106:
	movq $0xD,0xFFFFFFFFFFFFFFF8(%r15)
L_107:
	movq %r15,%r14
	andq $0x77359401,%r14
	andq $0x1,%r14
	jz numLimbs_0
L_108:
	movq %r15,%r14
	sarq $0x1,%r14
	imulq $0x3B9ACA00,%r14
	jo numLimbs_0
L_516:
	movq %r14,%r13
	shlq $0x1,%r13
	orq $0x1,%r13
	xorq %r13,%r14
	cmpq $0x0,%r14
	jnl L_112
numLimbs_0:
	movq %r15,%r14
	andq $0x1,%r14
	jnz L_966
L_514:
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	decq %r14
	jo L_96
L_515:
	movq %r14,%r15
L_110:
	incq %r15
	jo L_96
L_112:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_113+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_FileSys_Stat_getMTime
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_113
.p2align 0x4
.long 0x9
L_113:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq %rax,%r15
	sarq $0x3E,%r15
	jz L_963
L_114:
	cmpq $0xFFFFFFFFFFFFFFFF,%r15
	je L_962
L_115:
	cmpq $0x0,%rax
	jl L_961
L_116:
	movq %rax,0x78(%rbp)
	movq (globalObjptr+0x8)(%rip),%r15
	movq %r15,0x68(%rbp)
	movq $0x1,0x70(%rbp)
.p2align 0x4,,0x7
loop_12:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_960
.p2align 0x4,,0x7
L_117:
	movq 0x78(%rbp),%r15
	testq %r15,%r15
	jz L_904
L_118:
	movq 0x70(%rbp),%r14
	movq %r14,%r13
	incq %r13
	jo L_96
L_119:
	movq $0x11,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	addq $0x18,%r12
	movq %r15,0x0(%r11)
	movq %r14,0x8(%r11)
	movq %r13,0x70(%rbp)
	movq $0x51,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r11,0x0(%r15)
	addq $0x18,%r12
	movq 0x68(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x68(%rbp)
	movq $0x0,0x78(%rbp)
	jmp loop_12
.p2align 0x4
L_904:
L_120:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x2D,%rcx
	movq 0x70(%rbp),%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r14
	movq %r14,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_121+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_121
.p2align 0x4
.long 0xA
L_121:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq 0x68(%rbp),%r11
	cmpq $0x1,%r11
	je L_959
L_122:
	movq 0x8(%r11),%r13
	movq 0x0(%r11),%r14
	movq %rax,%r15
.p2align 0x4,,0x7
L_123:
	movq 0x8(%r14),%r11
	movq 0x0(%r14),%r10
	movq %r10,0x0(%r15,%r11,8)
	cmpq $0x1,%r13
	je L_905
L_124:
	movq 0x0(%r13),%r14
	movq 0x8(%r13),%r13
	jmp L_123
.p2align 0x4
L_905:
L_126:
	movq $0xD,0xFFFFFFFFFFFFFFF8(%r15)
L_127:
	movq %r15,%r14
	andq $0x77359401,%r14
	andq $0x1,%r14
	jz numLimbs_1
L_128:
	movq %r15,%r14
	sarq $0x1,%r14
	imulq $0x3B9ACA00,%r14
	jo numLimbs_1
L_503:
	movq %r14,%r13
	shlq $0x1,%r13
	orq $0x1,%r13
	xorq %r14,%r13
	cmpq $0x0,%r13
	jnl L_132
numLimbs_1:
	movq %r15,%r14
	andq $0x1,%r14
	jnz L_957
L_501:
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	decq %r14
	jo L_96
L_502:
	movq %r14,%r15
L_130:
	incq %r15
	jo L_96
L_132:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_133+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_FileSys_Stat_getCTime
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_133
.p2align 0x4
.long 0x9
L_133:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq %rax,%r15
	sarq $0x3E,%r15
	jz L_954
L_134:
	cmpq $0xFFFFFFFFFFFFFFFF,%r15
	je L_953
L_135:
	cmpq $0x0,%rax
	jl L_952
L_136:
	movq %rax,0x78(%rbp)
	movq (globalObjptr+0x8)(%rip),%r15
	movq %r15,0x68(%rbp)
	movq $0x1,0x70(%rbp)
.p2align 0x4,,0x7
loop_13:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_951
.p2align 0x4,,0x7
L_137:
	movq 0x78(%rbp),%r15
	testq %r15,%r15
	jz L_907
L_138:
	movq 0x70(%rbp),%r14
	movq %r14,%r13
	incq %r13
	jo L_96
L_139:
	movq $0x11,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	addq $0x18,%r12
	movq %r15,0x0(%r11)
	movq %r14,0x8(%r11)
	movq %r13,0x70(%rbp)
	movq $0x51,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r11,0x0(%r15)
	addq $0x18,%r12
	movq 0x68(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x68(%rbp)
	movq $0x0,0x78(%rbp)
	jmp loop_13
.p2align 0x4
L_907:
L_140:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x2D,%rcx
	movq 0x70(%rbp),%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r14
	movq %r14,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_141+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_141
.p2align 0x4
.long 0xA
L_141:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq 0x68(%rbp),%r11
	cmpq $0x1,%r11
	je L_950
L_142:
	movq 0x8(%r11),%r13
	movq 0x0(%r11),%r14
	movq %rax,%r15
.p2align 0x4,,0x7
L_143:
	movq 0x8(%r14),%r11
	movq 0x0(%r14),%r10
	movq %r10,0x0(%r15,%r11,8)
	cmpq $0x1,%r13
	je L_908
L_144:
	movq 0x0(%r13),%r14
	movq 0x8(%r13),%r13
	jmp L_143
.p2align 0x4
L_908:
L_146:
	movq $0xD,0xFFFFFFFFFFFFFFF8(%r15)
L_147:
	movq %r15,%r14
	andq $0x77359401,%r14
	andq $0x1,%r14
	jz numLimbs_2
L_148:
	movq %r15,%r14
	sarq $0x1,%r14
	imulq $0x3B9ACA00,%r14
	jo numLimbs_2
L_490:
	movq %r14,%r13
	shlq $0x1,%r13
	orq $0x1,%r13
	xorq %r14,%r13
	cmpq $0x0,%r13
	jnl L_152
numLimbs_2:
	movq %r15,%r14
	andq $0x1,%r14
	jnz L_948
L_488:
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	decq %r14
	jo L_96
L_489:
	movq %r14,%r15
L_150:
	incq %r15
	jo L_96
L_152:
	movl (gcState+0x44)(%rip),%r15d
	testl %r15d,%r15d
	jz L_945
L_153:
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movl 0x5C(%rbp),%edi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_154+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_FileSys_ST_isReg
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_154
.p2align 0x4
.long 0x9
L_154:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movl %eax,0x5C(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_155
L_485:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_486+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_486
.p2align 0x4
.long 0x9
L_486:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_155:
	movl 0x5C(%rbp),%r15d
	testl %r15d,%r15d
	jz L_943
L_156:
	incl (gcState+0x44)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x1,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	movl $0x1,%r15d
	movl %r15d,%edi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_157+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_IO_lseek
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_157
.p2align 0x4
.long 0xB
L_157:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq %rax,0x18(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_158
L_482:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_483+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_483
.p2align 0x4
.long 0xB
L_483:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_158:
	movq 0x18(%rbp),%r14
	cmpq $0xFFFFFFFFFFFFFFFF,%r14
	je L_934
L_159:
	movl (gcState+0x44)(%rip),%r13d
	testl %r13d,%r13d
	jz L_933
L_160:
	decl %r13d
	movl %r13d,(gcState+0x44)(%rip)
	movq 0x10(%rbp),%r15
	movq %r14,0x0(%r15)
L_161:
	movq $0x1D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x60(%rbp),%r15
	movq %r15,0x0(%r14)
	movq $0x1F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r14,0x8(%r15)
	addq $0x20,%r12
	movq (globalObjptr+0x7E0)(%rip),%r14
	movq %r14,0x10(%r15)
	movq %r15,0x10(%rbp)
	movq $0x23,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movl $0x0,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq %r15,0x18(%rbp)
	movb 0x58(%rbp),%r15b
	testb %r15b,%r15b
	jnz L_930
L_162:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	movq $0x1000,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_163+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_163
.p2align 0x4
.long 0x8
L_163:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movq %rax,0x58(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_14:
	cmpq $0x1000,%r15
	jnl L_909
L_452:
	movq 0x58(%rbp),%r14
	movb $0x0,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_14
.p2align 0x4
L_909:
L_164:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_165
L_450:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_451+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_451
.p2align 0x4
.long 0x1B
L_451:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_165:
	movq $0x49,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x58(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
L_166:
	movq $0x21,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x10,%r12
	movq $0x25,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x10(%r15)
	addq $0x28,%r12
	movq 0x10(%rbp),%r13
	movq %r13,0x0(%r15)
	movq 0x18(%rbp),%r11
	movq %r11,0x8(%r15)
	movq %r13,0x18(%r15)
	movq 0x50(%rbp),%r14
	movq 0x0(%r14),%r13
	movq $0x47,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r13,0x8(%r11)
	addq $0x18,%r12
	movq %r15,0x0(%r11)
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r10
	movb $0x1,0x0(%r10,%r13,1)
	movq %r11,0x0(%r14)
	movq $0x31,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x58(%rbp)
	movq %r15,0x0(%r13)
	addq $0x10,%r12
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movl $0x0,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq $0x33,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,0x60(%rbp)
	movq %r15,0x18(%r11)
	addq $0x28,%r12
	movq 0x38(%rbp),%r15
	movq %r15,0x0(%r11)
	movq 0x40(%rbp),%r15
	movq %r15,0x8(%r11)
	movq 0x48(%rbp),%r15
	movq %r15,0x10(%r11)
	movq 0x0(%r13),%r15
	movq %r15,0x68(%rbp)
	movq 0x18(%r15),%r13
	movq %r13,0x70(%rbp)
	movq 0x10(%r15),%r13
	movq 0x0(%r13),%r14
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0x24,%r15
	je L_921
L_322:
	movq 0x8(%r14),%r15
	movq 0x0(%r14),%r13
	movq %r13,0x10(%rbp)
	movq $0x35,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r15,0x0(%r11)
	addq $0x18,%r12
	movq %r13,0x8(%r11)
	movq 0x20(%rbp),%r10
	movl 0x0(%r10),%r9d
	movl %r9d,0x18(%rbp)
	addl $0xE,%r9d
	movl %r9d,0x1C(%rbp)
	jo L_920
L_323:
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r10
	movq %r10,0x28(%rbp)
	movl %r10d,%r13d
	movslq %r13d,%r14
	cmpq %r10,%r14
	jne L_919
L_325:
	cmpl %r13d,%r9d
	jnl L_918
L_433:
	xorq %r14,%r14
	movq %r11,%r15
.p2align 0x4,,0x7
loop_28:
	cmpq $0xD,%r14
	jg L_911
L_434:
	movq (globalObjptr+0x7F8)(%rip),%r13
	cmpb $0xA,0x0(%r13,%r14,1)
	je L_910
L_435:
	incq %r14
	jmp loop_28
.p2align 0x4
L_910:
L_327:
	movq %r15,0x80(%rbp)
	leaq L_308(%rip),%r15
	movq %r15,0x0(%rbp)
	movq %rbp,%r15
	addq $0x8,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq 0x70(%rbp),%r15
	movq %r15,0x88(%rbp)
	addq $0x80,%rbp
	leaq (L_328+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp flushBuf_0
.p2align 0x4
L_911:
L_437:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_438
L_448:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_449+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_449
.p2align 0x4
.long 0x1A
L_449:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_438:
	movslq 0x18(%rbp),%r13
	movq 0x28(%rbp),%r15
	cmpq %r13,%r15
	jb L_289
L_439:
	subq %r13,%r15
	cmpq $0xE,%r15
	jb L_915
L_440:
	movq %r13,%r14
	addq $0xD,%r14
	movq %r13,%r11
	movq %r13,%r15
	movq %r14,%r13
	movq %r11,%r14
.p2align 0x4,,0x7
loop_29:
	cmpq %r14,%r13
	jl L_912
L_441:
	movq %r14,%r11
	incq %r11
	subq %r15,%r14
	movq %r14,%r10
	addq %r15,%r10
	movq 0x10(%rbp),%r9
	movq (globalObjptr+0x7F8)(%rip),%rsp
	movb 0x0(%rsp,%r14,1),%r8b
	movb %r8b,0x0(%r9,%r10,1)
	movq %r11,%r14
	jmp loop_29
.p2align 0x4
L_912:
L_442:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_443
L_444:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_445+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_445
.p2align 0x4
.long 0x19
L_445:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_443:
	movq 0x20(%rbp),%r15
	movl 0x1C(%rbp),%r14d
	movl %r14d,0x0(%r15)
L_292:
	movq 0x58(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r14,0x10(%rbp)
	movq 0x18(%r14),%r15
	movq 0x10(%r14),%r13
	movq 0x0(%r13),%r11
	movq 0xFFFFFFFFFFFFFFF8(%r11),%r14
	shrq $0x1,%r14
	cmpq $0x24,%r14
	je L_913
L_303:
	movq %r15,0x78(%rbp)
	movq 0x8(%r11),%r15
	movq 0x0(%r11),%r14
	movq $0x35,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x0(%r13)
	movq %r14,0x8(%r13)
	movq %r13,0x70(%rbp)
	addq $0x18,%r12
	leaq L_305(%rip),%r15
	movq %r15,0x0(%rbp)
	movq %rbp,%r15
	addq $0x8,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	addq $0x70,%rbp
	leaq (L_304+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp flushBuf_0
.p2align 0x4
L_913:
L_293:
	movq %r15,0x78(%rbp)
	movq 0x8(%r11),%r15
	movq 0x0(%r11),%r14
	movq $0x35,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x0(%r13)
	movq %r14,0x8(%r13)
	movq %r13,0x70(%rbp)
	addq $0x18,%r12
	leaq L_299(%rip),%r15
	movq %r15,0x0(%rbp)
	movq %rbp,%r15
	addq $0x8,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	addq $0x70,%rbp
	leaq (L_294+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp flushBuf_0
.p2align 0x4
L_915:
L_289:
	movq $0x3,%r15
L_169:
	movq 0x68(%rbp),%r14
	movq 0x0(%r14),%r13
	movq 0x10(%r13),%r11
	movq $0x3D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r11,0x10(%r14)
	addq $0x20,%r12
	movq (globalObjptr+0x7E8)(%rip),%r13
	movq %r13,0x8(%r14)
	movq 0x60(%rbp),%r13
	movq %r13,0x10(%rbp)
	movq 0x30(%rbp),%r15
L_170:
	movq %r14,0x20(%rbp)
	movq %r15,0x28(%rbp)
	leaq L_175(%rip),%r15
	movq %r15,0x0(%rbp)
	movq %rbp,%r15
	addq $0x8,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	addq $0x20,%rbp
	leaq (L_171+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp exnMessage_0
.p2align 0x4
L_918:
	movq %r11,%r15
	jmp L_327
.p2align 0x4
L_919:
L_181:
	movq (globalObjptr+0x4E0)(%rip),%r15
	jmp L_169
.p2align 0x4
L_920:
L_168:
	movq $0x1,%r15
	jmp L_169
.p2align 0x4
L_921:
L_167:
	movq 0x8(%r14),%r15
	movq 0x0(%r14),%r13
	movq $0x35,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x18,%r12
	movq %r13,0x8(%r14)
	movq 0x28(%rbp),%r10
	movl 0x0(%r10),%r9d
	movl %r9d,%r10d
	addl $0xE,%r10d
	movl %r10d,0x10(%rbp)
	jo L_168
L_179:
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r15
	movl %r15d,%r8d
	movslq %r8d,%r11
	cmpq %r11,%r15
	jne L_181
L_182:
	cmpl %r8d,%r10d
	jnl L_926
L_312:
	movslq %r9d,%r11
	cmpq %r11,%r15
	jb L_289
L_313:
	subq %r11,%r15
	cmpq $0xE,%r15
	jb L_289
L_314:
	movq %r11,%r10
	addq $0xD,%r10
	movq %r11,%r9
	movq %r13,%r15
	xchgq %r11,%r14
	movq %r9,%r13
	xchgq %r10,%r11
.p2align 0x4,,0x7
loop_21:
	cmpq %r13,%r11
	jl L_922
L_315:
	movq %r13,%r10
	incq %r10
	subq %r14,%r13
	movq %r13,%r9
	addq %r14,%r9
	movq (globalObjptr+0x7F8)(%rip),%rsp
	movb 0x0(%rsp,%r13,1),%r8b
	movb %r8b,0x0(%r15,%r9,1)
	movq %r10,%r13
	jmp loop_21
.p2align 0x4
L_922:
L_316:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_317
L_318:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_319+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_319
.p2align 0x4
.long 0x18
L_319:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_317:
	movq 0x28(%rbp),%r15
	movl 0x10(%rbp),%r14d
	movl %r14d,0x0(%r15)
	jmp L_292
.p2align 0x4
L_926:
L_183:
	movq %r14,0x80(%rbp)
	leaq L_308(%rip),%r15
	movq %r15,0x0(%rbp)
	movq %rbp,%r15
	addq $0x8,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq 0x70(%rbp),%r15
	movq %r15,0x88(%rbp)
	addq $0x80,%rbp
	leaq (L_184+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp flushBuf_0
.p2align 0x4
L_930:
L_453:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	movq $0x1000,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_454+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_454
.p2align 0x4
.long 0x8
L_454:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movq %rax,0x58(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_30:
	cmpq $0x1000,%r15
	jnl L_931
L_459:
	movq 0x58(%rbp),%r14
	movb $0x0,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_30
.p2align 0x4
L_931:
L_455:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_456
L_457:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_458+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_458
.p2align 0x4
.long 0x1B
L_458:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_456:
	movq $0x4B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x58(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x8(%r15)
	jmp L_166
.p2align 0x4
L_933:
L_460:
	movq (globalObjptr+0x4D0)(%rip),%r15
	movq %r15,0x10(%rbp)
	jmp L_16
.p2align 0x4
L_934:
L_461:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_462+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_Error_getErrno
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_462
.p2align 0x4
.long 0x4
L_462:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movl %eax,%r15d
	movl %r15d,0x10(%rbp)
	movl %eax,(cReturnTemp+0x0)(%rip)
	movl (gcState+0x44)(%rip),%r14d
	testl %r14d,%r14d
	jz L_941
L_463:
	decl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movl %r15d,%edi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_464+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_Error_strError
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_464
.p2align 0x4
.long 0x1C
L_464:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq %rax,0x18(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_465
L_479:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_480+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_480
.p2align 0x4
.long 0x1F
L_480:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_465:
	movq 0x18(%rbp),%r15
	movq %r15,0x20(%rbp)
	testq %r15,%r15
	jz L_939
L_466:
	xorl %ecx,%ecx
.p2align 0x4,,0x7
loop_31:
	movslq %ecx,%r15
	movq %r15,0x18(%rbp)
	movq 0x20(%rbp),%r13
	movb 0x0(%r13,%r15,1),%r14b
	testb %r14b,%r14b
	jz L_935
L_467:
	incl %ecx
	jmp loop_31
.p2align 0x4
L_935:
L_468:
	movq 0x18(%rbp),%rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_938
L_469:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_470+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_470
.p2align 0x4
.long 0x1D
L_470:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq %rax,0x28(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_32:
	cmpq 0x18(%rbp),%r15
	jnl L_936
L_476:
	movl %r15d,%r14d
	movslq %r14d,%r13
	movq 0x28(%rbp),%r14
	movq 0x20(%rbp),%r10
	movb 0x0(%r10,%r13,1),%r11b
	movb %r11b,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_32
.p2align 0x4
L_936:
L_471:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_472
L_474:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_475+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_475
.p2align 0x4
.long 0x1E
L_475:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_472:
	movq 0x28(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
L_473:
	movq $0x3B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl 0x10(%rbp),%r15d
	movl %r15d,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq %r14,0x10(%rbp)
	jmp L_16
.p2align 0x4
L_938:
L_477:
	movq $0x2,0x10(%rbp)
	jmp L_16
.p2align 0x4
L_939:
L_478:
	movq (globalObjptr+0x800)(%rip),%r15
	jmp L_473
.p2align 0x4
L_941:
L_481:
	movq (globalObjptr+0x4D0)(%rip),%r13
	movq %r13,0x10(%rbp)
	jmp L_16
.p2align 0x4
L_943:
L_484:
	movq 0x18(%rbp),%r15
	jmp L_161
.p2align 0x4
L_945:
L_487:
	movq (globalObjptr+0x4D0)(%rip),%r14
	movq %r14,0x10(%rbp)
	jmp L_16
.p2align 0x4
L_948:
L_149:
	movq $0x1,%r15
	jmp L_150
.p2align 0x4
L_950:
	movq %rax,%r15
	jmp L_146
.p2align 0x4
L_951:
L_495:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_496+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_496
.p2align 0x4
.long 0x20
L_496:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	jmp L_137
.p2align 0x4
L_952:
L_497:
	negq %rax
	movq %rax,0x78(%rbp)
	movq (globalObjptr+0x18)(%rip),%r15
	movq %r15,0x68(%rbp)
	movq $0x1,0x70(%rbp)
	jmp loop_13
.p2align 0x4
L_953:
	movq %rax,%r15
L_499:
	shlq $0x1,%r15
	orq $0x1,%r15
	jmp L_147
.p2align 0x4
L_954:
	movq %rax,%r15
	jmp L_499
.p2align 0x4
L_957:
L_129:
	movq $0x1,%r15
	jmp L_130
.p2align 0x4
L_959:
	movq %rax,%r15
	jmp L_126
.p2align 0x4
L_960:
L_508:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_509+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_509
.p2align 0x4
.long 0x20
L_509:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	jmp L_117
.p2align 0x4
L_961:
L_510:
	negq %rax
	movq %rax,0x78(%rbp)
	movq (globalObjptr+0x18)(%rip),%r15
	movq %r15,0x68(%rbp)
	movq $0x1,0x70(%rbp)
	jmp loop_12
.p2align 0x4
L_962:
	movq %rax,%r15
L_512:
	shlq $0x1,%r15
	orq $0x1,%r15
	jmp L_127
.p2align 0x4
L_963:
	movq %rax,%r15
	jmp L_512
.p2align 0x4
L_966:
L_109:
	movq $0x1,%r15
	jmp L_110
.p2align 0x4
L_968:
	movq %rax,%r15
	jmp L_106
.p2align 0x4
L_969:
L_521:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_522+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_522
.p2align 0x4
.long 0x20
L_522:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	jmp L_94
.p2align 0x4
L_970:
L_523:
	negq %rax
	movq %rax,0x78(%rbp)
	movq (globalObjptr+0x18)(%rip),%r15
	movq %r15,0x68(%rbp)
	movq $0x1,0x70(%rbp)
	jmp loop_11
.p2align 0x4
L_971:
	movq %rax,%r15
L_525:
	shlq $0x1,%r15
	orq $0x1,%r15
	jmp L_107
.p2align 0x4
L_972:
	movq %rax,%r15
	jmp L_525
.p2align 0x4
L_974:
L_528:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_529+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_Error_getErrno
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_529
.p2align 0x4
.long 0x4
L_529:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movl %eax,%r15d
	movl %r15d,0x10(%rbp)
	movl %eax,(cReturnTemp+0x0)(%rip)
	movl (gcState+0x44)(%rip),%r14d
	testl %r14d,%r14d
	jz L_981
L_530:
	decl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movl %r15d,%edi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_531+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_Error_strError
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_531
.p2align 0x4
.long 0x1C
L_531:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq %rax,0x18(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_532
L_546:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_547+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_547
.p2align 0x4
.long 0x1F
L_547:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_532:
	movq 0x18(%rbp),%r15
	movq %r15,0x20(%rbp)
	testq %r15,%r15
	jz L_979
L_533:
	xorl %ecx,%ecx
.p2align 0x4,,0x7
loop_33:
	movslq %ecx,%r15
	movq %r15,0x18(%rbp)
	movq 0x20(%rbp),%r13
	movb 0x0(%r13,%r15,1),%r14b
	testb %r14b,%r14b
	jz L_975
L_534:
	incl %ecx
	jmp loop_33
.p2align 0x4
L_975:
L_535:
	movq 0x18(%rbp),%rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_978
L_536:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_537+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_537
.p2align 0x4
.long 0x1D
L_537:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq %rax,0x28(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_34:
	cmpq 0x18(%rbp),%r15
	jnl L_976
L_543:
	movl %r15d,%r14d
	movslq %r14d,%r13
	movq 0x28(%rbp),%r14
	movq 0x20(%rbp),%r10
	movb 0x0(%r10,%r13,1),%r11b
	movb %r11b,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_34
.p2align 0x4
L_976:
L_538:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_539
L_541:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_542+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_542
.p2align 0x4
.long 0x1E
L_542:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_539:
	movq 0x28(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
L_540:
	movq $0x3B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl 0x10(%rbp),%r15d
	movl %r15d,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq %r14,0x10(%rbp)
	jmp L_16
.p2align 0x4
L_978:
L_544:
	movq $0x2,0x10(%rbp)
	jmp L_16
.p2align 0x4
L_979:
L_545:
	movq (globalObjptr+0x800)(%rip),%r15
	jmp L_540
.p2align 0x4
L_981:
L_548:
	movq (globalObjptr+0x4D0)(%rip),%r13
	movq %r13,0x10(%rbp)
	jmp L_16
.p2align 0x4
L_982:
L_549:
	movb $0x0,0x58(%rbp)
	jmp L_79
.p2align 0x4
L_987:
L_574:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_575+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_575
.p2align 0x4
.long 0x22
L_575:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	jmp L_53
.p2align 0x4
L_989:
L_577:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_578+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_578
.p2align 0x4
.long 0x22
L_578:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	jmp L_42
.p2align 0x4
L_993:
L_584:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_585+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_585
.p2align 0x4
.long 0x25
L_585:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	jmp L_13
.p2align 0x4
L_994:
L_586:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_587+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_587
.p2align 0x4
.long 0x4
L_587:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	jmp L_12
.p2align 0x4
.long 0xF
L_328:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_329
L_431:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x80,%rbp
	leaq (L_432+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_432
.p2align 0x4
.long 0x16
L_432:
	addq $0xFFFFFFFFFFFFFF80,%rbp
L_329:
	movq 0x70(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r14,0x10(%rbp)
	movl $0x0,0x18(%rbp)
loop_22:
	movl 0x18(%rbp),%r15d
	cmpl $0xE,%r15d
	je L_292
L_330:
	movl $0xE,%r14d
	subl %r15d,%r14d
	jo L_168
L_331:
	movslq %r15d,%r13
	movslq %r14d,%rcx
	movq %rcx,0x20(%rbp)
	cmpq $0xE,%r13
	ja L_289
L_332:
	movq $0xE,%r14
	subq %r13,%r14
	cmpq %rcx,%r14
	jb L_289
L_333:
	movq 0x10(%rbp),%r14
	movq 0x8(%r14),%r13
	movq %r13,0x28(%rbp)
	movq 0x0(%r14),%r13
	movl 0x0(%r13),%r11d
	testl %r11d,%r11d
	jnz L_1031
L_334:
	incl (gcState+0x44)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movl %r15d,%edx
	movq (globalObjptr+0x7F8)(%rip),%rsi
	movl $0x1,%r15d
	movl %r15d,%edi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_335+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_IO_writeChar8Vec
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_335
.p2align 0x4
.long 0x10
L_335:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq %rax,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_336
L_425:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_426+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_426
.p2align 0x4
.long 0x10
L_426:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_336:
	movq 0x38(%rbp),%r15
	cmpq $0xFFFFFFFFFFFFFFFF,%r15
	je L_1001
L_337:
	movl (gcState+0x44)(%rip),%r14d
	testl %r14d,%r14d
	jz L_1000
L_338:
	decl %r14d
	movl %r14d,(gcState+0x44)(%rip)
x_1:
	movl %r15d,%r14d
	movslq %r14d,%r13
	cmpq %r13,%r15
	jne L_168
L_340:
	movq 0x28(%rbp),%r15
	addq 0x0(%r15),%r13
	jo L_168
L_341:
	movq %r13,0x0(%r15)
	testl %r14d,%r14d
	jz L_997
L_342:
	addl 0x18(%rbp),%r14d
	jo L_168
L_343:
	movl %r14d,0x18(%rbp)
	jmp loop_22
.p2align 0x4
L_997:
L_201:
	movq (globalObjptr+0x4D8)(%rip),%r15
	jmp L_169
.p2align 0x4
L_1000:
L_203:
	movq (globalObjptr+0x4D0)(%rip),%r15
	jmp L_169
.p2align 0x4
L_1001:
L_346:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_347+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_Error_getErrno
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_347
.p2align 0x4
.long 0x10
L_347:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movl %eax,0x1C(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_348
L_423:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_424+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_424
.p2align 0x4
.long 0x10
L_424:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_348:
	movl (gcState+0x44)(%rip),%r15d
	testl %r15d,%r15d
	jz L_203
L_349:
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
loop_23:
	movl 0x1C(%rbp),%r15d
	cmpl $0x4,%r15d
	je L_1009
L_350:
	movq (c_stackP+0x0)(%rip),%rsp
	movl %r15d,%edi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_351+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_Error_strError
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_351
.p2align 0x4
.long 0x11
L_351:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq %rax,0x10(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_352
L_369:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_370+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_370
.p2align 0x4
.long 0x11
L_370:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_352:
	movq 0x10(%rbp),%r15
	movq %r15,0x20(%rbp)
	testq %r15,%r15
	jz L_1007
L_353:
	xorl %ecx,%ecx
.p2align 0x4,,0x7
loop_24:
	movslq %ecx,%r15
	movq %r15,0x10(%rbp)
	movq 0x20(%rbp),%r13
	movb 0x0(%r13,%r15,1),%r14b
	testb %r14b,%r14b
	jz L_1002
L_354:
	incl %ecx
	jmp loop_24
.p2align 0x4
L_1002:
L_355:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_356
L_366:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_367+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_367
.p2align 0x4
.long 0x11
L_367:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_356:
	movq 0x10(%rbp),%rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_1005
L_357:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_358+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_358
.p2align 0x4
.long 0x11
L_358:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq %rax,0x28(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_25:
	cmpq 0x10(%rbp),%r15
	jnl L_1003
L_364:
	movl %r15d,%r14d
	movslq %r14d,%r13
	movq 0x28(%rbp),%r14
	movq 0x20(%rbp),%r10
	movb 0x0(%r10,%r13,1),%r11b
	movb %r11b,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_25
.p2align 0x4
L_1003:
L_359:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_360
L_362:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_363+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_363
.p2align 0x4
.long 0x12
L_363:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_360:
	movq 0x28(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
L_361:
	movq $0x3B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl 0x1C(%rbp),%r13d
	movl %r13d,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq %r14,%r15
	jmp L_169
.p2align 0x4
L_1005:
L_224:
	movq $0x2,%r15
	jmp L_169
.p2align 0x4
L_1007:
L_368:
	movq (globalObjptr+0x800)(%rip),%r15
	jmp L_361
.p2align 0x4
L_1009:
L_371:
	movl (gcState+0x44)(%rip),%r14d
	testl %r14d,%r14d
	jz L_1022
L_372:
	incl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x20(%rbp),%rcx
	movl 0x18(%rbp),%edx
	movq (globalObjptr+0x7F8)(%rip),%rsi
	movl $0x1,%r14d
	movl %r14d,%edi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_373+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_IO_writeChar8Vec
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373
.p2align 0x4
.long 0x10
L_373:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq %rax,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_374
L_405:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_406+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_406
.p2align 0x4
.long 0x10
L_406:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_374:
	movq 0x20(%rbp),%r15
	cmpq $0xFFFFFFFFFFFFFFFF,%r15
	je L_1011
L_375:
	movl (gcState+0x44)(%rip),%r14d
	testl %r14d,%r14d
	jz L_203
L_376:
	decl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	jmp x_1
.p2align 0x4
L_1011:
L_378:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_379+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_Error_getErrno
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_379
.p2align 0x4
.long 0x11
L_379:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movl %eax,0x10(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_380
L_403:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_404+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_404
.p2align 0x4
.long 0x11
L_404:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_380:
	movl (gcState+0x44)(%rip),%r15d
	testl %r15d,%r15d
	jz L_203
L_381:
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movl 0x10(%rbp),%edi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_382+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_Error_strError
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_382
.p2align 0x4
.long 0x11
L_382:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq %rax,0x18(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_383
L_400:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_401+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_401
.p2align 0x4
.long 0x11
L_401:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_383:
	movq 0x18(%rbp),%r15
	movq %r15,0x20(%rbp)
	testq %r15,%r15
	jz L_1017
L_384:
	xorl %ecx,%ecx
.p2align 0x4,,0x7
loop_26:
	movslq %ecx,%r15
	movq %r15,0x18(%rbp)
	movq 0x20(%rbp),%r13
	movb 0x0(%r13,%r15,1),%r14b
	testb %r14b,%r14b
	jz L_1012
L_385:
	incl %ecx
	jmp loop_26
.p2align 0x4
L_1012:
L_386:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_387
L_397:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_398+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_398
.p2align 0x4
.long 0x11
L_398:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_387:
	movq 0x18(%rbp),%rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_224
L_388:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_389+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_389
.p2align 0x4
.long 0x11
L_389:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq %rax,0x28(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_27:
	cmpq 0x18(%rbp),%r15
	jnl L_1013
L_395:
	movl %r15d,%r14d
	movslq %r14d,%r13
	movq 0x28(%rbp),%r14
	movq 0x20(%rbp),%r10
	movb 0x0(%r10,%r13,1),%r11b
	movb %r11b,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_27
.p2align 0x4
L_1013:
L_390:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_391
L_393:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_394+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_394
.p2align 0x4
.long 0x12
L_394:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_391:
	movq 0x28(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
L_392:
	movq $0x3B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl 0x10(%rbp),%r13d
	movl %r13d,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq %r14,%r15
	jmp L_169
.p2align 0x4
L_1017:
L_399:
	movq (globalObjptr+0x800)(%rip),%r15
	jmp L_392
.p2align 0x4
L_1022:
L_407:
	incl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x20(%rbp),%rcx
	movl 0x18(%rbp),%edx
	movq (globalObjptr+0x7F8)(%rip),%rsi
	movl $0x1,%r14d
	movl %r14d,%edi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_408+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_IO_writeChar8Vec
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_408
.p2align 0x4
.long 0x10
L_408:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq %rax,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_409
L_420:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_421+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_421
.p2align 0x4
.long 0x10
L_421:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_409:
	movq 0x38(%rbp),%r15
	cmpq $0xFFFFFFFFFFFFFFFF,%r15
	je L_1024
L_410:
	movl (gcState+0x44)(%rip),%r14d
	testl %r14d,%r14d
	jz L_203
L_411:
	decl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	jmp x_1
.p2align 0x4
L_1024:
L_413:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_414+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_Error_getErrno
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_414
.p2align 0x4
.long 0x10
L_414:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movl %eax,0x1C(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_415
L_418:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_419+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_419
.p2align 0x4
.long 0x10
L_419:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_415:
	movl (gcState+0x44)(%rip),%r15d
	testl %r15d,%r15d
	jz L_203
L_416:
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	jmp loop_23
.p2align 0x4
L_1031:
L_287:
	movq $0x5,%r15
	jmp L_169
.p2align 0x4
.long 0x1
L_308:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq (globalObjptrNonRoot+0x0)(%rip),%r15
	movq %r15,0x10(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_309
L_310:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_311+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_311
.p2align 0x4
.long 0x17
L_311:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_309:
	movq 0x10(%rbp),%r15
	jmp L_169
.p2align 0x4
.long 0x15
L_304:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_295:
	leaq L_297(%rip),%r15
	movq %r15,0x0(%rbp)
	movl $0x0,0x18(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0x20(%rbp)
	addq $0x18,%rbp
	leaq (L_296+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp exit_0
.p2align 0x4
.long 0x1
L_305:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq (globalObjptrNonRoot+0x0)(%rip),%r14
	movq 0x60(%rbp),%r13
	movq %r13,0x10(%rbp)
	movq 0x30(%rbp),%r15
	jmp L_170
.p2align 0x4
.long 0x13
L_294:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	jmp L_295
.p2align 0x4
.long 0x1
L_299:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq (globalObjptrNonRoot+0x0)(%rip),%r15
	movq %r15,0x18(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_300
L_301:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_302+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_302
.p2align 0x4
.long 0x14
L_302:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_300:
	movq 0x10(%rbp),%r15
	movq 0x0(%r15),%r13
	movq 0x10(%r13),%r14
	movq $0x3D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x10(%r15)
	addq $0x20,%r12
	movq 0x18(%rbp),%r13
	movq %r13,0x0(%r15)
	movq (globalObjptr+0x810)(%rip),%r13
	movq %r13,0x8(%r15)
	movq 0x60(%rbp),%r13
	movq %r13,0x10(%rbp)
	movq 0x30(%rbp),%r13
	movq %r15,%r14
	movq %r13,%r15
	jmp L_170
.p2align 0x4
.long 0xC
L_171:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq 0x20(%rbp),%r15
	movq %r15,0x18(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_172
L_177:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_178+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_178
.p2align 0x4
.long 0xE
L_178:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_172:
	movq $0x4D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x18(%rbp),%r14
	movq %r14,0x0(%r15)
	movq (globalObjptr+0x508)(%rip),%r14
	movq %r14,0x8(%r15)
	movq $0x4D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0x790)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x20(%rbp)
	addq $0x20,%rbp
	leaq (print_2+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x1
L_175:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	movq (globalObjptr+0x7F0)(%rip),%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_176+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Stdio_print
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_176
.p2align 0x4
.long 0x4
L_176:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq %rbp,(gcState+0x10)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x1,%r15d
	movl %r15d,%esi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call MLton_halt
.p2align 0x4
.long 0xF
L_184:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_185
L_306:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x80,%rbp
	leaq (L_307+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_307
.p2align 0x4
.long 0x16
L_307:
	addq $0xFFFFFFFFFFFFFF80,%rbp
L_185:
	movq 0x70(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r14,0x10(%rbp)
	movl $0x0,0x18(%rbp)
loop_15:
	movl 0x18(%rbp),%r15d
	cmpl $0xE,%r15d
	je L_292
L_186:
	movl $0xE,%r14d
	subl %r15d,%r14d
	jo L_168
L_187:
	movslq %r15d,%r13
	movslq %r14d,%rcx
	movq %rcx,0x20(%rbp)
	cmpq $0xE,%r13
	ja L_289
L_188:
	movq $0xE,%r14
	subq %r13,%r14
	cmpq %rcx,%r14
	jb L_289
L_189:
	movq 0x10(%rbp),%r14
	movq 0x8(%r14),%r13
	movq %r13,0x28(%rbp)
	movq 0x0(%r14),%r13
	movl 0x0(%r13),%r11d
	testl %r11d,%r11d
	jnz L_287
L_190:
	incl (gcState+0x44)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movl %r15d,%edx
	movq (globalObjptr+0x7F8)(%rip),%rsi
	movl $0x1,%r15d
	movl %r15d,%edi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_191+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_IO_writeChar8Vec
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_191
.p2align 0x4
.long 0x10
L_191:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq %rax,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_192
L_284:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_285+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_285
.p2align 0x4
.long 0x10
L_285:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_192:
	movq 0x38(%rbp),%r15
	cmpq $0xFFFFFFFFFFFFFFFF,%r15
	je L_1045
L_193:
	movl (gcState+0x44)(%rip),%r14d
	testl %r14d,%r14d
	jz L_203
L_194:
	decl %r14d
	movl %r14d,(gcState+0x44)(%rip)
x_0:
	movl %r15d,%r14d
	movslq %r14d,%r13
	cmpq %r13,%r15
	jne L_168
L_196:
	movq 0x28(%rbp),%r15
	addq 0x0(%r15),%r13
	jo L_168
L_197:
	movq %r13,0x0(%r15)
	testl %r14d,%r14d
	jz L_201
L_198:
	addl 0x18(%rbp),%r14d
	jo L_168
L_199:
	movl %r14d,0x18(%rbp)
	jmp loop_15
.p2align 0x4
L_1045:
L_204:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_205+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_Error_getErrno
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_205
.p2align 0x4
.long 0x10
L_205:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movl %eax,0x1C(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_206
L_282:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_283+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_283
.p2align 0x4
.long 0x10
L_283:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_206:
	movl (gcState+0x44)(%rip),%r15d
	testl %r15d,%r15d
	jz L_203
L_207:
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
loop_16:
	movl 0x1C(%rbp),%r15d
	cmpl $0x4,%r15d
	je L_1053
L_208:
	movq (c_stackP+0x0)(%rip),%rsp
	movl %r15d,%edi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_209+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_Error_strError
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_209
.p2align 0x4
.long 0x11
L_209:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq %rax,0x10(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_210
L_228:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_229+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_229
.p2align 0x4
.long 0x11
L_229:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_210:
	movq 0x10(%rbp),%r15
	movq %r15,0x20(%rbp)
	testq %r15,%r15
	jz L_1051
L_211:
	xorl %ecx,%ecx
.p2align 0x4,,0x7
loop_17:
	movslq %ecx,%r15
	movq %r15,0x10(%rbp)
	movq 0x20(%rbp),%r13
	movb 0x0(%r13,%r15,1),%r14b
	testb %r14b,%r14b
	jz L_1046
L_212:
	incl %ecx
	jmp loop_17
.p2align 0x4
L_1046:
L_213:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_214
L_225:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_226+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_226
.p2align 0x4
.long 0x11
L_226:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_214:
	movq 0x10(%rbp),%rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_224
L_215:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_216+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_216
.p2align 0x4
.long 0x11
L_216:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq %rax,0x28(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_18:
	cmpq 0x10(%rbp),%r15
	jnl L_1047
L_222:
	movl %r15d,%r14d
	movslq %r14d,%r13
	movq 0x28(%rbp),%r14
	movq 0x20(%rbp),%r10
	movb 0x0(%r10,%r13,1),%r11b
	movb %r11b,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_18
.p2align 0x4
L_1047:
L_217:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_218
L_220:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_221+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_221
.p2align 0x4
.long 0x12
L_221:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_218:
	movq 0x28(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
L_219:
	movq $0x3B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl 0x1C(%rbp),%r13d
	movl %r13d,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq %r14,%r15
	jmp L_169
.p2align 0x4
L_1051:
L_227:
	movq (globalObjptr+0x800)(%rip),%r15
	jmp L_219
.p2align 0x4
L_1053:
L_230:
	movl (gcState+0x44)(%rip),%r14d
	testl %r14d,%r14d
	jz L_1066
L_231:
	incl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x20(%rbp),%rcx
	movl 0x18(%rbp),%edx
	movq (globalObjptr+0x7F8)(%rip),%rsi
	movl $0x1,%r14d
	movl %r14d,%edi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_232+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_IO_writeChar8Vec
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_232
.p2align 0x4
.long 0x10
L_232:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq %rax,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_233
L_264:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_265+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_265
.p2align 0x4
.long 0x10
L_265:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_233:
	movq 0x20(%rbp),%r15
	cmpq $0xFFFFFFFFFFFFFFFF,%r15
	je L_1055
L_234:
	movl (gcState+0x44)(%rip),%r14d
	testl %r14d,%r14d
	jz L_203
L_235:
	decl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	jmp x_0
.p2align 0x4
L_1055:
L_237:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_238+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_Error_getErrno
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_238
.p2align 0x4
.long 0x11
L_238:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movl %eax,0x10(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_239
L_262:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_263+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_263
.p2align 0x4
.long 0x11
L_263:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_239:
	movl (gcState+0x44)(%rip),%r15d
	testl %r15d,%r15d
	jz L_203
L_240:
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movl 0x10(%rbp),%edi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_241+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_Error_strError
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_241
.p2align 0x4
.long 0x11
L_241:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq %rax,0x18(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_242
L_259:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_260+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_260
.p2align 0x4
.long 0x11
L_260:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_242:
	movq 0x18(%rbp),%r15
	movq %r15,0x20(%rbp)
	testq %r15,%r15
	jz L_1061
L_243:
	xorl %ecx,%ecx
.p2align 0x4,,0x7
loop_19:
	movslq %ecx,%r15
	movq %r15,0x18(%rbp)
	movq 0x20(%rbp),%r13
	movb 0x0(%r13,%r15,1),%r14b
	testb %r14b,%r14b
	jz L_1056
L_244:
	incl %ecx
	jmp loop_19
.p2align 0x4
L_1056:
L_245:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_246
L_256:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_257+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_257
.p2align 0x4
.long 0x11
L_257:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_246:
	movq 0x18(%rbp),%rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_224
L_247:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_248+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_248
.p2align 0x4
.long 0x11
L_248:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq %rax,0x28(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_20:
	cmpq 0x18(%rbp),%r15
	jnl L_1057
L_254:
	movl %r15d,%r14d
	movslq %r14d,%r13
	movq 0x28(%rbp),%r14
	movq 0x20(%rbp),%r10
	movb 0x0(%r10,%r13,1),%r11b
	movb %r11b,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_20
.p2align 0x4
L_1057:
L_249:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_250
L_252:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_253+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_253
.p2align 0x4
.long 0x12
L_253:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_250:
	movq 0x28(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
L_251:
	movq $0x3B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl 0x10(%rbp),%r13d
	movl %r13d,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq %r14,%r15
	jmp L_169
.p2align 0x4
L_1061:
L_258:
	movq (globalObjptr+0x800)(%rip),%r15
	jmp L_251
.p2align 0x4
L_1066:
L_266:
	incl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x20(%rbp),%rcx
	movl 0x18(%rbp),%edx
	movq (globalObjptr+0x7F8)(%rip),%rsi
	movl $0x1,%r14d
	movl %r14d,%edi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_267+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_IO_writeChar8Vec
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_267
.p2align 0x4
.long 0x10
L_267:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq %rax,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_268
L_279:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_280+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_280
.p2align 0x4
.long 0x10
L_280:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_268:
	movq 0x38(%rbp),%r15
	cmpq $0xFFFFFFFFFFFFFFFF,%r15
	je L_1068
L_269:
	movl (gcState+0x44)(%rip),%r14d
	testl %r14d,%r14d
	jz L_203
L_270:
	decl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	jmp x_0
.p2align 0x4
L_1068:
L_272:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_273+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_Error_getErrno
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_273
.p2align 0x4
.long 0x10
L_273:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movl %eax,0x1C(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_274
L_277:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_278+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_278
.p2align 0x4
.long 0x10
L_278:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_274:
	movl (gcState+0x44)(%rip),%r15d
	testl %r15d,%r15d
	jz L_203
L_275:
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	jmp loop_16
.p2align 0x4
.long 0xD
L_296:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	movq (globalObjptr+0x788)(%rip),%rdi
	xorq %rax,%rax
	call MLton_bug
.p2align 0x4
.long 0x1
L_297:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	movq (globalObjptr+0x808)(%rip),%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_298+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Stdio_print
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_298
.p2align 0x4
.long 0x4
L_298:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq %rbp,(gcState+0x10)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x1,%r15d
	movl %r15d,%esi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call MLton_halt
.p2align 0x4
.long 0xC
print_2:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq 0x20(%rbp),%rdi
	movq (c_stackP+0x0)(%rip),%rsp
	movq %rdi,%r15
	movq %rdi,0x18(%rbp)
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_173+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Stdio_print
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_173
.p2align 0x4
.long 0x2
L_173:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movl $0x1,0x18(%rbp)
	movq 0x10(%rbp),%r15
	movq %r15,0x20(%rbp)
	addq $0x18,%rbp
	leaq (L_174+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp exit_0
.p2align 0x4
.long 0xD
L_174:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	movq (globalObjptr+0x788)(%rip),%rdi
	xorq %rax,%rax
	call MLton_bug
.text
.p2align 0x4
.globl exnMessage_0
.hidden exnMessage_0
exnMessage_0:
L_588:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_589
L_647:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_648+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_648
.p2align 0x4
.long 0x2C
L_648:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
L_589:
	movq 0x8(%rbp),%r13
	movq 0x0(%r13),%r11
	cmpq $0x1,%r11
	je L_597
L_590:
	movq 0x0(%r11),%r14
	movq 0x8(%r11),%r11
	movq %r11,%r15
.p2align 0x4,,0x7
L_591:
	cmpq $0x1,%r14
	je L_1099
	cmpq $0x2,%r14
	je L_1091
L_593:
	movq 0x0(%rbp),%r13
	movq %r13,%r11
	andq $0x3,%r11
	jnz L_594
L_607:
	movq 0xFFFFFFFFFFFFFFF8(%r13),%r11
	shrq $0x1,%r11
	cmpq $0x1E,%r11
	je L_1089
L_594:
	cmpq $0x1,%r15
	je L_1081
L_595:
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	jmp L_591
.p2align 0x4
L_1081:
L_597:
	movq 0x0(%rbp),%r15
	cmpq $0x1,%r15
	je L_1088
	cmpq $0x2,%r15
	je L_1087
	cmpq $0x3,%r15
	je L_1086
	cmpq $0x5,%r15
	je L_1085
L_598:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0x1C,%r14
	je L_1084
	cmpq $0x1D,%r14
	je L_1083
	cmpq $0x1E,%r14
	je L_1082
L_599:
	movq (globalObjptr+0x818)(%rip),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1082:
L_602:
	movq (globalObjptr+0x7B8)(%rip),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1083:
L_601:
	movq (globalObjptr+0x7B0)(%rip),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1084:
L_600:
	movq (globalObjptr+0x7A8)(%rip),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1085:
L_606:
	movq (globalObjptr+0x7D8)(%rip),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1086:
L_605:
	movq (globalObjptr+0x7D0)(%rip),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1087:
L_604:
	movq (globalObjptr+0x7C8)(%rip),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1088:
L_603:
	movq (globalObjptr+0x7C0)(%rip),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1089:
L_608:
	movq %r14,0x28(%rbp)
	movq 0x0(%rbp),%r15
	movq 0x10(%r15),%r14
	movq %r14,0x8(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x10(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x20(%rbp)
	addq $0x20,%rbp
	leaq (L_609+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp exnMessage_0
.p2align 0x4
L_1091:
L_624:
	movq 0x0(%rbp),%r14
	movq %r14,%r13
	andq $0x3,%r13
	jnz L_625
L_628:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0x1D,%r13
	je L_1093
L_625:
	cmpq $0x1,%r15
	je L_597
L_626:
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	jmp L_591
.p2align 0x4
L_1093:
L_629:
	movq 0x0(%rbp),%r14
	movl 0x0(%r14),%ecx
	movq 0x8(%r14),%r13
	movq %r13,0x8(%rbp)
	movq (globalObjptr+0x480)(%rip),%r15
	movq (globalObjptr+0x20)(%rip),%r14
	movq %r14,0x10(%rbp)
.p2align 0x4,,0x7
L_630:
	movq 0x10(%rbp),%r14
	cmpl %ecx,0x0(%r14)
	je L_1096
L_631:
	cmpq $0x1,%r15
	je L_1094
L_632:
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	movq %r14,0x10(%rbp)
	jmp L_630
.p2align 0x4
L_1094:
L_633:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_634
L_640:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_641+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_641
.p2align 0x4
.long 0x2B
L_641:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
L_634:
	movq (globalObjptr+0x840)(%rip),%r15
L_635:
	movq $0x4D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0x488)(%rip),%r15
	movq %r15,0x8(%r14)
	movq $0x4D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq (globalObjptr+0x848)(%rip),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x18(%rbp)
	addq $0x18,%rbp
	leaq (L_636+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
L_1096:
L_642:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_643
L_644:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_645+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_645
.p2align 0x4
.long 0x2A
L_645:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_643:
	movq 0x10(%rbp),%r14
	movq 0x8(%r14),%r15
	jmp L_635
.p2align 0x4
L_1099:
L_614:
	movq 0x0(%rbp),%r14
	movq %r14,%r13
	andq $0x3,%r13
	jnz L_615
L_618:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0x1C,%r13
	je L_1101
L_615:
	cmpq $0x1,%r15
	je L_597
L_616:
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	jmp L_591
.p2align 0x4
L_1101:
L_619:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_620
L_621:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_622+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_622
.p2align 0x4
.long 0x28
L_622:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_620:
	movq 0x0(%rbp),%r15
	movq 0x0(%r15),%r14
	movq $0x4D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x18,%r12
	movq $0x1,0x8(%r15)
	movq $0x4D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0x838)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x26
L_609:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq 0x20(%rbp),%r15
	movq %r15,0x18(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_610
L_611:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_612+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_612
.p2align 0x4
.long 0x27
L_612:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_610:
	movq $0x4D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x18(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x4D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0x820)(%rip),%r15
	movq %r15,0x0(%r14)
	movq $0x4D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq 0x8(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x4D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0x828)(%rip),%r15
	movq %r15,0x0(%r14)
	movq $0x4D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq 0x10(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x4D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0x830)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x29
L_636:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq 0x18(%rbp),%r15
	movq %r15,0x10(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_637
L_638:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_639+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_639
.p2align 0x4
.long 0x2A
L_639:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_637:
	movq $0x4D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x10(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x4D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%r14)
	movq $0x4D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq (globalObjptr+0x850)(%rip),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x0(%rbp)
	jmp concat_0
.text
.p2align 0x4
.globl concat_0
.hidden concat_0
concat_0:
L_649:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_650
L_692:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_693+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_693
.p2align 0x4
.long 0x28
L_693:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_650:
	movq 0x0(%rbp),%r15
	cmpq $0x1,%r15
	je L_1123
L_651:
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	movq %r15,0x0(%rbp)
	movq %r14,0x8(%rbp)
	movq $0x1,0x10(%rbp)
.p2align 0x4,,0x7
L_652:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_1122
.p2align 0x4,,0x7
L_653:
	movq 0x8(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movq $0x13,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x0(%r13)
	addq $0x18,%r12
	movq %r15,0x8(%r13)
	movq $0x4F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq %r13,0x0(%r15)
	movq 0x10(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x0(%rbp),%r14
	cmpq $0x1,%r14
	je L_1108
L_654:
	movq %r15,0x10(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x0(%rbp)
	movq %r15,0x8(%rbp)
	jmp L_652
.p2align 0x4
L_1108:
L_655:
	movq %r13,0x8(%rbp)
	movq 0x10(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq $0x1,0x10(%rbp)
.p2align 0x4,,0x7
L_656:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_1121
.p2align 0x4,,0x7
L_657:
	movq $0x4F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x8(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x10(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x0(%rbp),%r14
	cmpq $0x1,%r14
	je L_1109
L_658:
	movq %r15,0x10(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x0(%rbp)
	movq %r15,0x8(%rbp)
	jmp L_656
.p2align 0x4
L_1109:
L_659:
	movq 0x10(%rbp),%r13
	cmpq $0x1,%r13
	je L_1116
L_660:
	movq 0x8(%rbp),%r11
	xorq %r15,%r15
	xchgq %r11,%r14
.p2align 0x4,,0x7
L_661:
	addq 0x0(%r14),%r15
	movq %r15,0x18(%rbp)
	cmpq $0x1,%r13
	je L_1110
L_662:
	movq 0x0(%r13),%r14
	movq 0x8(%r13),%r13
	jmp L_661
.p2align 0x4
L_1110:
L_663:
	testq %r15,%r15
	jz L_1115
L_664:
	cmpq $0x7FFFFFFF,%r15
	ja L_1114
L_665:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	movq %r15,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_666+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_666
.p2align 0x4
.long 0x2D
L_666:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq %rax,%r15
L_667:
	movq 0x10(%rbp),%r10
	movq 0x8(%rbp),%r11
	xorq %r13,%r13
	xorq %r14,%r14
.p2align 0x4,,0x7
loop_35:
	cmpq 0x18(%rbp),%r14
	jnl L_1113
.p2align 0x4,,0x7
loop_36:
	cmpq 0x0(%r11),%r13
	jl L_1112
L_670:
	cmpq $0x1,%r10
	je L_1111
L_671:
	movq 0x0(%r10),%r9
	movq 0x8(%r10),%r10
	xorq %r13,%r13
	movq %r9,%r11
	jmp loop_36
.p2align 0x4
L_1111:
L_672:
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1112:
L_673:
	movq %r13,%r9
	movq 0x8(%r11),%rsp
	movb 0x0(%rsp,%r13,1),%r8b
	movb %r8b,0x0(%r15,%r14,1)
	incq %r9
	incq %r14
	movq %r9,%r13
	jmp loop_35
.p2align 0x4
L_1113:
L_668:
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1114:
L_674:
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1115:
L_675:
	movq (globalObjptr+0x490)(%rip),%r14
	xchgq %r14,%r15
	jmp L_667
.p2align 0x4
L_1116:
L_676:
	movq 0x8(%rbp),%r15
	movq 0x8(%r15),%r13
	movq 0x0(%r15),%rdx
	movq %rdx,0x18(%rbp)
	cmpq 0xFFFFFFFFFFFFFFF0(%r13),%rdx
	movq %r13,0x10(%rbp)
	je L_1120
L_677:
	testq %rdx,%rdx
	jz L_1119
L_678:
	cmpq $0x7FFFFFFF,%rdx
	ja L_1118
L_679:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_680+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_680
.p2align 0x4
.long 0x2E
L_680:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq %rax,%r15
L_681:
	xorq %r14,%r14
.p2align 0x4,,0x7
loop_37:
	cmpq 0x18(%rbp),%r14
	jnl L_1117
L_683:
	movq 0x10(%rbp),%r11
	movb 0x0(%r11,%r14,1),%r13b
	movb %r13b,0x0(%r15,%r14,1)
	incq %r14
	jmp loop_37
.p2align 0x4
L_1117:
L_682:
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1118:
L_684:
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1119:
L_685:
	movq (globalObjptr+0x498)(%rip),%r15
	jmp L_681
.p2align 0x4
L_1120:
L_686:
	movq 0x10(%rbp),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1121:
L_687:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_688+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_688
.p2align 0x4
.long 0x2F
L_688:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	jmp L_657
.p2align 0x4
L_1122:
L_689:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_690+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_690
.p2align 0x4
.long 0x2F
L_690:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	jmp L_653
.p2align 0x4
L_1123:
L_691:
	movq (globalObjptr+0x4A0)(%rip),%r14
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r14)
	movq %r14,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl exit_0
.hidden exit_0
exit_0:
L_694:
	movq (gcState+0x20)(%rip),%r15
	movq %r15,0x18(%rbp)
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_695
L_781:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_782+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_782
.p2align 0x4
.long 0x36
L_782:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_695:
	movq 0x8(%rbp),%r14
	movq 0x18(%r14),%r15
	movq 0x10(%r14),%r13
	movq 0x8(%r14),%r11
	movq %r11,0x20(%rbp)
	movq 0x0(%r14),%r11
	movl 0x0(%r15),%r14d
	testl %r14d,%r14d
	jnz L_1145
L_696:
	movl $0x1,0x0(%r15)
	movl 0x0(%rbp),%r14d
	cmpl $0x0,%r14d
	setl %al
	movzbl %al,%eax
	movl %eax,0x4(%rbp)
	jl L_1144
L_697:
	cmpl $0x100,%r14d
	jnl L_1130
L_746:
	movq 0x0(%r13),%r14
	cmpq $0x1,%r14
	je L_761
L_747:
	movq 0x8(%r14),%r13
	movq %r13,0x8(%rbp)
	movq 0x0(%r14),%r14
	movq %r14,%r15
.p2align 0x4,,0x7
L_748:
	movq 0x0(%r15),%r14
	movq %r14,0x20(%rbp)
	cmpq $0x1,%r14
	jne L_1126
.p2align 0x4,,0x7
L_758:
	movq 0x8(%rbp),%r14
	cmpq $0x1,%r14
	je L_1125
L_759:
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x8(%rbp)
	jmp L_748
.p2align 0x4
L_1125:
L_761:
	movq (c_stackP+0x0)(%rip),%rsp
	movl 0x0(%rbp),%esi
	movq %rbp,(gcState+0x10)(%rip)
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call MLton_halt
.p2align 0x4
L_1126:
L_749:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_750
L_775:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_776+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_776
.p2align 0x4
.long 0x35
L_776:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_750:
	movq 0x20(%rbp),%r14
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x20(%rbp)
L_751:
	movq 0x18(%r15),%r14
	movq 0x10(%r15),%r13
	movq 0x0(%r13),%r11
	movq 0xFFFFFFFFFFFFFFF8(%r11),%r15
	shrq $0x1,%r15
	cmpq $0x24,%r15
	je L_1127
L_767:
	movq %r14,0x38(%rbp)
	movq 0x8(%r11),%r15
	movq 0x0(%r11),%r14
	movq $0x35,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x0(%r13)
	movq %r14,0x8(%r13)
	movq %r13,0x30(%rbp)
	addq $0x18,%r12
	leaq L_772(%rip),%r15
	movq %r15,0x10(%rbp)
	movq %rbp,%r15
	addq $0x18,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	addq $0x30,%rbp
	leaq (L_768+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp flushBuf_0
.p2align 0x4
L_1127:
L_752:
	movq %r14,0x38(%rbp)
	movq 0x8(%r11),%r15
	movq 0x0(%r11),%r14
	movq $0x35,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x0(%r13)
	movq %r14,0x8(%r13)
	movq %r13,0x30(%rbp)
	addq $0x18,%r12
	leaq L_764(%rip),%r15
	movq %r15,0x10(%rbp)
	movq %rbp,%r15
	addq $0x18,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	addq $0x30,%rbp
	leaq (L_753+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp flushBuf_0
.p2align 0x4
L_1130:
	movq %r11,%r13
L_699:
	movl (gcState+0x44)(%rip),%r14d
	incl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movq 0x20(%rbp),%r11
	movl 0x0(%r11),%r10d
	movl %r10d,0x8(%rbp)
	testl %r10d,%r10d
	jnz L_1140
L_700:
	movl $0x1,0x0(%r11)
	testl %r14d,%r14d
	jz L_1139
L_701:
	decl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movl 0x4(%rbp),%r14d
	testl %r14d,%r14d
	jnz L_1138
L_702:
	movq %r13,%r15
L_703:
	movq %r15,0x28(%rbp)
	movl 0x0(%rbp),%ecx
	negl %ecx
	movl $0x20,%ebx
.p2align 0x4,,0x7
loop_38:
	movl %ecx,%eax
	movl $0xA,%edi
	cltd
	idivl %edi
	negl %edx
	movslq %edx,%r15
	cmpq $0x10,%r15
	jnb x_2
L_707:
	movq (globalObjptr+0x858)(%rip),%r14
	movb 0x0(%r14,%r15,1),%r13b
	movq 0x28(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movslq %ebx,%r11
	cmpq %r14,%r11
	jnb x_2
L_709:
	movb %r13b,0x0(%r15,%r11,1)
	movl %ecx,%eax
	movl $0xA,%ecx
	cltd
	idivl %ecx
	testl %eax,%eax
	jz L_1132
L_710:
	decl %ebx
	jo x_4
L_711:
	movl %eax,%ecx
	jmp loop_38
.p2align 0x4
x_4:
x_2:
	movl 0x8(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_1131
L_705:
	movq 0x20(%rbp),%r15
	movl $0x0,0x0(%r15)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1131:
L_706:
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1132:
L_712:
	movl 0x4(%rbp),%r15d
	testl %r15d,%r15d
	jz L_714
L_732:
	decl %ebx
	jo x_2
L_733:
	movslq %ebx,%r15
	cmpq %r14,%r15
	jnb x_2
L_735:
	movq 0x28(%rbp),%r13
	movb $0x7E,0x0(%r13,%r15,1)
L_714:
	movslq %ebx,%r15
	movq %r15,0x30(%rbp)
	cmpq %r15,%r14
	jb x_2
L_715:
	subq %r15,%r14
	movq %r14,0x38(%rbp)
	jz L_1136
L_716:
	cmpq $0x7FFFFFFF,%r14
	ja x_2
L_717:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	movq %r14,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_718+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_718
.p2align 0x4
.long 0x30
L_718:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq %rax,0x40(%rbp)
L_719:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_39:
	cmpq 0x38(%rbp),%r15
	jnl L_1133
L_728:
	movq %r15,%r14
	addq 0x30(%rbp),%r14
	movq 0x40(%rbp),%r13
	movq 0x28(%rbp),%r10
	movb 0x0(%r10,%r14,1),%r11b
	movb %r11b,0x0(%r13,%r15,1)
	incq %r15
	jmp loop_39
.p2align 0x4
L_1133:
L_720:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_721
L_726:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_727+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_727
.p2align 0x4
.long 0x32
L_727:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_721:
	movq 0x40(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
	movl 0x8(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_723
L_722:
	movq 0x20(%rbp),%r15
	movl $0x0,0x0(%r15)
L_723:
	movq $0x4D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x40(%rbp),%r14
	movq %r14,0x0(%r15)
	movq (globalObjptr+0x4F8)(%rip),%r14
	movq %r14,0x8(%r15)
	movq $0x4D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0x860)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x28(%rbp)
	addq $0x28,%rbp
	leaq (L_724+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
L_1136:
L_730:
	movq (globalObjptr+0x4E8)(%rip),%r15
	movq %r15,0x40(%rbp)
	jmp L_719
.p2align 0x4
L_1138:
L_736:
	movq %r13,0x28(%rbp)
	movl $0x20,%ebx
	movl 0x0(%rbp),%ecx
	jmp loop_38
.p2align 0x4
L_1139:
L_737:
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1140:
L_738:
	testl %r14d,%r14d
	jz L_1143
L_739:
	decl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	movq $0x21,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_740+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_740
.p2align 0x4
.long 0x33
L_740:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	xorq %r15,%r15
	movq %rax,%r14
.p2align 0x4,,0x7
loop_40:
	cmpq $0x21,%r15
	jnl L_1141
L_744:
	movb $0x0,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_40
.p2align 0x4
L_1141:
L_741:
	movl 0x4(%rbp),%r15d
	testl %r15d,%r15d
	jz L_1142
L_743:
	movq %r14,0x28(%rbp)
	movl $0x20,%ebx
	movl 0x0(%rbp),%ecx
	jmp loop_38
.p2align 0x4
L_1142:
	movq %r14,%r15
	jmp L_703
.p2align 0x4
L_1143:
L_745:
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1144:
	movq %r11,%r13
	jmp L_699
.p2align 0x4
L_1145:
L_780:
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x34
L_768:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_755
L_770:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_771+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_771
.p2align 0x4
.long 0x35
L_771:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_755:
	movq 0x20(%rbp),%r14
	cmpq $0x1,%r14
	je L_758
L_756:
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x20(%rbp)
	jmp L_751
.p2align 0x4
.long 0xD
L_772:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq 0x8(%rbp),%r14
	cmpq $0x1,%r14
	je L_761
L_773:
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x8(%rbp)
	jmp L_748
.p2align 0x4
.long 0x34
L_753:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_755
L_762:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_763+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_763
.p2align 0x4
.long 0x35
L_763:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	jmp L_755
.p2align 0x4
.long 0xD
L_764:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq 0x8(%rbp),%r14
	cmpq $0x1,%r14
	je L_761
L_765:
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x8(%rbp)
	jmp L_748
.p2align 0x4
.long 0x31
L_724:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl flushBuf_0
.hidden flushBuf_0
flushBuf_0:
L_783:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_784
L_868:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_869+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_869
.p2align 0x4
.long 0x2C
L_869:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
L_784:
	movq 0x0(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x10(%rbp)
	movq 0x0(%r15),%r13
	movl 0x0(%r13),%r11d
	movl %r11d,0x18(%rbp)
	movl $0x0,0x0(%r13)
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	movq %r15,0x20(%rbp)
	movslq %r11d,%r14
	cmpq %r14,%r15
	jb L_864
L_785:
	movq 0x8(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x28(%rbp)
	movl $0x0,0x1C(%rbp)
loop_41:
	movl 0x1C(%rbp),%r15d
	movl 0x18(%rbp),%r14d
	cmpl %r14d,%r15d
	je L_1183
L_786:
	subl %r15d,%r14d
	jo L_787
L_788:
	movslq %r15d,%r13
	movslq %r14d,%rcx
	movq %rcx,0x30(%rbp)
	movq 0x20(%rbp),%r14
	cmpq %r13,%r14
	jb L_864
L_789:
	subq %r13,%r14
	cmpq %rcx,%r14
	jb L_1180
L_790:
	movq 0x28(%rbp),%r14
	movq 0x8(%r14),%r13
	movq %r13,0x38(%rbp)
	movq 0x0(%r14),%r13
	movl 0x0(%r13),%r11d
	testl %r11d,%r11d
	jnz L_1179
L_791:
	incl (gcState+0x44)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movl %r15d,%edx
	movq 0x10(%rbp),%rsi
	movl $0x1,%r15d
	movl %r15d,%edi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_792+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_IO_writeChar8Arr
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_792
.p2align 0x4
.long 0x37
L_792:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	cmpq $0xFFFFFFFFFFFFFFFF,%rax
	je L_1157
L_793:
	movl (gcState+0x44)(%rip),%r14d
	testl %r14d,%r14d
	jz L_1156
L_794:
	decl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movq %rax,%r15
x_3:
	movl %r15d,%r14d
	movslq %r14d,%r13
	cmpq %r15,%r13
	jne L_787
L_796:
	movq 0x38(%rbp),%r15
	addq 0x0(%r15),%r13
	jo L_787
L_797:
	movq %r13,0x0(%r15)
	testl %r14d,%r14d
	jz L_1153
L_798:
	addl 0x1C(%rbp),%r14d
	jo L_1152
L_799:
	movl %r14d,0x1C(%rbp)
	jmp loop_41
.p2align 0x4
L_1152:
L_787:
	movq $0x1,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1153:
L_800:
	movq (globalObjptr+0x4D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1156:
L_802:
	movq (globalObjptr+0x4D0)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1157:
L_803:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_804+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_Error_getErrno
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_804
.p2align 0x4
.long 0x37
L_804:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl (gcState+0x44)(%rip),%r15d
	testl %r15d,%r15d
	jz L_802
L_805:
	movl %eax,0x40(%rbp)
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
loop_42:
	movl 0x40(%rbp),%r15d
	cmpl $0x4,%r15d
	je L_1164
L_806:
	movq (c_stackP+0x0)(%rip),%rsp
	movl %r15d,%edi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_807+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_Error_strError
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_807
.p2align 0x4
.long 0x38
L_807:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq %rax,0x48(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_808
L_823:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_824+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_824
.p2align 0x4
.long 0x3B
L_824:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
L_808:
	movq 0x48(%rbp),%r15
	movq %r15,0x50(%rbp)
	testq %r15,%r15
	jz L_1162
L_809:
	xorl %ecx,%ecx
.p2align 0x4,,0x7
loop_43:
	movslq %ecx,%r15
	movq %r15,0x48(%rbp)
	movq 0x50(%rbp),%r13
	movb 0x0(%r13,%r15,1),%r14b
	testb %r14b,%r14b
	jz L_1158
L_810:
	incl %ecx
	jmp loop_43
.p2align 0x4
L_1158:
L_811:
	movq 0x48(%rbp),%rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_1161
L_812:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_813+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_813
.p2align 0x4
.long 0x39
L_813:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movq %rax,0x58(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_44:
	cmpq 0x48(%rbp),%r15
	jnl L_1159
L_819:
	movl %r15d,%r14d
	movslq %r14d,%r13
	movq 0x58(%rbp),%r14
	movq 0x50(%rbp),%r10
	movb 0x0(%r10,%r13,1),%r11b
	movb %r11b,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_44
.p2align 0x4
L_1159:
L_814:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_815
L_817:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_818+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_818
.p2align 0x4
.long 0x3A
L_818:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_815:
	movq 0x58(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
L_816:
	movq $0x3B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl 0x40(%rbp),%r15d
	movl %r15d,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq %r14,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1161:
L_821:
	movq $0x2,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1162:
L_822:
	movq (globalObjptr+0x800)(%rip),%r15
	jmp L_816
.p2align 0x4
L_1164:
L_825:
	movl (gcState+0x44)(%rip),%r14d
	testl %r14d,%r14d
	jz L_1174
L_826:
	incl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x30(%rbp),%rcx
	movl 0x1C(%rbp),%edx
	movq 0x10(%rbp),%rsi
	movl $0x1,%r14d
	movl %r14d,%edi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_827+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_IO_writeChar8Arr
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_827
.p2align 0x4
.long 0x37
L_827:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	cmpq $0xFFFFFFFFFFFFFFFF,%rax
	je L_1166
L_828:
	movl (gcState+0x44)(%rip),%r14d
	testl %r14d,%r14d
	jz L_802
L_829:
	decl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movq %rax,%r15
	jmp x_3
.p2align 0x4
L_1166:
L_831:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x8,%rbp
	leaq (L_832+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_Error_getErrno
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_832
.p2align 0x4
.long 0x0
L_832:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movl %eax,%r15d
	movl %r15d,0x0(%rbp)
	movl %eax,(cReturnTemp+0x0)(%rip)
	movl (gcState+0x44)(%rip),%r14d
	testl %r14d,%r14d
	jz L_802
L_833:
	decl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movl %r15d,%edi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_834+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_Error_strError
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_834
.p2align 0x4
.long 0x3C
L_834:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
	movq %rax,0x8(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_835
L_849:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_850+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_850
.p2align 0x4
.long 0x4
L_850:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
L_835:
	movq 0x8(%rbp),%r15
	movq %r15,0x10(%rbp)
	testq %r15,%r15
	jz L_1171
L_836:
	xorl %ecx,%ecx
.p2align 0x4,,0x7
loop_45:
	movslq %ecx,%r15
	movq %r15,0x8(%rbp)
	movq 0x10(%rbp),%r13
	movb 0x0(%r13,%r15,1),%r14b
	testb %r14b,%r14b
	jz L_1167
L_837:
	incl %ecx
	jmp loop_45
.p2align 0x4
L_1167:
L_838:
	movq 0x8(%rbp),%rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_821
L_839:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_840+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_840
.p2align 0x4
.long 0x1C
L_840:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq %rax,0x18(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_46:
	cmpq 0x8(%rbp),%r15
	jnl L_1168
L_846:
	movl %r15d,%r14d
	movslq %r14d,%r13
	movq 0x18(%rbp),%r14
	movq 0x10(%rbp),%r10
	movb 0x0(%r10,%r13,1),%r11b
	movb %r11b,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_46
.p2align 0x4
L_1168:
L_841:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_842
L_844:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_845+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_845
.p2align 0x4
.long 0x3
L_845:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_842:
	movq 0x18(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
L_843:
	movq $0x3B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl 0x0(%rbp),%r15d
	movl %r15d,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq %r14,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1171:
L_848:
	movq (globalObjptr+0x800)(%rip),%r15
	jmp L_843
.p2align 0x4
L_1174:
L_852:
	incl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x30(%rbp),%rcx
	movl 0x1C(%rbp),%edx
	movq 0x10(%rbp),%rsi
	movl $0x1,%r14d
	movl %r14d,%edi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_853+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_IO_writeChar8Arr
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_853
.p2align 0x4
.long 0x37
L_853:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	cmpq $0xFFFFFFFFFFFFFFFF,%rax
	je L_1176
L_854:
	movl (gcState+0x44)(%rip),%r14d
	testl %r14d,%r14d
	jz L_802
L_855:
	decl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movq %rax,%r15
	jmp x_3
.p2align 0x4
L_1176:
L_857:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_858+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_Error_getErrno
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_858
.p2align 0x4
.long 0x37
L_858:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl (gcState+0x44)(%rip),%r15d
	testl %r15d,%r15d
	jz L_802
L_859:
	movl %eax,0x40(%rbp)
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	jmp loop_42
.p2align 0x4
L_1179:
L_862:
	movq $0x5,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1180:
L_864:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1183:
L_866:
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
