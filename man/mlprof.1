.TH mlprof 1 "November 1, 2002"
.SH NAME
\fBmlprof\fP \- display profile information from MLton executable
.SH SYNOPSIS
\fBmlprof \fI[option ...] a.out mlmon.out\fR
.SH DESCRIPTION
.PP
\fBmlprof\fP extracts information from an mlmon.out file produced
by running a program compiled by \fBMLton\fP with \fB-profile alloc\fP or
\fB-profile time\fP option.
In order to do this, it needs the executable (a.out) file produced by
\fBMLton\fP and the mlmon.out file produced by running the executable.
In addition, the results printed by \fBmlprof\fP relate most
closely to the SSA intermediate language of compilation, so having the
\fI*\fB.ssa\fR file is useful.

The output of mlprof consists of an initial line indicating the total amount of
CPU time or bytes allocated. After this the various routines will be listed
along with the percentage of this total that they used, in decreasing order.

The fact that the relation between the counts and the original ML program is
only done as far as the output of the SSA pass is quite unfortunate, but
hopefully still useful.
.SH OPTIONS
.TP
\fB-busy \fI{\fBfalse\fP|\fBtrue\fP}\fP
Show the information for each laebl at all levels of detail.  This is only
meaningful if depth is greater than 0.
.TP
\fB-color \fI{\fBfalse\fP|\fBtrue\fP}\fP
Color the dot graphs, using red for the most active blocks or functions, orange,
for the next group, yellow for the next, and black for the least active.  This
is only useful if the program was compiled \fB-keep dot\fP. 
.TP
 \fB-depth \fI{\fB0\fP|\fB1\fP|\fB2\fP}\fP
Control the level of detail of profiling.  The default is 0.
.br
.in +.5i
\fB0\fP  SSA functions.
.br
\fB1\fP  SSA basic blocks.
.br
\fB2\fP  Assembly basic blocks.  This is only meaningful for time profiling.
.in -.5i
.TP
\fB-raw \fI{\fBfalse\fP|\fBtrue\fP}\fP
Show the raw counts in addition to the percentages.
.TP
\fB-static \fI{\fBfalse\fP|\fBtrue\fP}\fP
Provide information on static C functions.
With \fB-static false\fP, all compute time in C code which was \fInot\fP
generated by \fBMLton\fP is charged to the nearest non-static symbol
occurring before that location.
With \fB-static true\fP, it is charged to the nearest symbol before the
location, static or non-static.
Because static symbol names are not necessarily unique, the name
of the symbol will be followed by its location.
.TP
\fB-thresh \fI{\fB0\fP|\fB1\fP|...|\fB100\fP}\fP
Only print information about functions (or blocks) whose percentage is
above the specified integer.
.SH "SEE ALSO"
.BR mlton (1)
