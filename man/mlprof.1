.TH mlprof 1 "VERSION"
.SH NAME
\fBmlprof\fP \- display profile information from MLton executable
.SH SYNOPSIS
\fBmlprof \fI[\fB-d \fI{\fB0\fP|\fB1\fP|\fB2\fP}] [\fB-s\fP] [\fB-t\fP n] a.out mlmon.out\fR
.SH DESCRIPTION
.PP
\fBmlprof\fP extracts information from an mlmon.out file produced
by running a program compiled by \fBMLton\fP with the \fB-p\fP option.
In order to do this, it needs the executable (a.out) file produced by
\fBMLton\fP and the mlmon.out file produced by running the executable.
In addition, the results printed by \fBmlprof\fP relate most
closely to the CPS intermediate language of compilation, so having the
\fI*\fB.cps\fR file is useful.

The output of mlprof consists of an initial line indicating how much CPU time
the program used.  After this the various routines will be listed along with the
percentage of this time that they used, in decreasing order.

The fact that the relation between CPU time use and the original ML program is
only done as far as the output of the CPS pass is quite unfortunate, but
hopefully still useful.
.SH OPTIONS
.TP
\fB-d \fI{\fB0\fP|\fB1\fP|\fB2\fP}\fP
Control the level of detail of profiling.  The default is 0.
.br
.in +.5i
\fB0\fP  CPS functions.
.br
\fB1\fP  CPS basic blocks.
.br
\fB2\fP  Assembly basic blocks.
.in -.5i
.TP
\fB-s\fP
Provide information on static C functions.
Without this flag, all compute time in C code which was \fInot\fP
generated by \fBMLton\fP is charged to the nearest non-static symbol
occurring before that location.
With this flag it is charged to the nearest symbol before the location,
static or non-static.
Note, because static symbol names are not necessarily unique, the name
of the symbol will be followed by its location.
.TP
\fB-t \fIn\fR
Only print information about functions (or blocks) whose percentage of time is
above \fIn\fP.
.SH "SEE ALSO"
.BR mlton (1)
