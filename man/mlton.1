.TH mlton 1 "July 15, 2003"
.SH NAME
\fBmlton\fP \- whole-program compiler for the Standard ML (SML) programming
language
.SH SYNOPSIS
\fBmlton\fP \fI[option ...] file\fB.\fP{\fBcm\fP|\fBsml\fP|\fBc\fP|\fBo\fP} 
[file\fB.\fP{\fBc\fP|\fBS\fP|\fBo\fP} ...]\fR
.SH DESCRIPTION
.PP
\fBMLton\fP is run from the command line with a collection of options
followed by a file name and a list of files to compile, assemble, and
link with.  The simplest case is to run \fBmlton foo.sml\fP, which
will produce an executable \fBfoo\fP.  Since \fBMLton\fP has no notion
of separate compilation, the program must be the entire program you
wish to compile.  However, the program may refer to signatures and
structures defined in the SML basis library.

For developing large programs spanning many files, \fBMLton\fP supports
a limited subset of SML/NJ Compilation Manager (CM) files.  For example,
\fBmlton foo.cm\fP will compile the complete SML program consisting of
the concatenatation of all the SML files referred to (either directly
or indirectly) by \fBfoo.cm\fP.

\fBMLton\fP's options allow you to control the name of the output
file, the verbosity of compile-time messages, and whether or not
certain optimizations are performed.  They also allow you to specify
which intermediate files are saved and to stop the compilation process
early, at some intermediate pass, in which case compilation can be
resumed by passing the resulting files to \fBMLton\fP.  \fBMLton\fP
uses the input file suffix to determine the type of input program.
The possibilities are \fB.cm\fR, \fB.sml\fR, \fB.c\fR, \fB.S\fR, and \fB.o\fR.

With no arguments, \fBMLton\fP prints the version number and exits.
For a usage message, run \fBMLton\fP with an invalid switch, e.g.,
\fBmlton -z\fP.  In the explanation below and in the usage message,
for flags that take a boolean argument
(\fI{\fBtrue\fI|\fBfalse\fI}\fR), the first value listed is the
default. For example, by default, overflow checking on is performed on
integer arithmetic.

.SH Compile-time options
.TP
\fB-align \fI{\fB4\fP|\fB8\fP}\fP
Aligns object sizes and doubles in memory by the specified alignment.
On x86, the default is \fB4\fP and on Sparc the default is
\fB8\fP.

.TP
\fB-basis \fI{\fB2002\fP|\fB2002-strict\fP|\fB1997\fP|\fBnone\fP}\fP
Selects a Basis Library to be used by the input program.  \fB2002\fP
and \fB2002-strict\fP implement the 2002 Basis Library
specification; \fB2002-strict\fP removes MLton extensions.  \fB1997\fP
implements the 1997 version of the Basis Library specification.
\fBnone\fP removes all Basis Library functionality.

.TP
\fB-cc-opt \fIoption\fP\fP
Pass the option to gcc for compiling C code.  This is only useful when
compiling \fB-native false\fP.

.TP
\fB-detect-overflow \fI{\fBtrue\fI|\fBfalse\fI}\fR
This flag controls whether or not overflow checking is performed on integer
arithmetic.

.TP
\fB-exn-history \fI{\fBfalse\fI|\fBtrue\fI}\fR
Enable \fBExn.history\fP.  There is a performance cost to
\fB-exn-history true\fP, both in memory usage of exceptions and in
run time, because of additional work that must be performed at each
exception construction, raise, and handle.

.TP
\fB-export-header \fI{\fBfalse\fI|\fBtrue\fI}\fR
This flag is useful for programs that use \fB_export\fP expressions.
It causes \fBMLton\fP to output to standard output a C header file
with prototypes for all of the functions exported from SML.

.TP
\fB-ieee-fp \fI{\fBfalse\fP|\fBtrue\fP}\fR
Control whether or not the code generator is pedantic about following
the IEEE floating point standard.  By default, it is not, because of the
performance cost.  This has no effect with \fB-native false\fP.

.TP
\fB-inline \fIn\fR
Set the inlining threshold used in the optimizer.
The default is 320.

.TP
\fB-keep \fI{\fBg\fP|\fBo\fP|\fBsml\fP}\fR
Save the intermediate files corresponding to the given arg.
If no \fB-keep\fP argument is given, then only the final file is saved.
.in +.5i
\fBg\fP    generated \fB.S\fP and \fB.c\fP files passed to gcc.
.br
\fBo\fP    object file (\fI*\fB.o\fR).
.br
\fBsml\fP  SML file.
.in -.5i

.TP
\fB-link-opt \fIopt\fR
Pass the option to \fBgcc\fP when linking.  You can use this to
specify library search paths, e.g. \fB-link-opt -Lpath\fP, and
libraries to link with, e.g. \fB-link-opt -lfoo\fP, or even both at
the same time, e.g. \fB-link-opt '-Lpath -lfoo'\fP.  If you wish to
pash an option to the linker, you must use \fBgcc\fP's \fB-Wl,\fP
syntax, e.g., \fB-link-opt '-Wl,--export-dynamic'\fP.

.TP
\fB-may-load-world \fI{\fBtrue\fP|\fBfalse\fP}\fP
Controls whether or not the generated executable supports the
\fBload-world\fP runtime system option. 

.TP
\fB-native \fI{\fBtrue\fP|\fBfalse\fP}\fP
Controls whether or not to use native code generation as opposed to
generating C and using \fBgcc\fP.  With native code generation,
\fBMLton\fP typically compiles more quickly and generates better
code.

.TP
\fB-output \fIfile\fR
Specify the name of the final output file.
The default name is the input file name with its suffix removed and an
appropriate suffix added.

.TP
\fB-profile \fI{\fBno\fP|\fBalloc\fP|\fBtime\fP}\fR
Produce an executable that will gather allocation or time profiling
information.  When such an executable is run, it will produce an
\fBmlmon.out\fP file.  The man page on \fBmlprof\fP describes how to
extract information from this file. 

.TP
\fB-profile-stack \fI{\fBfalse\fP|\fBtrue\fP}\fR
If true, the profiler will count the time spent (or bytes allocated)
while a function is on the stack.

.TP
\fB-safe \fI{\fBtrue\fP|\fBfalse\fP}\fR
This switch determines the value of the SML variable \fBMLton.safe\fP, which
controls whether the basis library performs array, string, and vector bounds
checks, division for zero checks, and other checks.  Compiling \fB-safe false\fP
changes the behavior of some programs, does not conform to the basis library
specification, and may cause programs to seg fault.

.TP
\fB-show-basis \fI{\fBfalse\fP|\fBtrue\fP}\fR
If true, the compiler shows the basis library and exits.

.TP
\fB-show-basis-used \fI{\fBfalse\fP|\fBtrue\fP}\fR
If true, then the compiler prints out the types, values, signatures,
structures, and functors from the basis library that the input program uses, and
then exits.

.TP
\fB-static \fI{\fBfalse\fP|\fBtrue\fP}\fR
If true, then produce a statically linked executable.  This option
only affects linking.

.TP
\fB-stop \fI{\fBf\fP|\fBg\fP|\fBo\fP|\fBsml\fP}\fR
Specify pass to stop at.
.in +.5i
\fBf\fP    list of files on stdout (only makes sense when input is \fBfoo.cm\fP)
.br
\fBg\fP    generated \fB.S\fP and \fB.c\fP files
.br
\fBo\fP    object file (\fI*\fB.o\fR).
.br
\fBsml\fP  SML file (only makes sense when input is \fBfoo.cm\fP)
.in -.5i
If you compile \fB-stop g\fP or \fB-stop o\fP, you can resume
compilation by running \fBMLton\fP on the generated \fB.c\fP and \fB.S\fP
or \fB.o\fP files.

.TP
\fB-target \fI{\fBself\fP|\fI...}\fR
Generate an executable that runs on the specified platform.  The
default is \fBself\fP, which means to compile for the machine that
\fBMLton\fP is running on.  To use any other target, you must first
install a cross compiler.  See the \fBMLton User Guide\fP for
details.

.TP
\fB-verbose\fP \fI{\fB0\fP|\fB1\fP|\fB2\fP|\fB3\fP}\fP
Be verbose about what passes are running.  The default is 0.
.in +.5i
\fB0\fP  silent
.br
\fB1\fP  calls to compiler, assembler, and linker
.br
\fB2\fP  1 + intermediate compiler passes
.br
\fB3\fP  2 + some data structure sizes
.in -.5i

.SH Runtime system options
To control the runtime system, executables produced by \fBMLton\fP take
several optional command line arguments before their usual arguments.
To use these options, the first argument to the executable must be
\fB@MLton\fP.  The optional arguments then follow, must be terminated
by \fB--\fP, and are followed by any arguments to the program.
The optional arguments are \fInot\fP made available to the SML
program via \fBCommandLine.arguments\fP.
.TP
\fBfixed-heap \fIn[\fBkm\fI]\fR
Use a fixed size heap of \fBn\fP bytes.
A trailing \fBk\fP means that \fBn\fP is in units of 1024 bytes.
A trailing \fBm\fP means that \fBn\fP is in units of 1,048,576 bytes.
If neither appears, then \fBn\fP is in bytes.
A value of \fB0\fP means to use almost all the RAM present on the machine.
.TP
\fBgc-messages\fP
Print a message at the start and end of every garbage collection.
.TP
\fBgc-summary\fP
Print a summary of garbage collection statistics upon program termination.
.TP
\fBload-world \fIworld\fR
Restart the computation with the file \fIworld\fP.
The \fIworld\fP file must have been created by a call to
\fBMLton.World.save\fP by the same executable.
.TP
\fBmax-heap \fIn[\fBkm\fI]\fR
Run the computation with an automatically resized heap that is never larger
than \fIn\fP.
The meaning of \fI[\fBkm\fI]\fR is the same as with the \fBfixed-heap\fP
option.
.TP
\fBram-slop \fIx\fR
Multiply \fBx\fP by the amount of RAM on the machine to obtain what
the runtime views as the amount of RAM it can use.

.SH "SEE ALSO"
.BR mlprof (1)
and the \fBMLton User Guide\fP.
