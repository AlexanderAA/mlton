.TH mlton 1 "January 13, 2003"
.SH NAME
\fBmlton\fP \- whole-program compiler for the Standard ML (SML) programming
language
.SH SYNOPSIS
\fBmlton\fP \fI[option ...] file\fB.\fP{\fBcm\fP|\fBsml\fP|\fBc\fP|\fBo\fP} 
[file\fB.\fP{\fBS\fP|\fBo\fP} ...] [library ...]\fR
.SH DESCRIPTION
.PP
Typical use of \fBMLton\fP is
.br
.EX
\fBmlton \fIxxx\fB.sml\fR
.EE
.br
which will produce the executable \fIxxx\fP.
\fBMLton\fP has no notion of separate compilation.
The program must be the entire program you wish to compile; however, it may
refer to signatures and structures defined in the SML basis library.

\fBMLton\fP's options allow you to control the name of the output file, the
verbosity of compile-time messages, and whether or not certain optimizations are
performed.  They also allow you to specify which intermediate files are saved
and to stop the compilation process early, at some intermediate pass, which case
compilation can be resumed by passing the resulting files to \fBMLton\fP.
\fBMLton\fP uses the input file suffix to determine the type of input program.
The possibilities are \fB.cm\fR, \fB.sml\fR, \fB.c\fR, \fB.S\fR, and \fB.o\fR.

For developing large programs spanning many files, \fBMLton\fP upports a
limited subset of SML/NJ Compilation Manager (CM) files.  From \fBMLton\fP's
point of view, a CM file \fBfoo.cm\fR defines a list of SML source files.  The
call \fBmlton foo.cm\fR is equivalent to compiling an SML program consisting of
the concatenation of these files.  As always with \fBMLton\fP, the concatenation
must be the whole program you wish to compile.  See the \fBMLton\fP user guide
for details.

For a usage message, run \fBMLton\fP with an invalid switch, e.g., \fBmlton
-z\fP.  In the explanation below and in the usage message, for flags that take a
boolean argument (\fI{\fBtrue\fI|\fBfalse\fI}\fR), the first value listed is the
default. For example, by default, overflow checking on is performed on integer
arithmetic.

.SH Compile-time options
.TP
\fB-detect-overflow \fI{\fBtrue\fI|\fBfalse\fI}\fR
This flag controls whether or not overflow checking is performed on integer
arithmetic.
.COM .TP
.COM !\fB-D\fIdefine\fR
.COM !Define a compile-time constant accessible via \fBMLton\fR's \fB_prim\fR
.COM !syntax.

.TP
\fB-exn-history \fI{\fBfalse\fI|\fBtrue\fI}\fR
Enable \fBExn.history\fP.  This has a performance impact, both in memory usage
of exceptions and in runtime, because of additional work that must be performed
at each exception construction, raise, and handle.

.TP
\fB-host \fI{\fBself\fP|\fI...}\fR
Generate an executable that runs on the specified host.  The default is
\fBself\fP, which means to compile for the machine that \fBMLton\fP is running
on.  To use any other host, you must first install a cross compiler.  See the
user guide for details.

.TP
\fB-ieee-fp \fI{\fBfalse\fP|\fBtrue\fP}\fR
Control whether or not the code generator is pedantic about following
the IEEE floating point standard.  By default, it is not, because of the
performance cost.
.COM .TP
.COM \fB-include \fIfile.h\fR
.COM Specify an additional \fB.h\fP file to be included for defining compile-time
.COM constants.  The file will be included with \fB#include <file.h>\fP.

.TP
\fB-inline \fIn\fR
Set the inlining threshold used in the optimizer.
The default is 320.
.COM .TP
.COM \fB-I\fIdir\fR
.COM Specify an additional directory to be searched for include files (included with
.COM \fB-i\fR).

.TP
\fB-keep \fI{\fBg\fP|\fBo\fP|\fBsml\fP}\fR
Save the intermediate files corresponding to the given arg.
If no \fB-keep\fP argument is given, then only the final file is saved.
.in +.5i
\fBg\fP    generated \fB.S\fP and \fB.c\fP files passed to gcc.
.br
\fBo\fP    object file (\fI*\fB.o\fR).
.br
\fBsml\fP  SML file.
.in -.5i

.TP
\fB-l\fIlib\fR
Specify an additional library to link with.
This switch is passed unchanged to the linker.

.TP
\fB-L\fIdir\fR
Specify an additional directory to be searched for libraries.
This switch is passed unchanged to the linker.

.TP
\fB-may-load-world \fI{\fBtrue\fP|\fBfalse\fP}\fP
Controls whether or not the generated executable supports the
\fB@MLton load-world\fP runtime system option. 

.TP
\fB-native \fI{\fBtrue\fP|\fBfalse\fP}\fP
Controls whether or not to use native code generation as opposed to
generating C and using \fBgcc\fP.  With native code generation,
\fBMLton\fP typically compiles more quickly and generates better
code.

.TP
\fB-o\fI file\fR
Specify the name of the final output file.
The default name is the input file name with its suffix removed and an
appropriate suffix added.

.TP
\fB-profile \fI{\fBno\fP|\fBalloc\fP|\fBtime\fP}\fR
Produce an executable that will gather allocation or time profiling
information.  When such an executable is run, it will produce an
\fBmlmon.out\fP file.  The man page on \fBmlprof\fP describes how to
extract information from this file. 

.TP
\fB-profile-combine \fI{\fBfalse\fP|\fBtrue\fP}\fR
When \fBtrue\fP, combine all copies of each function together for
profiling data and for the call graph.

.TP
\fB-profile-stack \fI{\fBfalse\fP|\fBtrue\fP}\fR
If true, the profiler will count the time spent (or bytes allocated)
while a function is on the stack.

.TP
\fB-safe \fI{\fBtrue\fP|\fBfalse\fP}\fR
This switch determines the value of the SML variable \fBMLton.safe\fP, which
controls whether the basis library performs array, string, and vector bounds
checks, division for zero checks, and other checks.  Compiling \fB-safe false\fP
changes the behavior of some programs, does not conform to the basis library
specification, and may cause programs to seg fault.

.TP
\fB-show-basis \fI{\fBfalse\fP|\fBtrue\fP}\fR
If true, the compiler shows the basis library and exits.

.TP
\fB-show-basis-used \fI{\fBfalse\fP|\fBtrue\fP}\fR
If true, then the compiler prints out the types, values, signatures,
structures, and functors from the basis library that the input program uses, and
then exits.

.TP
\fB-static \fI{\fBfalse\fP|\fBtrue\fP}\fR
If true, then produce a statically linked executable.  This option only affects
the linker.

.TP
\fB-stop \fI{\fBf\fP|\fBg\fP|\fBo\fP|\fBsml\fP}\fR
Specify pass to stop at.
.in +.5i
\fBf\fP    List of files on stdout.
.br
\fBg\fP    generated \fB.S\fP and \fB.c\fP files.
.br
\fBsml\fP  SML file.
.br
\fBo\fP    Object file (\fI*\fB.o\fR).
.in -.5i

.TP
\fB-v\fI[\fB0123\fI]\fR
Be verbose about what passes are running.  The default is 0.
.in +.5i
\fB0\fP  silent.
.br
\fB1\fP  calls to compiler, assembler, and linker.
.br
\fB2\fP  1 + intermediate compiler passes.
.br
\fB3\fP  2 + some data structure sizes.
.in -.5i
With no other arguments, \fBmlton -v\fP prints out the version number and build
information.  With \fB -v2\fP, it also prints the default settings of all
options.

.SH Runtime system options
To control the runtime system, executables produced by \fBMLton\fP take
several optional command line arguments before their usual arguments.
To use these options, the first argument to the executable must be
\fB@MLton\fP.  The optional arguments then follow, must be terminated
by \fB--\fP, and are followed by any arguments to the program.
The optional arguments are \fInot\fP made available to the SML
program via \fBCommandLine.arguments\fP.
.TP
\fBfixed-heap \fIn[\fBkm\fI]\fR
Use a fixed size heap of \fBn\fP bytes.
A trailing \fBk\fP means that \fBn\fP is in units of 1024 bytes.
A trailing \fBm\fP means that \fBn\fP is in units of 1,048,576 bytes.
If neither appears, then \fBn\fP is in bytes.
A value of \fB0\fP means to use almost all the RAM present on the machine.
.TP
\fBgc-messages\fP
Print a message at the start and end of every garbage collection.
.TP
\fBgc-summary\fP
Print a summary of garbage collection statistics upon program termination.
.TP
\fBload-world \fIworld\fR
Restart the computation with the file \fIworld\fP.
The \fIworld\fP file must have been created by a call to
\fBMLton.World.save\fP by the same executable.
.TP
\fBmax-heap \fIn[\fBkm\fI]\fR
Run the computation with an automatically resized heap that is never larger
than \fIn\fP.
The meaning of \fI[\fBkm\fI]\fR is the same as with the \fBfixed-heap\fP
option.
.TP
\fBram-slop \fIx\fR
Multiply \fBx\fP by the amount of RAM on the machine to obtain what
the runtime views as the amount of RAM it can use.

.SH "SEE ALSO"
.BR mlprof (1)
and the \fBMLton\fP user guide.
