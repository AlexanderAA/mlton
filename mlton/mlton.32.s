/* MLton g9a43e11 (built Sun Apr  5 22:29:53 NZST 2015 on xeon) */
/*   created this file on Sun Apr 05 23:16:44 2015. */
/* Do not edit this file. */
/* Flag settings:  */
/*    align: 8 */
/*    atMLtons: (mlton, @MLton, --) */
/*    chunk: chunk per function */
/*    closureConvertGlobalize: true */
/*    closureConvertShrink: true */
/*    codegen: amd64 */
/*    contifyIntoMain: false */
/*    debug: false */
/*    defaultChar: char8 */
/*    defaultWideChar: widechar32 */
/*    defaultInt: int32 */
/*    defaultReal: real64 */
/*    defaultWord: word32 */
/*    diag passes: [] */
/*    drop passes: [] */
/*    elaborate allowConstant (default): false */
/*    elaborate allowConstant (enabled): true */
/*    elaborate allowFFI (default): false */
/*    elaborate allowFFI (enabled): true */
/*    elaborate allowPrim (default): false */
/*    elaborate allowPrim (enabled): true */
/*    elaborate allowOverload (default): false */
/*    elaborate allowOverload (enabled): true */
/*    elaborate allowRebindEquals (default): false */
/*    elaborate allowRebindEquals (enabled): true */
/*    elaborate deadCode (default): false */
/*    elaborate deadCode (enabled): true */
/*    elaborate forceUsed (default): false */
/*    elaborate forceUsed (enabled): true */
/*    elaborate ffiStr (default):  */
/*    elaborate ffiStr (enabled): true */
/*    elaborate nonexhaustiveExnMatch (default): default */
/*    elaborate nonexhaustiveExnMatch (enabled): true */
/*    elaborate nonexhaustiveMatch (default): warn */
/*    elaborate nonexhaustiveMatch (enabled): true */
/*    elaborate redundantMatch (default): warn */
/*    elaborate redundantMatch (enabled): true */
/*    elaborate resolveScope (default): strdec */
/*    elaborate resolveScope (enabled): true */
/*    elaborate sequenceNonUnit (default): ignore */
/*    elaborate sequenceNonUnit (enabled): true */
/*    elaborate warnUnused (default): false */
/*    elaborate warnUnused (enabled): true */
/*    elaborate only: false */
/*    emit main: true */
/*    export header: None */
/*    exn history: false */
/*    generated output format: executable */
/*    gc check: Limit */
/*    indentation: 3 */
/*    inlineIntoMain: true */
/*    inlineLeafA: {loops = true, repeat = true, size = Some 20} */
/*    inlineLeafB: {loops = true, repeat = true, size = Some 40} */
/*    inlineNonRec: {small = 60, product = 320} */
/*    input file: mlton */
/*    keep CoreML: false */
/*    keep def use: true */
/*    keep dot: false */
/*    keep Machine: false */
/*    keep passes: [] */
/*    keep RSSA: false */
/*    keep SSA: false */
/*    keep SSA2: false */
/*    keep SXML: false */
/*    keep XML: false */
/*    extra_: false */
/*    lib dir: /home/a/Projects/mlton/build/lib */
/*    lib target dir: /home/a/Projects/mlton/build/lib/targets/unknown */
/*    loop passes: 1 */
/*    mark cards: true */
/*    max function size: 10000 */
/*    mlb path vars: [{var = MLTON_ROOT, path = $(LIB_MLTON_DIR)/sml}, {var = SML_LIB, path = $(LIB_MLTON_DIR)/sml}] */
/*    native commented: 0 */
/*    native live stack: false */
/*    native optimize: 1 */
/*    native move hoist: true */
/*    native copy prop: true */
/*    native copy prop cutoff: 1000 */
/*    native cutoff: 100 */
/*    native live transfer: 8 */
/*    native shuffle: true */
/*    native ieee fp: false */
/*    native split: Some 20000 */
/*    optimizationPasses: [<ssa2::default>, <ssa::default>, <sxml::default>, <xml::default>] */
/*    polyvariance: Some {hofo = true, rounds = 2, small = 30, product = 300} */
/*    prefer abs paths: false */
/*    prof passes: [] */
/*    profile: None */
/*    profile branch: false */
/*    profile C: [] */
/*    profile IL: ProfileSource */
/*    profile include/exclude: [(Seq [Star [.], Or [Seq [Seq [[$], [(], [S], [M], [L], [_], [L], [I], [B], [)]]]], Star [.]], false)] */
/*    profile raise: false */
/*    profile stack: false */
/*    profile val: false */
/*    show basis: None */
/*    show def-use: None */
/*    show types: true */
/*    target: unknown */
/*    target arch: AMD64 */
/*    target OS: OpenBSD */
/*    type check: false */
/*    verbosity: Silent */
/*    warn unrecognized annotation: true */
/*    warn deprecated features: true */
/*    zone cut depth: 100 */
.text
.p2align 0x4
.globl x_1521
.hidden x_1521
x_1521:
L_102905:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_102906
L_102956:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_102957+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_102957
.p2align 0x4
.long 0x460
L_102957:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
L_102906:
	movq 0x8(%rbp),%r15
	movq 0x8(%r15),%r14
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0x1EA5,%r15
	je L_416460
	cmpq $0x1EA6,%r15
	je L_416455
	cmpq $0x1EA7,%r15
	je L_416450
L_102907:
	movq 0x8(%r14),%r15
	movq 0x0(%r14),%r13
	movq %r13,%r14
	movq 0x0(%rbp),%r11
	andq %r11,%r14
	andq $0x1,%r14
	jz L_416448
L_102908:
	cmpq %r13,%r11
	jl L_416447
	movq %r15,%r14
L_102910:
	movq %r14,%r15
	movq 0x0(%rbp),%r13
	andq %r13,%r15
	andq $0x1,%r15
	jz L_416446
L_102911:
	cmpq %r13,%r14
	setl %al
	movzbl %al,%eax
	movl %eax,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416446:
L_102912:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r14,%rsi
	movq %r13,%rdi
	xorq %rax,%rax
	call IntInf_compare
L_102913:
	cmpl $0x0,%eax
	setg %al
	movzbl %al,%eax
	movl %eax,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416447:
L_102915:
	movl $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416448:
L_102916:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r13,%rsi
	movq %r11,%rdi
	xorq %rax,%rax
	call IntInf_compare
L_102917:
	cmpl $0x0,%eax
	jl L_102915
	movq %r15,%r14
	jmp L_102910
.p2align 0x4
L_416450:
L_102944:
	movq 0x8(%r14),%r15
	movq 0x0(%r14),%r13
	movq %r13,%r14
	movq 0x0(%rbp),%r11
	andq %r11,%r14
	andq $0x1,%r14
	jz L_416453
L_102945:
	cmpq %r13,%r11
	jl L_102915
	movq %r15,%r14
L_102947:
	movq %r14,%r15
	movq 0x0(%rbp),%r13
	andq %r13,%r15
	andq $0x1,%r15
	jz L_416451
L_102948:
	cmpq %r13,%r14
	setl %al
	movzbl %al,%eax
	movl %eax,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416451:
L_102949:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r14,%rsi
	movq %r13,%rdi
	xorq %rax,%rax
	call IntInf_compare
L_102950:
	cmpl $0x0,%eax
	setg %al
	movzbl %al,%eax
	movl %eax,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416453:
L_102952:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r13,%rsi
	movq %r11,%rdi
	xorq %rax,%rax
	call IntInf_compare
L_102953:
	cmpl $0x0,%eax
	jl L_102915
	movq %r15,%r14
	jmp L_102947
.p2align 0x4
L_416455:
L_102932:
	movq 0x8(%r14),%r15
	movq 0x0(%r14),%r13
	movq %r13,%r14
	movq 0x0(%rbp),%r11
	andq %r11,%r14
	andq $0x1,%r14
	jz L_416458
L_102933:
	cmpq %r13,%r11
	jl L_102915
	movq %r15,%r14
L_102935:
	movq %r14,%r15
	movq 0x0(%rbp),%r13
	andq %r13,%r15
	andq $0x1,%r15
	jz L_416456
L_102936:
	cmpq %r13,%r14
	setl %al
	movzbl %al,%eax
	movl %eax,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416456:
L_102937:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r14,%rsi
	movq %r13,%rdi
	xorq %rax,%rax
	call IntInf_compare
L_102938:
	cmpl $0x0,%eax
	setg %al
	movzbl %al,%eax
	movl %eax,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416458:
L_102940:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r13,%rsi
	movq %r11,%rdi
	xorq %rax,%rax
	call IntInf_compare
L_102941:
	cmpl $0x0,%eax
	jl L_102915
	movq %r15,%r14
	jmp L_102935
.p2align 0x4
L_416460:
L_102920:
	movq 0x8(%r14),%r15
	movq 0x0(%r14),%r13
	movq 0x0(%rbp),%r11
	movq %r11,%r14
	andq %r13,%r14
	andq $0x1,%r14
	jz L_416463
L_102921:
	cmpq %r13,%r11
	jl L_102915
	movq %r15,%r14
L_102923:
	movq %r14,%r15
	movq 0x0(%rbp),%r13
	andq %r13,%r15
	andq $0x1,%r15
	jz L_416461
L_102924:
	cmpq %r13,%r14
	setl %al
	movzbl %al,%eax
	movl %eax,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416461:
L_102925:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r14,%rsi
	movq %r13,%rdi
	xorq %rax,%rax
	call IntInf_compare
L_102926:
	cmpl $0x0,%eax
	setg %al
	movzbl %al,%eax
	movl %eax,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416463:
L_102928:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r13,%rsi
	movq %r11,%rdi
	xorq %rax,%rax
	call IntInf_compare
L_102929:
	cmpl $0x0,%eax
	jl L_102915
	movq %r15,%r14
	jmp L_102923
.text
.p2align 0x4
.globl x_1532
.hidden x_1532
x_1532:
L_102958:
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_103024
L_102959:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_416492
L_102960:
	movq 0x8(%rbp),%r15
	movq 0x30(%r15),%r14
	movq %r14,0x10(%rbp)
	movq 0x38(%r15),%r14
	movsd 0x10(%r15),%xmm15
	movsd 0x0(%rbp),%xmm14
	ucomisd %xmm14,%xmm14
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jz L_416491
L_102962:
	movd %xmm14,%r15
	movq 0x10(%r14),%r13
	andq %r13,%r15
	cmpq %r13,%r15
	sete %al
	movzbl %al,%eax
	movl %eax,0x8(%rbp)
	movq $0x7FFFFFFFFFFFFFFF,%r15
	movd %r15,%xmm13
	andpd %xmm14,%xmm13
	movsd (globalReal64+0x0)(%rip),%xmm14
	ucomisd %xmm13,%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416490
L_102963:
	ucomisd %xmm14,%xmm13
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416489
L_102964:
	ucomisd %xmm14,%xmm13
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416488
L_102965:
	xorb %dl,%dl
	movsd %xmm13,%xmm6
	movsd %xmm15,%xmm7
L_102966:
	cmpb $0x2,%dl
	je L_416487
L_102967:
	movsd (globalReal64+0x8)(%rip),%xmm15
	ucomisd %xmm6,%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416486
L_102968:
	ucomisd %xmm15,%xmm6
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416485
L_102969:
	ucomisd %xmm15,%xmm6
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416484
L_102970:
	xorb %dl,%dl
L_102971:
	cmpb $0x2,%dl
	je L_416483
L_102972:
	ucomisd %xmm6,%xmm7
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416482
L_102973:
	ucomisd %xmm7,%xmm6
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416481
L_102974:
	ucomisd %xmm7,%xmm6
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416480
L_102975:
	xorb %dl,%dl
L_102976:
	cmpb $0x2,%dl
	je L_416479
L_102977:
	movq 0x10(%rbp),%r15
	movsd 0x0(%r15),%xmm15
	movq 0x18(%r15),%r14
	movq 0x8(%r14),%r13
	movd %xmm6,%r11
	movq 0x0(%r14),%r10
	movq %r10,%r9
	andq %r11,%r9
	cmpq %r10,%r9
	je L_416477
L_102978:
	testq %r9,%r9
	jnz L_102980
L_103006:
	andq %r13,%r11
	jnz L_416470
L_103008:
	xorl %ecx,%ecx
	movsd %xmm6,%xmm7
L_102988:
	movsd (globalReal64+0x10)(%rip),%xmm15
	ucomisd %xmm7,%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416469
L_102989:
	ucomisd %xmm15,%xmm7
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416468
L_102990:
	ucomisd %xmm7,%xmm15
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416467
L_102991:
	xorb %dl,%dl
L_102992:
	cmpb $0x2,%dl
	jne L_416466
L_102994:
	movq $0x284D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movl %ecx,0x0(%r15)
	addq $0x10,%r12
	movl 0x8(%rbp),%r14d
	movl %r14d,0x4(%r15)
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416466:
L_102993:
	movq $0x3,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416467:
L_102995:
	movb $0x2,%dl
	jmp L_102992
.p2align 0x4
L_416468:
L_102996:
	movb $0x1,%dl
	jmp L_102992
.p2align 0x4
L_416469:
L_102997:
	movb $0x3,%dl
	jmp L_102992
.p2align 0x4
L_416470:
L_102980:
	movl (gcState+0x44)(%rip),%r15d
	incl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	movq 0x10(%rbp),%r14
	movl 0x8(%r14),%r13d
	movl %r13d,0xC(%rbp)
	testl %r13d,%r13d
	jnz L_416474
L_102981:
	movl $0x1,0x8(%r14)
	testl %r15d,%r15d
	jz L_416473
L_102982:
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	movq (globalObjptr+0x19E8)(%rip),%r15
	movq %r15,0x18(%rbp)
L_102983:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x18(%rbp),%rdi
	movsd %xmm6,%xmm15
	movsd %xmm6,(localReal64+0x8)(%rip)
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	addq $0x28,%rbp
	leaq (L_102984+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Real64_frexp
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	movsd %xmm0,(cReturnTemp+0x0)(%rip)
	jmp L_102984
.p2align 0x4
.long 0x2C
L_102984:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movsd (cReturnTemp+0x0)(%rip),%xmm15
	movsd %xmm15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_102985
L_102999:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_103000+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103000
.p2align 0x4
.long 0x45F
L_103000:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_102985:
	movq 0x18(%rbp),%r15
	movl 0x0(%r15),%ecx
	movl 0xC(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_102987
L_102986:
	movq 0x10(%rbp),%r15
	movl $0x0,0x8(%r15)
L_102987:
	movsd 0x20(%rbp),%xmm15
	movsd %xmm15,%xmm7
	jmp L_102988
.p2align 0x4
L_416473:
L_103002:
	movq (globalObjptr+0x740)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416474:
L_103003:
	testl %r15d,%r15d
	jz L_103002
L_103004:
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	movq $0x4B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movl $0x0,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq %r15,0x18(%rbp)
	jmp L_102983
.p2align 0x4
L_416477:
L_103009:
	andq %r13,%r11
	jz L_416478
L_103010:
	xorl %ecx,%ecx
	movsd %xmm15,%xmm7
	jmp L_102988
.p2align 0x4
L_416478:
L_103011:
	xorl %ecx,%ecx
	movsd %xmm6,%xmm7
	jmp L_102988
.p2align 0x4
L_416479:
L_103012:
	movq $0x5,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416480:
L_103013:
	movb $0x2,%dl
	jmp L_102976
.p2align 0x4
L_416481:
L_103014:
	movb $0x1,%dl
	jmp L_102976
.p2align 0x4
L_416482:
L_103015:
	movb $0x3,%dl
	jmp L_102976
.p2align 0x4
L_416483:
L_103016:
	movl 0x8(%rbp),%r15d
	shlq $0x3,%r15
	orq $0x6,%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416484:
L_103017:
	movb $0x2,%dl
	jmp L_102971
.p2align 0x4
L_416485:
L_103018:
	movb $0x1,%dl
	jmp L_102971
.p2align 0x4
L_416486:
L_103019:
	movb $0x3,%dl
	jmp L_102971
.p2align 0x4
L_416487:
L_103020:
	movq $0x2,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416488:
L_103021:
	movb $0x2,%dl
	movsd %xmm13,%xmm6
	movsd %xmm15,%xmm7
	jmp L_102966
.p2align 0x4
L_416489:
L_103022:
	movb $0x1,%dl
	movsd %xmm13,%xmm6
	movsd %xmm15,%xmm7
	jmp L_102966
.p2align 0x4
L_416490:
L_103023:
	movb $0x3,%dl
	movsd %xmm13,%xmm6
	movsd %xmm15,%xmm7
	jmp L_102966
.p2align 0x4
L_416491:
L_102961:
	movq $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416492:
L_103024:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_103025+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103025
.p2align 0x4
.long 0x495
L_103025:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	jmp L_102960
.text
.p2align 0x4
.globl x_1533
.hidden x_1533
x_1533:
L_103026:
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_103092
L_103027:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_416520
L_103028:
	movq 0x8(%rbp),%r15
	movq 0x20(%r15),%r14
	movq %r14,0x10(%rbp)
	movq 0x28(%r15),%r14
	movss 0x18(%r15),%xmm15
	movss 0x0(%rbp),%xmm14
	ucomiss %xmm14,%xmm14
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jz L_416519
L_103030:
	movd %xmm14,%r15d
	movl 0xC(%r14),%r13d
	andl %r13d,%r15d
	cmpl %r15d,%r13d
	sete %al
	movzbl %al,%eax
	movl %eax,0x4(%rbp)
	movl $0x7FFFFFFF,%r15d
	movd %r15d,%xmm13
	andps %xmm14,%xmm13
	movss (globalReal32+0x0)(%rip),%xmm14
	ucomiss %xmm13,%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416518
L_103031:
	ucomiss %xmm14,%xmm13
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416517
L_103032:
	ucomiss %xmm14,%xmm13
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416516
L_103033:
	xorb %dl,%dl
	movss %xmm13,%xmm6
	movss %xmm15,%xmm7
L_103034:
	cmpb $0x2,%dl
	je L_416515
L_103035:
	movss (globalReal32+0x4)(%rip),%xmm15
	ucomiss %xmm6,%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416514
L_103036:
	ucomiss %xmm15,%xmm6
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416513
L_103037:
	ucomiss %xmm15,%xmm6
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416512
L_103038:
	xorb %dl,%dl
L_103039:
	cmpb $0x2,%dl
	je L_416511
L_103040:
	ucomiss %xmm6,%xmm7
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416510
L_103041:
	ucomiss %xmm7,%xmm6
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416509
L_103042:
	ucomiss %xmm6,%xmm7
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416508
L_103043:
	xorb %dl,%dl
L_103044:
	cmpb $0x2,%dl
	je L_416507
L_103045:
	movq 0x10(%rbp),%r15
	movss 0x0(%r15),%xmm15
	movq 0x10(%r15),%r14
	movl 0x4(%r14),%ecx
	movd %xmm6,%r13d
	movl %r13d,%r11d
	movl 0x0(%r14),%r10d
	andl %r10d,%r11d
	cmpl %r10d,%r11d
	je L_416505
L_103046:
	testl %r11d,%r11d
	jnz L_103048
L_103074:
	andl %ecx,%r13d
	jnz L_416498
L_103076:
	xorl %ecx,%ecx
	movss %xmm6,%xmm7
L_103056:
	movss (globalReal32+0x8)(%rip),%xmm15
	ucomiss %xmm7,%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416497
L_103057:
	ucomiss %xmm15,%xmm7
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416496
L_103058:
	ucomiss %xmm7,%xmm15
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416495
L_103059:
	xorb %dl,%dl
L_103060:
	cmpb $0x2,%dl
	jne L_416494
L_103062:
	movq $0x284D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movl %ecx,0x0(%r15)
	addq $0x10,%r12
	movl 0x4(%rbp),%r14d
	movl %r14d,0x4(%r15)
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416494:
L_103061:
	movq $0x3,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416495:
L_103063:
	movb $0x2,%dl
	jmp L_103060
.p2align 0x4
L_416496:
L_103064:
	movb $0x1,%dl
	jmp L_103060
.p2align 0x4
L_416497:
L_103065:
	movb $0x3,%dl
	jmp L_103060
.p2align 0x4
L_416498:
L_103048:
	movl (gcState+0x44)(%rip),%r15d
	incl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	movq 0x10(%rbp),%r14
	movl 0x4(%r14),%r13d
	movl %r13d,0x8(%rbp)
	testl %r13d,%r13d
	jnz L_416502
L_103049:
	movl $0x1,0x4(%r14)
	testl %r15d,%r15d
	jz L_416501
L_103050:
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	movq (globalObjptr+0x19E0)(%rip),%r15
	movq %r15,0x18(%rbp)
L_103051:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x18(%rbp),%rdi
	movss %xmm6,%xmm15
	movss %xmm6,(localReal32+0x4)(%rip)
	movss %xmm15,%xmm0
	movq $0x1,%rax
	addq $0x28,%rbp
	leaq (L_103052+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Real32_frexp
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	movss %xmm0,(cReturnTemp+0x0)(%rip)
	jmp L_103052
.p2align 0x4
.long 0x2C
L_103052:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movss (cReturnTemp+0x0)(%rip),%xmm15
	movss %xmm15,0xC(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_103053
L_103067:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_103068+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103068
.p2align 0x4
.long 0x2C
L_103068:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_103053:
	movq 0x18(%rbp),%r15
	movl 0x0(%r15),%ecx
	movl 0x8(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_103055
L_103054:
	movq 0x10(%rbp),%r15
	movl $0x0,0x4(%r15)
L_103055:
	movss 0xC(%rbp),%xmm15
	movss %xmm15,%xmm7
	jmp L_103056
.p2align 0x4
L_416501:
L_103070:
	movq (globalObjptr+0x740)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416502:
L_103071:
	testl %r15d,%r15d
	jz L_103070
L_103072:
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	movq $0x4B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movl $0x0,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq %r15,0x18(%rbp)
	jmp L_103051
.p2align 0x4
L_416505:
L_103077:
	andl %ecx,%r13d
	jz L_416506
L_103078:
	xorl %ecx,%ecx
	movss %xmm15,%xmm7
	jmp L_103056
.p2align 0x4
L_416506:
L_103079:
	xorl %ecx,%ecx
	movss %xmm6,%xmm7
	jmp L_103056
.p2align 0x4
L_416507:
L_103080:
	movq $0x5,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416508:
L_103081:
	movb $0x2,%dl
	jmp L_103044
.p2align 0x4
L_416509:
L_103082:
	movb $0x1,%dl
	jmp L_103044
.p2align 0x4
L_416510:
L_103083:
	movb $0x3,%dl
	jmp L_103044
.p2align 0x4
L_416511:
L_103084:
	movl 0x4(%rbp),%r15d
	shlq $0x3,%r15
	orq $0x6,%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416512:
L_103085:
	movb $0x2,%dl
	jmp L_103039
.p2align 0x4
L_416513:
L_103086:
	movb $0x1,%dl
	jmp L_103039
.p2align 0x4
L_416514:
L_103087:
	movb $0x3,%dl
	jmp L_103039
.p2align 0x4
L_416515:
L_103088:
	movq $0x2,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416516:
L_103089:
	movb $0x2,%dl
	movss %xmm13,%xmm6
	movss %xmm15,%xmm7
	jmp L_103034
.p2align 0x4
L_416517:
L_103090:
	movb $0x1,%dl
	movss %xmm13,%xmm6
	movss %xmm15,%xmm7
	jmp L_103034
.p2align 0x4
L_416518:
L_103091:
	movb $0x3,%dl
	movss %xmm13,%xmm6
	movss %xmm15,%xmm7
	jmp L_103034
.p2align 0x4
L_416519:
L_103029:
	movq $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416520:
L_103092:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_103093+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103093
.p2align 0x4
.long 0x495
L_103093:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	jmp L_103028
.text
.p2align 0x4
.globl x_1534
.hidden x_1534
x_1534:
L_103094:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_103095
L_103164:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_103165+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103165
.p2align 0x4
.long 0x4E9
L_103165:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_103095:
	movq 0x10(%rbp),%r14
	movl 0x4(%r14),%r13d
	movl %r13d,0x4(%rbp)
	movq 0x8(%r14),%r13
	movq %r13,0x18(%rbp)
	movl 0x0(%r14),%r13d
	movl %r13d,0x20(%rbp)
	movl 0x0(%rbp),%r14d
	cmpl %r14d,%r13d
	jb L_416529
L_103096:
	testl %r14d,%r14d
	jz L_416528
L_103097:
	movq 0x8(%rbp),%r15
	andq $0x1,%r15
	jz L_416526
L_103098:
	movq $0x1,%r15
L_103099:
	movl 0x0(%rbp),%r14d
	shrl $0x6,%r14d
	movslq %r14d,%r13
	subq %r13,%r15
	jo L_416525
L_103101:
	cmpq $0x0,%r15
	jng L_416524
L_103110:
L_103103:
	movq 0x18(%rbp),%r14
	movq 0x8(%r14),%rsi
	movq %rsi,%r13
	movq %rsi,%r11
	movq 0x0(%r14),%r10
	imulq %r15,%r13
	addq $0x7,%r10
	addq %r10,%r11
	addq %r11,%rsi
	addq %r13,%rsi
	movq %rsi,%r15
	movq %rsi,0x10(%rbp)
	addq $0x0,%r15
	jc L_416523
L_103105:
	movq (gcState+0x458)(%rip),%r14
	subq %r12,%r14
	cmpq %r15,%r14
	jnb L_103106
L_103108:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r14d
	movl %r14d,%edx
	movq %r15,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_103109+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103109
.p2align 0x4
.long 0x8E7
L_103109:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_103106:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x10(%rbp),%rdx
	movl 0x0(%rbp),%esi
	movq 0x8(%rbp),%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call IntInf_arshift
L_103107:
	movq %rax,0x0(%rbp)
	movq (gcState+0x0)(%rip),%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416523:
L_103104:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	call MLton_heapCheckTooLarge
.p2align 0x4
L_416524:
L_103102:
	xorq %r15,%r15
	jmp L_103103
.p2align 0x4
L_416525:
L_103100:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416526:
L_103111:
	movq 0x8(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	decq %r15
	jo L_103100
L_103112:
	jmp L_103099
.p2align 0x4
L_416528:
L_103113:
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416529:
L_103114:
	cmpl $0x0,0x4(%rbp)
	sete %al
	movzbl %al,%eax
	movl %eax,0x10(%rbp)
	je L_416551
L_103115:
	movq 0x8(%rbp),%r15
	andq $0x1,%r15
	jz L_416549
L_103116:
	movq $0x1,%r15
L_103117:
	movl 0x4(%rbp),%r14d
	shrl $0x6,%r14d
	movslq %r14d,%r13
	subq %r13,%r15
	jo L_103100
L_103118:
	cmpq $0x0,%r15
	jng L_416547
L_103160:
L_103120:
	movq 0x18(%rbp),%r14
	movq 0x8(%r14),%rsi
	movq %rsi,%r13
	movq %rsi,%r11
	movq 0x0(%r14),%r10
	imulq %r15,%r13
	addq $0x7,%r10
	addq %r10,%r11
	addq %r11,%rsi
	addq %rsi,%r13
	movq %r13,%rsi
	movq %r13,0x28(%rbp)
	addq $0x0,%rsi
	jc L_103104
L_103121:
	movq (gcState+0x458)(%rip),%r15
	subq %r12,%r15
	cmpq %rsi,%r15
	jnb L_103122
L_103158:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_103159+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103159
.p2align 0x4
.long 0x494
L_103159:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_103122:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x28(%rbp),%rdx
	movl 0x4(%rbp),%esi
	movq 0x8(%rbp),%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call IntInf_arshift
L_103123:
	movq (gcState+0x0)(%rip),%r12
	movq %rax,%r15
L_103124:
	movq %r15,0x28(%rbp)
	movl 0x0(%rbp),%r15d
	subl 0x20(%rbp),%r15d
	movl %r15d,0x8(%rbp)
.p2align 0x4,,0x7
loop_1122:
	movl 0x8(%rbp),%r14d
	cmpl %r14d,0x20(%rbp)
	jnb L_416537
L_103141:
	movl 0x10(%rbp),%r14d
	testl %r14d,%r14d
	jnz L_416536
L_103142:
	movq 0x28(%rbp),%r15
	andq $0x1,%r15
	jz L_416534
L_103143:
	movq $0x1,%r15
L_103144:
	movl 0x4(%rbp),%r14d
	shrl $0x6,%r14d
	movslq %r14d,%r13
	subq %r13,%r15
	jo L_103100
L_103145:
	cmpq $0x0,%r15
	jng L_416532
L_103154:
L_103147:
	movq 0x18(%rbp),%r14
	movq 0x0(%r14),%r13
	movq 0x8(%r14),%r11
	imulq %r11,%r15
	movq %r11,%r10
	addq $0x7,%r13
	addq %r13,%r10
	addq %r10,%r11
	addq %r15,%r11
	movq %r11,0x30(%rbp)
	addq $0x0,%r11
	jc L_103104
L_103148:
	movq (gcState+0x458)(%rip),%r15
	subq %r12,%r15
	cmpq %r11,%r15
	jb L_416530
.p2align 0x4,,0x7
L_103149:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x30(%rbp),%rdx
	movl 0x4(%rbp),%esi
	movq 0x28(%rbp),%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call IntInf_arshift
L_103150:
	movq (gcState+0x0)(%rip),%r12
	movq %rax,%r15
L_103151:
	movq %r15,0x28(%rbp)
	movl 0x20(%rbp),%r15d
	subl %r15d,0x8(%rbp)
	jmp loop_1122
.p2align 0x4
L_416530:
L_103152:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	movq %r11,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_103153+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103153
.p2align 0x4
.long 0x8E8
L_103153:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	jmp L_103149
.p2align 0x4
L_416532:
L_103146:
	xorq %r15,%r15
	jmp L_103147
.p2align 0x4
L_416534:
L_103155:
	movq 0x28(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	decq %r15
	jo L_103100
L_103156:
	jmp L_103144
.p2align 0x4
L_416536:
L_103157:
	movq 0x28(%rbp),%r15
	jmp L_103151
.p2align 0x4
L_416537:
L_103125:
	movl 0x8(%rbp),%r14d
	testl %r14d,%r14d
	jz L_416544
L_103126:
	movq 0x28(%rbp),%r15
	andq $0x1,%r15
	jz L_416542
L_103127:
	movq $0x1,%r15
L_103128:
	movl 0x8(%rbp),%r14d
	shrl $0x6,%r14d
	movslq %r14d,%r13
	subq %r13,%r15
	jo L_103100
L_103129:
	cmpq $0x0,%r15
	jng L_416540
L_103137:
L_103131:
	movq 0x18(%rbp),%r14
	movq 0x0(%r14),%r13
	movq 0x8(%r14),%r11
	imulq %r11,%r15
	addq $0x7,%r13
	addq %r11,%r13
	addq %r11,%r13
	addq %r13,%r15
	movq %r15,%rsi
	movq %r15,0x10(%rbp)
	addq $0x0,%rsi
	jc L_103104
L_103132:
	movq (gcState+0x458)(%rip),%r15
	subq %r12,%r15
	cmpq %rsi,%r15
	jnb L_103133
L_103135:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_103136+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103136
.p2align 0x4
.long 0x505
L_103136:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_103133:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x10(%rbp),%rdx
	movl 0x8(%rbp),%esi
	movq 0x28(%rbp),%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call IntInf_arshift
L_103134:
	movq %rax,0x0(%rbp)
	movq (gcState+0x0)(%rip),%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416540:
L_103130:
	xorq %r15,%r15
	jmp L_103131
.p2align 0x4
L_416542:
L_103138:
	movq 0x28(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	decq %r15
	jo L_103100
L_103139:
	jmp L_103128
.p2align 0x4
L_416544:
L_103140:
	movq 0x28(%rbp),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416547:
L_103119:
	xorq %r15,%r15
	jmp L_103120
.p2align 0x4
L_416549:
L_103161:
	movq 0x8(%rbp),%r13
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r15
	decq %r15
	jo L_103100
L_103162:
	jmp L_103117
.p2align 0x4
L_416551:
L_103163:
	movq 0x8(%rbp),%r15
	jmp L_103124
.text
.p2align 0x4
.globl intInfBinary_21
.hidden intInfBinary_21
intInfBinary_21:
L_103166:
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_103306
L_103167:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_416553
L_103168:
	movq $0x2D5,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x68(%rbp)
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x8(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r14,0x78(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x80(%rbp)
	addq $0x78,%rbp
	leaq (L_103169+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1521
.p2align 0x4
L_416553:
L_103306:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_103307+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103307
.p2align 0x4
.long 0x805
L_103307:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	jmp L_103168
.p2align 0x4
.long 0x660
L_103169:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movl 0x78(%rbp),%r15d
	movl %r15d,0x70(%rbp)
	testl %r15d,%r15d
	jnz L_416555
L_103170:
	movq 0x0(%rbp),%r15
	movq %r15,0x78(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x80(%rbp)
	addq $0x78,%rbp
	leaq (L_103171+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1521
.p2align 0x4
L_416555:
L_103174:
	movq $0x2,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x660
L_103171:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movl 0x78(%rbp),%r15d
	movl %r15d,0x70(%rbp)
	testl %r15d,%r15d
	jnz L_103174
L_103172:
	movq 0x60(%rbp),%r15
	movq %r15,%r14
	andq $0xFF,%r14
	cmpq $0x1D,%r14
	je L_416590
	cmpq $0x1E,%r14
	je L_416581
	cmpq $0x23,%r14
	je L_416579
	cmpq $0x26,%r14
	je L_416578
	cmpq $0x2A,%r14
	je L_416569
	cmpq $0x2B,%r14
	je L_416568
	cmpq $0x2D,%r14
	je L_416567
	cmpq $0x2E,%r14
	je L_416566
	cmpq $0x33,%r14
	je L_416557
L_103173:
	andq $0x3,%r15
	jnz L_103174
L_103175:
	jmp L_103174
.p2align 0x4
L_416557:
L_103279:
	movq 0x8(%rbp),%r14
	movq %r14,%r13
	movq 0x0(%rbp),%r11
	andq %r11,%r13
	andq $0x1,%r13
	jz L_416558
L_103280:
	xorq %r11,%r14
	orq $0x1,%r14
	movq %r14,0x58(%rbp)
intInf_4:
	movq 0x58(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x68,%rbp
	leaq (L_103281+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1521
.p2align 0x4
L_416558:
L_103287:
	andq $0x1,%r14
	jz L_416564
L_103288:
	movq $0x1,%r14
	xchgq %r14,%r15
L_103289:
	movq 0x0(%rbp),%r14
	andq $0x1,%r14
	jz L_416562
L_103290:
	movq $0x1,%r14
L_103291:
	cmpq %r14,%r15
	jnl L_103293
L_103299:
	movq %r14,%r15
L_103293:
	movq 0x30(%rbp),%r14
	movq 0x8(%r14),%rsi
	movq %rsi,%r13
	movq 0x0(%r14),%r11
	imulq %r15,%r13
	addq $0x7,%r11
	addq %r11,%rsi
	addq %rsi,%r13
	movq %r13,%rsi
	movq %r13,0x10(%rbp)
	addq $0x0,%rsi
	jc L_416560
L_103294:
	movq (gcState+0x458)(%rip),%r15
	subq %r12,%r15
	cmpq %rsi,%r15
	jnb L_103295
L_103297:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_103298+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103298
.p2align 0x4
.long 0x14B4
L_103298:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_103295:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x10(%rbp),%rdx
	movq 0x0(%rbp),%rsi
	movq 0x8(%rbp),%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call IntInf_xorb
L_103296:
	movq %rax,0x58(%rbp)
	movq (gcState+0x0)(%rip),%r12
	jmp intInf_4
.p2align 0x4
L_416560:
L_103199:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	call MLton_heapCheckTooLarge
.p2align 0x4
L_416562:
L_103300:
	movq 0x0(%rbp),%r13
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r14
	decq %r14
	jo L_416563
L_103301:
	jmp L_103291
.p2align 0x4
L_416563:
L_103207:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416564:
L_103302:
	movq 0x8(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r13
	decq %r13
	jo L_103207
L_103303:
	xchgq %r13,%r15
	jmp L_103289
.p2align 0x4
L_416566:
L_103271:
	movq 0x0(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x60,%rbp
	leaq (L_103272+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1186
.p2align 0x4
L_416567:
L_103263:
	movq 0x0(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x60,%rbp
	leaq (L_103264+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigRem_0
.p2align 0x4
L_416568:
L_103255:
	movq 0x0(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x60,%rbp
	leaq (L_103256+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigQuot_0
.p2align 0x4
L_416569:
L_103230:
	movq 0x8(%rbp),%r14
	movq %r14,%r13
	movq 0x0(%rbp),%r11
	andq %r11,%r13
	andq $0x1,%r13
	jz L_416570
L_103231:
	orq %r11,%r14
	orq $0x1,%r14
	movq %r14,0x58(%rbp)
intInf_3:
	movq 0x58(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x68,%rbp
	leaq (L_103232+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1521
.p2align 0x4
L_416570:
L_103238:
	andq $0x1,%r14
	jz L_416576
L_103239:
	movq $0x1,%r14
	xchgq %r14,%r15
L_103240:
	movq 0x0(%rbp),%r14
	andq $0x1,%r14
	jz L_416574
L_103241:
	movq $0x1,%r14
L_103242:
	cmpq %r14,%r15
	jnl L_103244
L_103250:
	movq %r14,%r15
L_103244:
	movq 0x40(%rbp),%r14
	movq 0x8(%r14),%rsi
	movq %rsi,%r13
	movq 0x0(%r14),%r11
	imulq %r15,%r13
	addq $0x7,%r11
	addq %r11,%rsi
	addq %r13,%rsi
	movq %rsi,%r15
	movq %rsi,0x10(%rbp)
	addq $0x0,%r15
	jc L_103199
L_103245:
	movq (gcState+0x458)(%rip),%r14
	subq %r12,%r14
	cmpq %r15,%r14
	jnb L_103246
L_103248:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r14d
	movl %r14d,%edx
	movq %r15,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_103249+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103249
.p2align 0x4
.long 0x14B4
L_103249:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_103246:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x10(%rbp),%rdx
	movq 0x0(%rbp),%rsi
	movq 0x8(%rbp),%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call IntInf_orb
L_103247:
	movq %rax,0x58(%rbp)
	movq (gcState+0x0)(%rip),%r12
	jmp intInf_3
.p2align 0x4
L_416574:
L_103251:
	movq 0x0(%rbp),%r13
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r14
	decq %r14
	jo L_103207
L_103252:
	jmp L_103242
.p2align 0x4
L_416576:
L_103253:
	movq 0x8(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r13
	decq %r13
	jo L_103207
L_103254:
	xchgq %r13,%r15
	jmp L_103240
.p2align 0x4
L_416578:
L_103222:
	movq 0x0(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x60,%rbp
	leaq (L_103223+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1182
.p2align 0x4
L_416579:
L_103211:
	movq 0x0(%rbp),%r14
	movq %r14,0x58(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x60(%rbp)
loop_1123:
	movq 0x58(%rbp),%r15
	cmpq $0x1,%r15
	je L_416580
L_103212:
	movq 0x48(%rbp),%r14
	movq 0x10(%r14),%r13
	movq 0x8(%r13),%r11
	movq %r11,0x88(%rbp)
	movq 0x0(%r13),%r11
	movq %r11,0x68(%rbp)
	movq %r15,0x78(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0x80(%rbp)
	addq $0x78,%rbp
	leaq (L_103213+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigDiv_0
.p2align 0x4
L_416580:
L_103215:
	movq 0x60(%rbp),%r14
	movq %r14,0x70(%rbp)
	movq 0x50(%rbp),%r14
	movq %r14,0x78(%rbp)
	addq $0x70,%rbp
	leaq (L_103216+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1521
.p2align 0x4
L_416581:
L_103184:
	movq 0x8(%rbp),%r14
	andq 0x0(%rbp),%r14
	movq %r14,%r13
	andq $0x1,%r13
	jz L_416582
L_103185:
	orq $0x1,%r14
	movq %r14,0x58(%rbp)
intInf_2:
	movq 0x58(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x68,%rbp
	leaq (L_103186+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1521
.p2align 0x4
L_416582:
L_103192:
	movq 0x8(%rbp),%r14
	andq $0x1,%r14
	jz L_416588
L_103193:
	movq $0x1,%r14
	xchgq %r14,%r15
L_103194:
	movq 0x0(%rbp),%r14
	andq $0x1,%r14
	jz L_416586
L_103195:
	movq $0x1,%r14
L_103196:
	cmpq %r14,%r15
	jnl L_103198
L_103205:
	movq %r14,%r15
L_103198:
	movq 0x10(%rbp),%r14
	movq 0x0(%r14),%rsi
	movq 0x8(%r14),%r13
	imulq %r13,%r15
	addq $0x7,%rsi
	addq %r13,%rsi
	addq %r15,%rsi
	movq %rsi,%r15
	movq %rsi,0x18(%rbp)
	addq $0x0,%r15
	jc L_103199
L_103200:
	movq (gcState+0x458)(%rip),%r14
	subq %r12,%r14
	cmpq %r15,%r14
	jnb L_103201
L_103203:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r14d
	movl %r14d,%edx
	movq %r15,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_103204+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103204
.p2align 0x4
.long 0x14B4
L_103204:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_103201:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x18(%rbp),%rdx
	movq 0x0(%rbp),%rsi
	movq 0x8(%rbp),%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call IntInf_andb
L_103202:
	movq %rax,0x58(%rbp)
	movq (gcState+0x0)(%rip),%r12
	jmp intInf_2
.p2align 0x4
L_416586:
L_103206:
	movq 0x0(%rbp),%r13
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r14
	decq %r14
	jo L_103207
L_103208:
	jmp L_103196
.p2align 0x4
L_416588:
L_103209:
	movq 0x8(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r13
	decq %r13
	jo L_103207
L_103210:
	xchgq %r13,%r15
	jmp L_103194
.p2align 0x4
L_416590:
L_103176:
	movq 0x68(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x68(%rbp)
	addq $0x60,%rbp
	leaq (L_103177+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1183
.p2align 0x4
.long 0x907
L_103281:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movl 0x68(%rbp),%r15d
	movl %r15d,0x60(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_103282
L_103285:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_103286+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103286
.p2align 0x4
.long 0x771
L_103286:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_103282:
	movl 0x60(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_103174
L_103283:
	movq $0x1C99,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x58(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x27F3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x61C
L_103272:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movq 0x60(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq %r15,0x68(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x68,%rbp
	leaq (L_103273+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1521
.p2align 0x4
.long 0x61C
L_103264:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movq 0x60(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq %r15,0x68(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x68,%rbp
	leaq (L_103265+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1521
.p2align 0x4
.long 0x61C
L_103256:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movq 0x60(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq %r15,0x68(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x68,%rbp
	leaq (L_103257+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1521
.p2align 0x4
.long 0x907
L_103232:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movl 0x68(%rbp),%r15d
	movl %r15d,0x60(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_103233
L_103236:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_103237+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103237
.p2align 0x4
.long 0x771
L_103237:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_103233:
	movl 0x60(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_103174
L_103234:
	movq $0x1C99,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x58(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x27F3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x61C
L_103223:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movq 0x60(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq %r15,0x68(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x68,%rbp
	leaq (L_103224+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1521
.p2align 0x4
.long 0x14B5
L_103213:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq 0x78(%rbp),%r15
	movq %r15,0x70(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0x70(%rbp)
	movq 0x68(%rbp),%r15
	movq %r15,0x78(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x68(%rbp)
	addq $0x68,%rbp
	leaq (L_103214+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigMod_0
.p2align 0x4
.long 0x79B
L_103216:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movl 0x70(%rbp),%r15d
	movl %r15d,0x68(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_103217
L_103220:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_103221+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103221
.p2align 0x4
.long 0x14B6
L_103221:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_103217:
	movl 0x68(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_103174
L_103218:
	movq $0x1C99,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x60(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x27F3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x907
L_103186:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movl 0x68(%rbp),%r15d
	movl %r15d,0x60(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_103187
L_103190:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_103191+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103191
.p2align 0x4
.long 0x771
L_103191:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_103187:
	movl 0x60(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_103174
L_103188:
	movq $0x1C99,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x58(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x27F3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x61C
L_103177:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movq 0x60(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq %r15,0x68(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x68,%rbp
	leaq (L_103178+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1521
.p2align 0x4
.long 0x907
L_103273:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movl 0x68(%rbp),%r15d
	movl %r15d,0x60(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_103274
L_103277:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_103278+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103278
.p2align 0x4
.long 0x771
L_103278:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_103274:
	movl 0x60(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_103174
L_103275:
	movq $0x1C99,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x58(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x27F3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x907
L_103265:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movl 0x68(%rbp),%r15d
	movl %r15d,0x60(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_103266
L_103269:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_103270+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103270
.p2align 0x4
.long 0x771
L_103270:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_103266:
	movl 0x60(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_103174
L_103267:
	movq $0x1C99,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x58(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x27F3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x907
L_103257:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movl 0x68(%rbp),%r15d
	movl %r15d,0x60(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_103258
L_103261:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_103262+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103262
.p2align 0x4
.long 0x771
L_103262:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_103258:
	movl 0x60(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_103174
L_103259:
	movq $0x1C99,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x58(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x27F3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x907
L_103224:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movl 0x68(%rbp),%r15d
	movl %r15d,0x60(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_103225
L_103228:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_103229+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103229
.p2align 0x4
.long 0x771
L_103229:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_103225:
	movl 0x60(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_103174
L_103226:
	movq $0x1C99,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x58(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x27F3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x77F
L_103214:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq 0x68(%rbp),%r15
	movq 0x58(%rbp),%r14
	movq %r14,0x60(%rbp)
	movq %r15,0x58(%rbp)
	jmp loop_1123
.p2align 0x4
.long 0x907
L_103178:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movl 0x68(%rbp),%r15d
	movl %r15d,0x60(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_103179
L_103182:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_103183+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103183
.p2align 0x4
.long 0x771
L_103183:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_103179:
	movl 0x60(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_103174
L_103180:
	movq $0x1C99,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x58(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x27F3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl x_1527
.hidden x_1527
x_1527:
L_103308:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_103309
L_103340:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_103341+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103341
.p2align 0x4
.long 0x45C
L_103341:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_103309:
	movq 0x10(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x18(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x8(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x0(%rbp),%r15
	movq 0x8(%r15),%r13
	movq %r13,0x38(%rbp)
	movq %r14,0x40(%rbp)
	addq $0x38,%rbp
	leaq (L_103310+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp equals_0
.p2align 0x4
.long 0x526
L_103310:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movl 0x38(%rbp),%r15d
	movl %r15d,0x10(%rbp)
	testl %r15d,%r15d
	jnz L_416611
L_103311:
	movq (globalObjptr+0x1938)(%rip),%r15
	movq %r15,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_273+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
L_416611:
L_103315:
	movq 0x8(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r14,0x10(%rbp)
	movq 0x0(%rbp),%r15
	movq 0x0(%r15),%r13
	movq %r13,0x30(%rbp)
	movq %r14,%r15
	andq %r13,%r15
	andq $0x1,%r15
	jz L_416612
L_103316:
	xorq %r13,%r14
	orq $0x1,%r14
	movq %r14,0x20(%rbp)
L_103317:
	movq 0x18(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x30(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_103318+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
L_416612:
L_103321:
	andq $0x1,%r14
	jz L_416618
L_103322:
	movq $0x1,%r15
L_103323:
	movq 0x30(%rbp),%r14
	andq $0x1,%r14
	jz L_416616
L_103324:
	movq $0x1,%r14
L_103325:
	cmpq %r14,%r15
	jnl L_103327
L_103334:
	movq %r14,%r15
L_103327:
	movq 0x20(%rbp),%r14
	movq 0x0(%r14),%r13
	movq 0x8(%r14),%r11
	imulq %r11,%r15
	addq $0x7,%r13
	addq %r13,%r11
	addq %r11,%r15
	movq %r15,%rsi
	movq %r15,0x38(%rbp)
	addq $0x0,%rsi
	jc L_416614
L_103329:
	movq (gcState+0x458)(%rip),%r15
	subq %r12,%r15
	cmpq %rsi,%r15
	jnb L_103330
L_103332:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_103333+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103333
.p2align 0x4
.long 0x112B
L_103333:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_103330:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x38(%rbp),%rdx
	movq 0x10(%rbp),%rsi
	movq 0x30(%rbp),%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call IntInf_xorb
L_103331:
	movq %rax,0x20(%rbp)
	movq (gcState+0x0)(%rip),%r12
	jmp L_103317
.p2align 0x4
L_416614:
L_103328:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	call MLton_heapCheckTooLarge
.p2align 0x4
L_416616:
L_103335:
	movq 0x30(%rbp),%r13
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r14
	decq %r14
	jo L_416617
L_103337:
	jmp L_103325
.p2align 0x4
L_416617:
L_103336:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416618:
L_103338:
	movq 0x10(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	decq %r15
	jo L_103336
L_103339:
	jmp L_103323
.p2align 0x4
.long 0x1
bug_273:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_103312
L_103313:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_103314+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103314
.p2align 0x4
.long 0x452
L_103314:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_103312:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x4B3
L_103318:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl 0x48(%rbp),%r15d
	movl %r15d,0x40(%rbp)
	movl %r15d,0x48(%rbp)
	movq $0x3,0x50(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x58(%rbp)
	addq $0x48,%rbp
	leaq (L_103319+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1199
.p2align 0x4
.long 0x512
L_103319:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x20(%rbp),%r14
	movq %r14,0x40(%rbp)
	movq 0x38(%rbp),%r14
	movq %r14,0x48(%rbp)
	movq %r15,0x38(%rbp)
	addq $0x38,%rbp
	leaq (L_103320+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigMod_0
.p2align 0x4
.long 0x51B
L_103320:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq %r15,0x0(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl rshift_0
.hidden rshift_0
rshift_0:
L_103342:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_103343
L_103377:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_103378+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103378
.p2align 0x4
.long 0x4E8
L_103378:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_103343:
	movq 0x18(%rbp),%r14
	movq 0x18(%r14),%r13
	movq %r13,0x20(%rbp)
	movq 0x10(%r14),%r13
	movq %r13,0x28(%rbp)
	movq 0x8(%r14),%r13
	movq %r13,0x30(%rbp)
	movq 0x0(%r14),%r15
	movl 0x0(%rbp),%r14d
	testl %r14d,%r14d
	jnz L_416624
L_103344:
	movq 0x10(%rbp),%r14
	movq 0x8(%r14),%r13
	movq %r13,0x18(%rbp)
	movq 0x8(%rbp),%r14
	movq 0x0(%r14),%r11
	movq %r13,%r14
	andq %r11,%r14
	andq $0x1,%r14
	jz L_416622
L_103345:
	cmpq %r13,%r11
	jl L_416621
zero_2:
	movq 0x8(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x38(%rbp)
	addq $0x38,%rbp
	leaq (L_103347+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
L_416621:
	movq %r11,%r14
L_103351:
	movq %r14,0x40(%rbp)
	movq 0x10(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r14,0x20(%rbp)
	addq $0x40,%rbp
	leaq (L_103352+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
L_416622:
L_103357:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r13,%rsi
	movq %r11,%rdi
	xorq %rax,%rax
	movq %r11,%rbx
	call IntInf_compare
L_103358:
	cmpl $0x0,%eax
	jl L_416623
	jmp zero_2
.p2align 0x4
L_416623:
	movq %rbx,%r14
	jmp L_103351
.p2align 0x4
L_416624:
L_103361:
	movq 0x8(%rbp),%r14
	movq 0x0(%r14),%r15
	movq 0x10(%rbp),%r14
	movq 0x8(%r14),%r13
	movq %r13,0x18(%rbp)
	movq %r15,%r14
	andq %r13,%r14
	andq $0x1,%r14
	jz L_416626
L_103362:
	cmpq %r15,%r13
	jl L_416625
L_103364:
	movq %r15,0x40(%rbp)
	addq $0x40,%rbp
	leaq (L_103365+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
L_416625:
L_103372:
	movq 0x18(%rbp),%r15
	movq %r15,0x40(%rbp)
	addq $0x40,%rbp
	leaq (L_103365+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
L_416626:
L_103373:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r13,%rsi
	movq %r15,%rdi
	xorq %rax,%rax
	call IntInf_compare
L_103374:
	cmpl $0x0,%eax
	jg L_103372
	jmp L_103364
.p2align 0x4
.long 0x71E
L_103347:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movl 0x38(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	movl %r15d,0x38(%rbp)
	movq $0x3,0x40(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x38,%rbp
	leaq (L_103348+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1199
.p2align 0x4
.long 0x511
L_103352:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movl 0x40(%rbp),%r15d
	movl %r15d,0x38(%rbp)
	movl %r15d,0x40(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x50(%rbp)
	addq $0x40,%rbp
	leaq (L_103353+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1534
.p2align 0x4
.long 0x4A8
L_103365:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movl 0x40(%rbp),%r15d
	movl %r15d,0x38(%rbp)
	movq 0x10(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x50(%rbp)
	addq $0x48,%rbp
	leaq (L_103366+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toIntInfX_0
.p2align 0x4
.long 0x71F
L_103348:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq $0x1,0x30(%rbp)
	movq 0x28(%rbp),%r14
	movq %r14,0x38(%rbp)
	movq %r15,0x28(%rbp)
	addq $0x28,%rbp
	leaq (L_103349+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigMod_0
.p2align 0x4
.long 0x114E
L_103353:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_103354+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
.long 0x1078
L_103366:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x20(%rbp)
	movl 0x38(%rbp),%r14d
	movl %r14d,0x40(%rbp)
	movq %r15,0x48(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x50(%rbp)
	addq $0x40,%rbp
	leaq (L_103367+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1534
.p2align 0x4
.long 0x490
L_103349:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq %r15,0x0(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x8E9
L_103354:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl 0x48(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	movl %r15d,0x48(%rbp)
	movq $0x3,0x50(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x58(%rbp)
	addq $0x48,%rbp
	leaq (L_103355+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1199
.p2align 0x4
.long 0x114E
L_103367:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_103368+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
.long 0x5E4
L_103355:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x30(%rbp)
	addq $0x28,%rbp
	leaq (L_103356+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigMod_0
.p2align 0x4
.long 0x8E9
L_103368:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl 0x48(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	movl %r15d,0x48(%rbp)
	movq $0x3,0x50(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x58(%rbp)
	addq $0x48,%rbp
	leaq (L_103369+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1199
.p2align 0x4
.long 0x490
L_103356:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq %r15,0x0(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x5E4
L_103369:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x30(%rbp)
	addq $0x28,%rbp
	leaq (L_103370+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigMod_0
.p2align 0x4
.long 0x490
L_103370:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq %r15,0x0(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl swap_0
.hidden swap_0
swap_0:
L_103379:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_103380
L_103406:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_103407+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103407
.p2align 0x4
.long 0x45C
L_103407:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_103380:
	movq 0x10(%rbp),%r15
	movq 0x18(%r15),%r14
	movq %r14,0x50(%rbp)
	movq 0x10(%r15),%r14
	movq %r14,0x18(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x0(%rbp),%r15
	movl 0x0(%r15),%r14d
	movl %r14d,0x30(%rbp)
	movl 0x4(%r15),%r13d
	movl %r13d,0x34(%rbp)
	movl %r14d,0x40(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x40,%rbp
	leaq (L_103381+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1534
.p2align 0x4
.long 0x14B7
L_103381:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x10(%rbp)
	movl 0x30(%rbp),%r15d
	movl %r15d,0x40(%rbp)
	movq $0x3,0x48(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x50(%rbp)
	addq $0x40,%rbp
	leaq (L_103382+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1199
.p2align 0x4
.long 0xD42
L_103382:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0x20(%rbp),%r14
	movq 0x10(%r14),%r13
	movq 0x8(%r13),%r11
	movq %r11,0x60(%rbp)
	movq 0x0(%r13),%r11
	movq %r11,0x40(%rbp)
	movq %r15,0x50(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x58(%rbp)
	addq $0x50,%rbp
	leaq (L_103383+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigDiv_0
.p2align 0x4
.long 0x1124
L_103383:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x50(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x40(%rbp)
	addq $0x40,%rbp
	leaq (L_103384+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigMod_0
.p2align 0x4
.long 0x14B8
L_103384:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x20(%rbp)
	movl 0x34(%rbp),%r14d
	movl %r14d,0x38(%rbp)
	movq %r15,0x40(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x38,%rbp
	leaq (L_103385+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1199
.p2align 0x4
.long 0x50C
L_103385:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x18(%rbp)
	movq %r15,%r14
	movq 0x10(%rbp),%r13
	andq %r13,%r14
	andq $0x1,%r14
	jz L_416630
L_103386:
	orq %r13,%r15
	orq $0x1,%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416630:
L_103387:
	andq $0x1,%r13
	jz L_416636
L_103388:
	movq $0x1,%r14
	xchgq %r14,%r15
L_103389:
	movq 0x18(%rbp),%r14
	andq $0x1,%r14
	jz L_416634
L_103390:
	movq $0x1,%r14
L_103391:
	cmpq %r14,%r15
	jnl L_103393
L_103400:
	movq %r14,%r15
L_103393:
	movq 0x28(%rbp),%r14
	movq 0x0(%r14),%r13
	movq 0x8(%r14),%rsi
	imulq %rsi,%r15
	addq $0x7,%r13
	addq %r13,%rsi
	addq %r15,%rsi
	movq %rsi,%r15
	movq %rsi,0x20(%rbp)
	addq $0x0,%r15
	jc L_416632
L_103395:
	movq (gcState+0x458)(%rip),%r14
	subq %r12,%r14
	cmpq %r15,%r14
	jnb L_103396
L_103398:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r14d
	movl %r14d,%edx
	movq %r15,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_103399+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103399
.p2align 0x4
.long 0x45F
L_103399:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_103396:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x20(%rbp),%rdx
	movq 0x10(%rbp),%rsi
	movq 0x18(%rbp),%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call IntInf_orb
L_103397:
	movq %rax,0x0(%rbp)
	movq (gcState+0x0)(%rip),%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416632:
L_103394:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	call MLton_heapCheckTooLarge
.p2align 0x4
L_416634:
L_103401:
	movq 0x18(%rbp),%r13
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r14
	decq %r14
	jo L_416635
L_103403:
	jmp L_103391
.p2align 0x4
L_416635:
L_103402:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416636:
L_103404:
	movq 0x10(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r13
	decq %r13
	jo L_103402
L_103405:
	xchgq %r13,%r15
	jmp L_103389
.text
.p2align 0x4
.globl setRoundingMode_0
.hidden setRoundingMode_0
setRoundingMode_0:
L_103408:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_103409
L_103437:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_103438+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103438
.p2align 0x4
.long 0x454
L_103438:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_103409:
	movb 0x0(%rbp),%r15b
	cmpb $0x1,%r15b
	je L_416648
	cmpb $0x2,%r15b
	je L_416647
	cmpb $0x3,%r15b
	je L_416646
L_103410:
	movl $0x3,%ecx
L_103411:
	cmpl $0xFFFFFFFF,%ecx
	je L_416645
L_103412:
	movq (c_stackP+0x0)(%rip),%rsp
	movl %ecx,%edi
	xorq %rax,%rax
	addq $0x8,%rbp
	leaq (L_103413+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_setRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103413
.p2align 0x4
.long 0x0
L_103413:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movl %eax,%r15d
	movl %eax,(cReturnTemp+0x0)(%rip)
	testl %r15d,%r15d
	jz L_416644
L_103414:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x16,%r15d
	movl %r15d,%edi
	xorq %rax,%rax
	addq $0x8,%rbp
	leaq (L_103415+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_Error_strError
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103415
.p2align 0x4
.long 0x0
L_103415:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq %rax,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_103416
L_103430:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_103431+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103431
.p2align 0x4
.long 0x454
L_103431:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_103416:
	movq 0x0(%rbp),%r15
	movq %r15,0x8(%rbp)
	testq %r15,%r15
	jz L_416642
L_103417:
	xorl %ecx,%ecx
.p2align 0x4,,0x7
loop_1124:
	movslq %ecx,%r15
	movq %r15,0x10(%rbp)
	movq 0x8(%rbp),%r13
	movb 0x0(%r13,%r15,1),%r14b
	testb %r14b,%r14b
	jz L_416638
L_103418:
	incl %ecx
	jmp loop_1124
.p2align 0x4
L_416638:
L_103419:
	movq 0x10(%rbp),%rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_416641
L_103420:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x51,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_103421+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103421
.p2align 0x4
.long 0x47B
L_103421:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq %rax,0x18(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_1125:
	cmpq 0x10(%rbp),%r15
	jnl L_416639
L_103427:
	movl %r15d,%r14d
	movslq %r14d,%r13
	movq 0x18(%rbp),%r14
	movq 0x8(%rbp),%r10
	movb 0x0(%r10,%r13,1),%r11b
	movb %r11b,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_1125
.p2align 0x4
L_416639:
L_103422:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_103423
L_103425:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_103426+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103426
.p2align 0x4
.long 0x27
L_103426:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_103423:
	movq 0x18(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
L_103424:
	movq $0x141B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalWord64+0x10)(%rip),%r15
	movq %r15,0x0(%r14)
	movq $0x1931,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	addq $0x10,%r12
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416641:
L_103428:
	movq $0x5,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416642:
L_103429:
	movq (globalObjptr+0xDBE8)(%rip),%r15
	jmp L_103424
.p2align 0x4
L_416644:
L_103432:
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416645:
L_103433:
	movq (globalObjptr+0x760)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416646:
L_103436:
	xorl %ecx,%ecx
	jmp L_103411
.p2align 0x4
L_416647:
L_103435:
	movl $0x1,%ecx
	jmp L_103411
.p2align 0x4
L_416648:
L_103434:
	movl $0x2,%ecx
	jmp L_103411
.text
.p2align 0x4
.globl fromIntInf_1
.hidden fromIntInf_1
fromIntInf_1:
L_103439:
	movq (gcState+0x20)(%rip),%r15
	movq %r15,0x18(%rbp)
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_103440
L_103469:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_103470+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103470
.p2align 0x4
.long 0x45D
L_103470:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_103440:
	movq 0x8(%rbp),%r14
	movq 0x10(%r14),%r13
	movq %r13,0x20(%rbp)
	movq 0x8(%r14),%r13
	movq %r13,0x28(%rbp)
	movq 0x0(%r14),%r15
	movq 0x0(%rbp),%r14
	movq %r14,%r13
	andq $0x1,%r13
	andq $0x1,%r13
	jz L_416651
L_103441:
	cmpq $0x1,%r14
	jnl L_416650
L_103462:
	movq %r15,0x40(%rbp)
	leaq L_103460(%rip),%r15
	movq %r15,0x10(%rbp)
	movq %rbp,%r15
	addq $0x18,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq 0x0(%rbp),%r15
	movq %r15,0x38(%rbp)
	addq $0x38,%rbp
	leaq (L_103463+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigNeg_0
.p2align 0x4
L_416650:
L_103443:
	leaq L_103460(%rip),%r15
	movq %r15,0x10(%rbp)
	movq %rbp,%r15
	addq $0x18,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq 0x0(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x38(%rbp)
	addq $0x30,%rbp
	leaq (L_103444+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1197
.p2align 0x4
L_416651:
L_103465:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x1,%rsi
	movq %r14,%rdi
	xorq %rax,%rax
	call IntInf_compare
L_103466:
	cmpl $0x0,%eax
	jnl L_103443
	jmp L_103462
.p2align 0x4
.long 0x5EE
L_103463:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x38(%rbp)
	addq $0x30,%rbp
	leaq (L_103464+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1197
.p2align 0x4
.long 0x25
L_103460:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq %r15,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x45A
L_103444:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq 0x30(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x28(%rbp)
	addq $0x28,%rbp
	leaq (fromString_9+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp append_0
.p2align 0x4
.long 0x45A
L_103464:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq 0x30(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq %r15,0x30(%rbp)
	movq (globalObjptr+0xD3C0)(%rip),%r15
	movq %r15,0x38(%rbp)
	addq $0x30,%rbp
	leaq (L_103444+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp append_0
.p2align 0x4
.long 0x474
fromString_9:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	decq %r14
	jo L_416659
L_103446:
	movb 0x0(%r15,%r14,1),%r13b
	testb %r13b,%r13b
	jz L_416654
L_103447:
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq %r15,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416654:
L_103448:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_103449+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103449
.p2align 0x4
.long 0x49E
L_103449:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	testl %eax,%eax
	jz L_416658
L_103450:
	cmpl $0x1,%eax
	je L_416657
L_103451:
	cmpl $0x2,%eax
	je L_416656
L_103452:
	cmpl $0x3,%eax
	je L_416655
L_103453:
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq %r15,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416655:
L_103454:
	xorl %ecx,%ecx
L_103455:
	movq (c_stackP+0x0)(%rip),%rsp
	movl %ecx,%esi
	movq 0x20(%rbp),%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_103456+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Real32_strtor
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	movss %xmm0,(cReturnTemp+0x0)(%rip)
	jmp L_103456
.p2align 0x4
.long 0x64A
L_103456:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movss (cReturnTemp+0x0)(%rip),%xmm15
	movss %xmm15,%xmm14
	movss %xmm14,0x0(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416656:
L_103457:
	movl $0x2,%ecx
	jmp L_103455
.p2align 0x4
L_416657:
L_103458:
	movl $0x3,%ecx
	jmp L_103455
.p2align 0x4
L_416658:
L_103459:
	movl $0x1,%ecx
	jmp L_103455
.p2align 0x4
L_416659:
L_103445:
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq %r15,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl x_1525
.hidden x_1525
x_1525:
L_103471:
	movq (gcState+0x20)(%rip),%r15
	movq %r15,0x20(%rbp)
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_103472
L_103505:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_103506+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103506
.p2align 0x4
.long 0x6FF
L_103506:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_103472:
	movq 0x8(%rbp),%r15
	movl 0x20(%r15),%r14d
	movl %r14d,0x28(%rbp)
	movl 0x2C(%r15),%r14d
	movl %r14d,0x2C(%rbp)
	movq 0x10(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x50(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x30(%rbp)
	leaq L_103504(%rip),%r15
	movq %r15,0x18(%rbp)
	movq %rbp,%r15
	addq $0x20,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq $0x11,0x40(%rbp)
	movq $0x81,0x48(%rbp)
	addq $0x40,%rbp
	leaq (L_103473+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigRem_0
.p2align 0x4
.long 0x4FB
L_103473:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x8(%rbp)
	cmpq $0x1,%r15
	jne L_416661
L_103476:
	movq $0x11,0x38(%rbp)
	movq $0x81,0x40(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x38,%rbp
	leaq (L_103477+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigQuot_0
.p2align 0x4
L_416661:
L_103475:
	movq 0x20(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x48B
L_103504:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	jmp L_103475
.p2align 0x4
.long 0x14B9
L_103477:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq %r15,0x38(%rbp)
	addq $0x38,%rbp
	leaq (new_5+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp schckToInt32_0
.p2align 0x4
.long 0x14B9
new_5:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movl 0x38(%rbp),%r15d
	movslq %r15d,%rdx
	movq %rdx,0x10(%rbp)
	movl %r15d,0x8(%rbp)
	cmpq $0x7FFFFFFF,%rdx
	ja L_103475
L_103478:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x51,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_103479+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103479
.p2align 0x4
.long 0x14BA
L_103479:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq %rax,0x8(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_1126:
	cmpq 0x10(%rbp),%r15
	jnl L_416662
L_103502:
	movq 0x8(%rbp),%r14
	movb $0x0,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_1126
.p2align 0x4
L_416662:
L_103480:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_103481
L_103500:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_103501+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103501
.p2align 0x4
.long 0x14BB
L_103501:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_103481:
	movq 0x0(%rbp),%r14
	movq 0x0(%r14),%r15
	movq %r15,%r14
	andq $0x1,%r14
	jz L_416669
L_103482:
	sarq $0x1,%r15
L_103483:
	movq 0x10(%rbp),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_103475
L_103485:
	movl 0x28(%rbp),%r14d
	decl %r14d
	jo L_103475
L_103486:
	cmpl %r13d,%r14d
	jnb L_103475
L_103488:
	movq 0x8(%rbp),%r14
	movq %r15,0x0(%r14)
	movl 0x2C(%rbp),%r11d
	decl %r11d
	jo L_103475
L_103489:
	cmpl %r13d,%r11d
	jnb L_103475
L_103491:
	movd %r15,%xmm15
	ucomisd %xmm15,%xmm15
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jz L_103475
L_103493:
	movq $0x1C8F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movsd %xmm15,%xmm14
	movsd %xmm14,0x0(%r15)
	addq $0x10,%r12
	movq $0x1C91,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	movq 0x20(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416669:
L_103494:
	movq 0x0(%r15),%r14
	testq %r14,%r14
	jz L_416671
L_103495:
	movl $0x1,%ecx
L_103496:
	movq 0x8(%r15),%r14
	testl %ecx,%ecx
	jz L_416670
L_103498:
	negq %r14
	movq %r14,%r15
	jmp L_103483
.p2align 0x4
L_416670:
	movq %r14,%r15
	jmp L_103483
.p2align 0x4
L_416671:
L_103499:
	xorl %ecx,%ecx
	jmp L_103496
.text
.p2align 0x4
.globl x_1526
.hidden x_1526
x_1526:
L_103507:
	movq (gcState+0x20)(%rip),%r15
	movq %r15,0x20(%rbp)
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_103508
L_103541:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_103542+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103542
.p2align 0x4
.long 0x6FF
L_103542:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_103508:
	movq 0x8(%rbp),%r15
	movl 0x4(%r15),%r14d
	movl %r14d,0x28(%rbp)
	movl 0x10(%r15),%r14d
	movl %r14d,0x2C(%rbp)
	movq 0x10(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x50(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x30(%rbp)
	leaq L_103540(%rip),%r15
	movq %r15,0x18(%rbp)
	movq %rbp,%r15
	addq $0x20,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq $0x11,0x40(%rbp)
	movq $0x41,0x48(%rbp)
	addq $0x40,%rbp
	leaq (L_103509+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigRem_0
.p2align 0x4
.long 0x4FB
L_103509:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x8(%rbp)
	cmpq $0x1,%r15
	jne L_416675
L_103512:
	movq $0x11,0x38(%rbp)
	movq $0x41,0x40(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x38,%rbp
	leaq (L_103513+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigQuot_0
.p2align 0x4
L_416675:
L_103511:
	movq 0x20(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x48B
L_103540:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	jmp L_103511
.p2align 0x4
.long 0x14B9
L_103513:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq %r15,0x38(%rbp)
	addq $0x38,%rbp
	leaq (new_6+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp schckToInt32_0
.p2align 0x4
.long 0x14B9
new_6:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movl 0x38(%rbp),%r15d
	movslq %r15d,%rdx
	movq %rdx,0x10(%rbp)
	movl %r15d,0x8(%rbp)
	cmpq $0x7FFFFFFF,%rdx
	ja L_103511
L_103514:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x51,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_103515+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103515
.p2align 0x4
.long 0x14BA
L_103515:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq %rax,0x8(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_1127:
	cmpq 0x10(%rbp),%r15
	jnl L_416676
L_103538:
	movq 0x8(%rbp),%r14
	movb $0x0,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_1127
.p2align 0x4
L_416676:
L_103516:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_103517
L_103536:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_103537+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103537
.p2align 0x4
.long 0x14BB
L_103537:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_103517:
	movq 0x0(%rbp),%r14
	movq 0x0(%r14),%r15
	movq %r15,%r14
	andq $0x1,%r14
	jz L_416683
L_103518:
	sarq $0x1,%r15
L_103519:
	movq 0x10(%rbp),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r14,%r11
	jne L_103511
L_103521:
	movl 0x28(%rbp),%r14d
	decl %r14d
	jo L_103511
L_103522:
	cmpl %r13d,%r14d
	jnb L_103511
L_103524:
	movl %r15d,%r14d
	movq 0x8(%rbp),%r15
	movl %r14d,0x0(%r15)
	movl 0x2C(%rbp),%r11d
	decl %r11d
	jo L_103511
L_103525:
	cmpl %r13d,%r11d
	jnb L_103511
L_103527:
	movd %r14d,%xmm15
	ucomiss %xmm15,%xmm15
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jz L_103511
L_103529:
	movd %xmm15,%r15d
	movl %r15d,%r14d
	shlq $0x1,%r14
	orq $0x1,%r14
	movq $0x1C91,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r15,0x0(%rbp)
	addq $0x10,%r12
	movq 0x20(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416683:
L_103530:
	movq 0x0(%r15),%r14
	testq %r14,%r14
	jz L_416685
L_103531:
	movl $0x1,%ecx
L_103532:
	movq 0x8(%r15),%r14
	testl %ecx,%ecx
	jz L_416684
L_103534:
	negq %r14
	movq %r14,%r15
	jmp L_103519
.p2align 0x4
L_416684:
	movq %r14,%r15
	jmp L_103519
.p2align 0x4
L_416685:
L_103535:
	xorl %ecx,%ecx
	jmp L_103532
.text
.p2align 0x4
.globl x_1524
.hidden x_1524
x_1524:
L_103543:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_103544
L_103575:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_103576+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103576
.p2align 0x4
.long 0x45C
L_103576:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_103544:
	movq 0x10(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x18(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x8(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x0(%rbp),%r15
	movq 0x8(%r15),%r13
	movq %r13,0x38(%rbp)
	movq %r14,0x40(%rbp)
	addq $0x38,%rbp
	leaq (L_103545+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp equals_0
.p2align 0x4
.long 0x526
L_103545:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movl 0x38(%rbp),%r15d
	movl %r15d,0x10(%rbp)
	testl %r15d,%r15d
	jnz L_416689
L_103546:
	movq (globalObjptr+0x1918)(%rip),%r15
	movq %r15,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_274+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
L_416689:
L_103550:
	movq 0x8(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r14,0x10(%rbp)
	movq 0x0(%rbp),%r15
	movq 0x0(%r15),%r13
	movq %r13,0x30(%rbp)
	andq %r13,%r14
	movq %r14,%r15
	andq $0x1,%r15
	jz L_416690
L_103551:
	orq $0x1,%r14
	movq %r14,0x20(%rbp)
L_103552:
	movq 0x18(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x30(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_103553+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
L_416690:
L_103556:
	movq 0x10(%rbp),%r15
	andq $0x1,%r15
	jz L_416696
L_103557:
	movq $0x1,%r15
L_103558:
	movq 0x30(%rbp),%r14
	andq $0x1,%r14
	jz L_416694
L_103559:
	movq $0x1,%r14
L_103560:
	cmpq %r14,%r15
	jnl L_103562
L_103569:
	movq %r14,%r15
L_103562:
	movq 0x20(%rbp),%r14
	movq 0x0(%r14),%rsi
	movq 0x8(%r14),%r13
	imulq %r13,%r15
	addq $0x7,%rsi
	addq %r13,%rsi
	addq %r15,%rsi
	movq %rsi,%r15
	movq %rsi,0x38(%rbp)
	addq $0x0,%r15
	jc L_416692
L_103564:
	movq (gcState+0x458)(%rip),%r14
	subq %r12,%r14
	cmpq %r15,%r14
	jnb L_103565
L_103567:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r14d
	movl %r14d,%edx
	movq %r15,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_103568+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103568
.p2align 0x4
.long 0x112B
L_103568:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_103565:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x38(%rbp),%rdx
	movq 0x10(%rbp),%rsi
	movq 0x30(%rbp),%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call IntInf_andb
L_103566:
	movq %rax,0x20(%rbp)
	movq (gcState+0x0)(%rip),%r12
	jmp L_103552
.p2align 0x4
L_416692:
L_103563:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	call MLton_heapCheckTooLarge
.p2align 0x4
L_416694:
L_103570:
	movq 0x30(%rbp),%r13
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r14
	decq %r14
	jo L_416695
L_103572:
	jmp L_103560
.p2align 0x4
L_416695:
L_103571:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416696:
L_103573:
	movq 0x10(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	decq %r15
	jo L_103571
L_103574:
	jmp L_103558
.p2align 0x4
.long 0x1
bug_274:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_103547
L_103548:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_103549+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103549
.p2align 0x4
.long 0x452
L_103549:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_103547:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x4B3
L_103553:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl 0x48(%rbp),%r15d
	movl %r15d,0x40(%rbp)
	movl %r15d,0x48(%rbp)
	movq $0x3,0x50(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x58(%rbp)
	addq $0x48,%rbp
	leaq (L_103554+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1199
.p2align 0x4
.long 0x512
L_103554:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x20(%rbp),%r14
	movq %r14,0x40(%rbp)
	movq 0x38(%rbp),%r14
	movq %r14,0x48(%rbp)
	movq %r15,0x38(%rbp)
	addq $0x38,%rbp
	leaq (L_103555+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigMod_0
.p2align 0x4
.long 0x51B
L_103555:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq %r15,0x0(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl x_1522
.hidden x_1522
x_1522:
L_103577:
	movq (gcState+0x20)(%rip),%r15
	movq %r15,0x28(%rbp)
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_103578
L_103618:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_103619+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103619
.p2align 0x4
.long 0x14BE
L_103619:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_103578:
	movq 0x8(%rbp),%r15
	movl 0x28(%r15),%r14d
	movl %r14d,0x30(%rbp)
	movslq 0x24(%r15),%rdx
	movq %rdx,0x38(%rbp)
	cmpq $0x7FFFFFFF,%rdx
	ja L_103586
L_103579:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x51,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_103580+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103580
.p2align 0x4
.long 0x962
L_103580:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movsd 0x0(%rbp),%xmm15
	movd %xmm15,%r15
	movq %r15,0x0(%rax)
	movq %rax,0x8(%rbp)
	movq 0x38(%rbp),%rdx
	testq %rdx,%rdx
	jz L_416709
L_103581:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x51,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_103582+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103582
.p2align 0x4
.long 0x14BC
L_103582:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq %rax,%r15
L_103583:
	xorq %r14,%r14
.p2align 0x4,,0x7
loop_1128:
	cmpq 0x38(%rbp),%r14
	jnl L_416699
L_103615:
	movq 0x8(%rbp),%r11
	movb 0x0(%r11,%r14,1),%r13b
	movb %r13b,0x0(%r15,%r14,1)
	incq %r14
	jmp loop_1128
.p2align 0x4
L_416699:
L_103584:
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r14,%r11
	jne L_103586
L_103587:
	movl 0x30(%rbp),%r14d
	decl %r14d
	jo L_103586
L_103588:
	cmpl %r13d,%r14d
	jnb L_103586
L_103590:
	movq 0x0(%r15),%r14
	movq %r14,%r15
	sarq $0x3E,%r15
	jz L_416705
L_103591:
	movq %r14,0x40(%rbp)
	movq (globalObjptr+0x8)(%rip),%r15
	movq %r15,0x30(%rbp)
	movq $0x1,0x38(%rbp)
.p2align 0x4,,0x7
loop_1129:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_416704
.p2align 0x4,,0x7
L_103592:
	movq 0x40(%rbp),%r15
	testq %r15,%r15
	jz L_416701
L_103593:
	movq 0x38(%rbp),%r14
	movq %r14,%r13
	incq %r13
	jo L_416700
L_103594:
	movq $0x5B,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	addq $0x18,%r12
	movq %r15,0x0(%r11)
	movq %r14,0x8(%r11)
	movq %r13,0x38(%rbp)
	movq $0x29A9,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r11,0x0(%r15)
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x30(%rbp)
	movq $0x0,0x40(%rbp)
	jmp loop_1129
.p2align 0x4
L_416700:
L_103586:
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416701:
L_103595:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x16E7,%rcx
	movq 0x38(%rbp),%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r14
	movq %r14,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_103596+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103596
.p2align 0x4
.long 0x65E
L_103596:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x30(%rbp),%r11
	cmpq $0x1,%r11
	je L_416703
L_103597:
	movq 0x8(%r11),%r13
	movq 0x0(%r11),%r14
	movq %rax,%r15
.p2align 0x4,,0x7
L_103598:
	movq 0x8(%r14),%r11
	movq 0x0(%r14),%r10
	movq %r10,0x0(%r15,%r11,8)
	cmpq $0x1,%r13
	je L_416702
L_103599:
	movq 0x0(%r13),%r14
	movq 0x8(%r13),%r13
	jmp L_103598
.p2align 0x4
L_416702:
L_103601:
	movq $0xD,0xFFFFFFFFFFFFFFF8(%r15)
	movq %r15,0x30(%rbp)
L_103602:
	leaq L_103610(%rip),%r15
	movq %r15,0x20(%rbp)
	movq %rbp,%r15
	addq $0x28,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq $0x81,0x40(%rbp)
	movq 0x10(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x40,%rbp
	leaq (L_103603+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp fromBits_5
.p2align 0x4
L_416703:
	movq %rax,%r15
	jmp L_103601
.p2align 0x4
L_416704:
L_103612:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_103613+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103613
.p2align 0x4
.long 0x14BD
L_103613:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	jmp L_103592
.p2align 0x4
L_416705:
L_103614:
	shlq $0x1,%r14
	orq $0x1,%r14
	movq %r14,0x30(%rbp)
	jmp L_103602
.p2align 0x4
L_416709:
L_103616:
	movq (globalObjptr+0x6F8)(%rip),%r15
	jmp L_103583
.p2align 0x4
.long 0x114E
L_103603:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0x18(%rbp),%r14
	movq 0x8(%r14),%r13
	movq %r13,0x40(%rbp)
	movq 0x0(%r14),%r13
	movq %r13,0x48(%rbp)
	movq %r15,0x58(%rbp)
	addq $0x58,%rbp
	leaq (L_103604+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
.long 0x474
L_103610:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	jmp L_103586
.p2align 0x4
.long 0x146A
L_103604:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movl 0x58(%rbp),%r15d
	movl %r15d,0x50(%rbp)
	movl %r15d,0x58(%rbp)
	movq $0x3,0x60(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x68(%rbp)
	addq $0x58,%rbp
	leaq (L_103605+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1199
.p2align 0x4
.long 0x6DC
L_103605:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x30(%rbp),%r14
	movq %r14,0x50(%rbp)
	movq 0x48(%rbp),%r14
	movq %r14,0x58(%rbp)
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_103606+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigMod_0
.p2align 0x4
.long 0x78C
L_103606:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_103607
L_103608:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_103609+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103609
.p2align 0x4
.long 0x6AF
L_103609:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_103607:
	movq $0x2D5,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x0(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl x_1523
.hidden x_1523
x_1523:
L_103620:
	movq (gcState+0x20)(%rip),%r15
	movq %r15,0x28(%rbp)
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_103621
L_103661:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_103662+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103662
.p2align 0x4
.long 0x14BE
L_103662:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_103621:
	movq 0x8(%rbp),%r15
	movl 0xC(%r15),%r14d
	movl %r14d,0x4(%rbp)
	movslq 0x8(%r15),%rdx
	movq %rdx,0x30(%rbp)
	cmpq $0x7FFFFFFF,%rdx
	ja L_103629
L_103622:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x51,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_103623+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103623
.p2align 0x4
.long 0x8B4
L_103623:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movss 0x0(%rbp),%xmm15
	movd %xmm15,%r15d
	movl %r15d,0x0(%rax)
	movq %rax,0x8(%rbp)
	movq 0x30(%rbp),%rdx
	testq %rdx,%rdx
	jz L_416723
L_103624:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x51,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_103625+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103625
.p2align 0x4
.long 0x14BF
L_103625:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq %rax,%r15
L_103626:
	xorq %r14,%r14
.p2align 0x4,,0x7
loop_1130:
	cmpq 0x30(%rbp),%r14
	jnl L_416713
L_103658:
	movq 0x8(%rbp),%r11
	movb 0x0(%r11,%r14,1),%r13b
	movb %r13b,0x0(%r15,%r14,1)
	incq %r14
	jmp loop_1130
.p2align 0x4
L_416713:
L_103627:
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r14,%r11
	jne L_103629
L_103630:
	movl 0x4(%rbp),%r14d
	decl %r14d
	jo L_103629
L_103631:
	cmpl %r13d,%r14d
	jnb L_103629
L_103633:
	movl 0x0(%r15),%r14d
	movq %r14,%r15
	sarq $0x3E,%r15
	jz L_416719
L_103634:
	movq %r14,0x40(%rbp)
	movq (globalObjptr+0x8)(%rip),%r15
	movq %r15,0x30(%rbp)
	movq $0x1,0x38(%rbp)
.p2align 0x4,,0x7
loop_1131:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_416718
.p2align 0x4,,0x7
L_103635:
	movq 0x40(%rbp),%r15
	testq %r15,%r15
	jz L_416715
L_103636:
	movq 0x38(%rbp),%r14
	movq %r14,%r13
	incq %r13
	jo L_416714
L_103637:
	movq $0x5B,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	addq $0x18,%r12
	movq %r15,0x0(%r11)
	movq %r14,0x8(%r11)
	movq %r13,0x38(%rbp)
	movq $0x29A9,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r11,0x0(%r15)
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x30(%rbp)
	movq $0x0,0x40(%rbp)
	jmp loop_1131
.p2align 0x4
L_416714:
L_103629:
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416715:
L_103638:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x16E7,%rcx
	movq 0x38(%rbp),%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r14
	movq %r14,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_103639+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103639
.p2align 0x4
.long 0x65E
L_103639:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x30(%rbp),%r11
	cmpq $0x1,%r11
	je L_416717
L_103640:
	movq 0x8(%r11),%r13
	movq 0x0(%r11),%r14
	movq %rax,%r15
.p2align 0x4,,0x7
L_103641:
	movq 0x8(%r14),%r11
	movq 0x0(%r14),%r10
	movq %r10,0x0(%r15,%r11,8)
	cmpq $0x1,%r13
	je L_416716
L_103642:
	movq 0x0(%r13),%r14
	movq 0x8(%r13),%r13
	jmp L_103641
.p2align 0x4
L_416716:
L_103644:
	movq $0xD,0xFFFFFFFFFFFFFFF8(%r15)
	movq %r15,0x30(%rbp)
L_103645:
	leaq L_103653(%rip),%r15
	movq %r15,0x20(%rbp)
	movq %rbp,%r15
	addq $0x28,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq $0x41,0x40(%rbp)
	movq 0x10(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x40,%rbp
	leaq (L_103646+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp fromBits_5
.p2align 0x4
L_416717:
	movq %rax,%r15
	jmp L_103644
.p2align 0x4
L_416718:
L_103655:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_103656+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103656
.p2align 0x4
.long 0x14BD
L_103656:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	jmp L_103635
.p2align 0x4
L_416719:
L_103657:
	shlq $0x1,%r14
	orq $0x1,%r14
	movq %r14,0x30(%rbp)
	jmp L_103645
.p2align 0x4
L_416723:
L_103659:
	movq (globalObjptr+0x6F8)(%rip),%r15
	jmp L_103626
.p2align 0x4
.long 0x114E
L_103646:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0x18(%rbp),%r14
	movq 0x8(%r14),%r13
	movq %r13,0x40(%rbp)
	movq 0x0(%r14),%r13
	movq %r13,0x48(%rbp)
	movq %r15,0x58(%rbp)
	addq $0x58,%rbp
	leaq (L_103647+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
.long 0x474
L_103653:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	jmp L_103629
.p2align 0x4
.long 0x146A
L_103647:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movl 0x58(%rbp),%r15d
	movl %r15d,0x50(%rbp)
	movl %r15d,0x58(%rbp)
	movq $0x3,0x60(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x68(%rbp)
	addq $0x58,%rbp
	leaq (L_103648+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1199
.p2align 0x4
.long 0x6DC
L_103648:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x30(%rbp),%r14
	movq %r14,0x50(%rbp)
	movq 0x48(%rbp),%r14
	movq %r14,0x58(%rbp)
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_103649+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigMod_0
.p2align 0x4
.long 0x78C
L_103649:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_103650
L_103651:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_103652+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103652
.p2align 0x4
.long 0x6AF
L_103652:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_103650:
	movq $0x2D5,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x0(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl x_1531
.hidden x_1531
x_1531:
L_103663:
	movq (gcState+0x20)(%rip),%r15
	movq %r15,0x18(%rbp)
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_103664
L_103894:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_103895+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103895
.p2align 0x4
.long 0x45D
L_103895:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_103664:
	movq 0x8(%rbp),%r15
	movq 0x20(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x18(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x10(%r15),%r14
	movq %r14,0x30(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x0(%r15),%r14
	movq 0x0(%rbp),%r15
	movq %r15,%r13
	andq $0x1,%r13
	cmpq $0x1,%r13
	je L_416732
L_103665:
	movsd 0x0(%r15),%xmm15
	movsd %xmm15,0x8(%rbp)
	movq 0x8(%r14),%r15
	cmpq $0x1,0x0(%r15)
	jne L_416731
L_103668:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_103669+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103669
.p2align 0x4
.long 0x509
L_103669:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	testl %eax,%eax
	jz L_416730
L_103670:
	cmpl $0x1,%eax
	je L_416729
L_103671:
	cmpl $0x2,%eax
	je L_416728
L_103672:
	cmpl $0x3,%eax
	jne L_416727
L_103675:
	movb $0x0,0x30(%rbp)
L_103676:
	leaq L_103704(%rip),%r15
	movq %r15,0x10(%rbp)
	movq %rbp,%r15
	addq $0x18,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movb $0x2,0x40(%rbp)
	addq $0x40,%rbp
	leaq (L_103677+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_416727:
L_103674:
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq (globalObjptr+0x778)(%rip),%r14
	movq %r14,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq %r15,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416728:
L_103778:
	movb $0x1,0x30(%rbp)
	jmp L_103676
.p2align 0x4
L_416729:
L_103779:
	movb $0x2,0x30(%rbp)
	jmp L_103676
.p2align 0x4
L_416730:
L_103780:
	movb $0x3,0x30(%rbp)
	jmp L_103676
.p2align 0x4
L_416731:
L_103667:
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416732:
L_103781:
	shrq $0x1,%r15
	movl %r15d,%r13d
	movd %r13d,%xmm15
	movss %xmm15,0x8(%rbp)
	movq 0x8(%r14),%r15
	cmpq $0x1,0x0(%r15)
	jne L_103667
L_103783:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_103784+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103784
.p2align 0x4
.long 0x6AF
L_103784:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	testl %eax,%eax
	jz L_416736
L_103785:
	cmpl $0x1,%eax
	je L_416735
L_103786:
	cmpl $0x2,%eax
	je L_416734
L_103787:
	cmpl $0x3,%eax
	jne L_103674
L_103789:
	movb $0x0,0xC(%rbp)
L_103790:
	leaq L_103818(%rip),%r15
	movq %r15,0x10(%rbp)
	movq %rbp,%r15
	addq $0x18,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movb $0x2,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_103791+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_416734:
L_103891:
	movb $0x1,0xC(%rbp)
	jmp L_103790
.p2align 0x4
L_416735:
L_103892:
	movb $0x2,0xC(%rbp)
	jmp L_103790
.p2align 0x4
L_416736:
L_103893:
	movb $0x3,0xC(%rbp)
	jmp L_103790
.p2align 0x4
.long 0x1145
L_103677:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x28(%rbp),%r15
	cmpq $0x1,%r15
	je L_416753
	cmpq $0x2,%r15
	je L_416752
	cmpq $0x3,%r15
	je L_416751
	cmpq $0x5,%r15
	je L_416750
	cmpq $0x6,%r15
	je L_416749
	cmpq $0x7,%r15
	je L_416748
L_103678:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0x23C3,%r14
	je L_416745
	cmpq $0x23C4,%r14
	je L_416742
	cmpq $0x23C5,%r14
	je L_416740
L_103679:
	movsd 0x0(%r15),%xmm15
	movsd 0x8(%rbp),%xmm14
	ucomisd 0x8(%r15),%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jz L_416739
L_103748:
	movsd %xmm15,%xmm14
	movsd %xmm14,0x38(%rbp)
L_103682:
	movb $0x1,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_103683+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_416739:
L_103680:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_ln
L_103681:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_103682
.p2align 0x4
L_416740:
L_103763:
	movsd 0x0(%r15),%xmm15
	movsd 0x8(%rbp),%xmm14
	ucomisd 0x8(%r15),%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jz L_416741
L_103766:
	movsd %xmm15,%xmm14
	movsd %xmm14,0x38(%rbp)
	jmp L_103682
.p2align 0x4
L_416741:
L_103764:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_log10
L_103765:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_103682
.p2align 0x4
L_416742:
L_103756:
	movsd 0x8(%r15),%xmm15
	movsd 0x0(%r15),%xmm14
	movq $0x8000000000000000,%r15
	movd %r15,%xmm13
	xorpd %xmm15,%xmm13
	movsd 0x8(%rbp),%xmm12
	ucomisd %xmm13,%xmm12
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_416744
L_103757:
	ucomisd %xmm12,%xmm15
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_416743
L_103758:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd %xmm12,%xmm0
	movq $0x1,%rax
	movsd %xmm14,(localReal64+0x8)(%rip)
	call Real64_Math_acos
L_103759:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_103682
.p2align 0x4
L_416743:
	movsd %xmm14,%xmm7
L_103761:
	movsd %xmm7,%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_103682
.p2align 0x4
L_416744:
	movsd %xmm14,%xmm7
	jmp L_103761
.p2align 0x4
L_416745:
L_103749:
	movsd 0x8(%r15),%xmm15
	movsd 0x0(%r15),%xmm14
	movq $0x8000000000000000,%r15
	movd %r15,%xmm13
	xorpd %xmm15,%xmm13
	movsd 0x8(%rbp),%xmm12
	ucomisd %xmm13,%xmm12
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_416747
L_103750:
	ucomisd %xmm12,%xmm15
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_416746
L_103751:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd %xmm12,%xmm0
	movq $0x1,%rax
	movsd %xmm14,(localReal64+0x8)(%rip)
	call Real64_Math_asin
L_103752:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_103682
.p2align 0x4
L_416746:
	movsd %xmm14,%xmm7
L_103754:
	movsd %xmm7,%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_103682
.p2align 0x4
L_416747:
	movsd %xmm14,%xmm7
	jmp L_103754
.p2align 0x4
L_416748:
L_103777:
	sqrtsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm14
	movsd %xmm14,0x38(%rbp)
	jmp L_103682
.p2align 0x4
L_416749:
L_103775:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_exp
L_103776:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_103682
.p2align 0x4
L_416750:
L_103773:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_atan
L_103774:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_103682
.p2align 0x4
L_416751:
L_103771:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_cos
L_103772:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_103682
.p2align 0x4
L_416752:
L_103769:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_sin
L_103770:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_103682
.p2align 0x4
L_416753:
L_103767:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_tan
L_103768:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_103682
.p2align 0x4
.long 0x25
L_103704:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_103705+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103705
.p2align 0x4
.long 0x476
L_103705:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	testl %eax,%eax
	jz L_416758
L_103706:
	cmpl $0x1,%eax
	je L_416757
L_103707:
	cmpl $0x2,%eax
	je L_416756
L_103708:
	cmpl $0x3,%eax
	jne L_103674
L_103710:
	xorb %dl,%dl
L_103711:
	movb 0x30(%rbp),%r15b
	cmpb %r15b,%dl
	je L_103667
L_103712:
	movq 0x18(%rbp),%r14
	movq %r14,(gcState+0x20)(%rip)
	movb %r15b,0x28(%rbp)
	addq $0x28,%rbp
	leaq (L_103713+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_416756:
L_103715:
	movb $0x1,%dl
	jmp L_103711
.p2align 0x4
L_416757:
L_103716:
	movb $0x2,%dl
	jmp L_103711
.p2align 0x4
L_416758:
L_103717:
	movb $0x3,%dl
	jmp L_103711
.p2align 0x4
.long 0x7C0
L_103791:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x38(%rbp),%r15
	cmpq $0x1,%r15
	je L_416773
	cmpq $0x2,%r15
	je L_416772
	cmpq $0x3,%r15
	je L_416771
	cmpq $0x5,%r15
	je L_416770
	cmpq $0x6,%r15
	je L_416769
	cmpq $0x7,%r15
	je L_416768
L_103792:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0x23BF,%r14
	je L_416765
	cmpq $0x23C0,%r14
	je L_416762
	cmpq $0x23C1,%r14
	je L_416760
L_103793:
	movss 0x0(%r15),%xmm15
	movss 0x8(%rbp),%xmm14
	ucomiss 0x4(%r15),%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jz L_416759
L_103861:
	movss %xmm15,%xmm14
	movss %xmm14,0x20(%rbp)
L_103796:
	movb $0x1,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_103797+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_416759:
L_103794:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_ln
L_103795:
	movss %xmm0,%xmm15
	movss %xmm15,0x20(%rbp)
	jmp L_103796
.p2align 0x4
L_416760:
L_103876:
	movss 0x0(%r15),%xmm15
	movss 0x8(%rbp),%xmm14
	ucomiss 0x4(%r15),%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jz L_416761
L_103879:
	movss %xmm15,%xmm14
	movss %xmm14,0x20(%rbp)
	jmp L_103796
.p2align 0x4
L_416761:
L_103877:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_log10
L_103878:
	movss %xmm0,%xmm15
	movss %xmm15,0x20(%rbp)
	jmp L_103796
.p2align 0x4
L_416762:
L_103869:
	movss 0x4(%r15),%xmm15
	movss 0x0(%r15),%xmm14
	movl $0x80000000,%r15d
	movd %r15d,%xmm13
	xorps %xmm15,%xmm13
	movss 0x8(%rbp),%xmm12
	ucomiss %xmm13,%xmm12
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_416764
L_103870:
	ucomiss %xmm12,%xmm15
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_416763
L_103871:
	movq (c_stackP+0x0)(%rip),%rsp
	movss %xmm12,%xmm0
	movq $0x1,%rax
	movss %xmm14,(localReal32+0x4)(%rip)
	call Real32_Math_acos
L_103872:
	movss %xmm0,%xmm15
	movss %xmm15,0x20(%rbp)
	jmp L_103796
.p2align 0x4
L_416763:
	movss %xmm14,%xmm7
L_103874:
	movss %xmm7,%xmm15
	movss %xmm15,0x20(%rbp)
	jmp L_103796
.p2align 0x4
L_416764:
	movss %xmm14,%xmm7
	jmp L_103874
.p2align 0x4
L_416765:
L_103862:
	movss 0x4(%r15),%xmm15
	movss 0x0(%r15),%xmm14
	movl $0x80000000,%r15d
	movd %r15d,%xmm13
	xorps %xmm15,%xmm13
	movss 0x8(%rbp),%xmm12
	ucomiss %xmm13,%xmm12
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_416767
L_103863:
	ucomiss %xmm12,%xmm15
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_416766
L_103864:
	movq (c_stackP+0x0)(%rip),%rsp
	movss %xmm12,%xmm0
	movq $0x1,%rax
	movss %xmm14,(localReal32+0x4)(%rip)
	call Real32_Math_asin
L_103865:
	movss %xmm0,%xmm15
	movss %xmm15,0x20(%rbp)
	jmp L_103796
.p2align 0x4
L_416766:
	movss %xmm14,%xmm7
L_103867:
	movss %xmm7,%xmm15
	movss %xmm15,0x20(%rbp)
	jmp L_103796
.p2align 0x4
L_416767:
	movss %xmm14,%xmm7
	jmp L_103867
.p2align 0x4
L_416768:
L_103890:
	sqrtss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm14
	movss %xmm14,0x20(%rbp)
	jmp L_103796
.p2align 0x4
L_416769:
L_103888:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_exp
L_103889:
	movss %xmm0,%xmm15
	movss %xmm15,0x20(%rbp)
	jmp L_103796
.p2align 0x4
L_416770:
L_103886:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_atan
L_103887:
	movss %xmm0,%xmm15
	movss %xmm15,0x20(%rbp)
	jmp L_103796
.p2align 0x4
L_416771:
L_103884:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_cos
L_103885:
	movss %xmm0,%xmm15
	movss %xmm15,0x20(%rbp)
	jmp L_103796
.p2align 0x4
L_416772:
L_103882:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_sin
L_103883:
	movss %xmm0,%xmm15
	movss %xmm15,0x20(%rbp)
	jmp L_103796
.p2align 0x4
L_416773:
L_103880:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_tan
L_103881:
	movss %xmm0,%xmm15
	movss %xmm15,0x20(%rbp)
	jmp L_103796
.p2align 0x4
.long 0x25
L_103818:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_103819+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103819
.p2align 0x4
.long 0x64A
L_103819:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	testl %eax,%eax
	jz L_416778
L_103820:
	cmpl $0x1,%eax
	je L_416777
L_103821:
	cmpl $0x2,%eax
	je L_416776
L_103822:
	cmpl $0x3,%eax
	jne L_103674
L_103824:
	xorb %dl,%dl
L_103825:
	movb 0xC(%rbp),%r15b
	cmpb %r15b,%dl
	je L_103667
L_103826:
	movq 0x18(%rbp),%r14
	movq %r14,(gcState+0x20)(%rip)
	movb %r15b,0x28(%rbp)
	addq $0x28,%rbp
	leaq (L_103713+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_416776:
L_103828:
	movb $0x1,%dl
	jmp L_103825
.p2align 0x4
L_416777:
L_103829:
	movb $0x2,%dl
	jmp L_103825
.p2align 0x4
L_416778:
L_103830:
	movb $0x3,%dl
	jmp L_103825
.p2align 0x4
.long 0x14C0
L_103683:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x28(%rbp),%r15
	cmpq $0x1,%r15
	je L_416793
	cmpq $0x2,%r15
	je L_416792
	cmpq $0x3,%r15
	je L_416791
	cmpq $0x5,%r15
	je L_416790
	cmpq $0x6,%r15
	je L_416789
	cmpq $0x7,%r15
	je L_416788
L_103684:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0x23C3,%r14
	je L_416785
	cmpq $0x23C4,%r14
	je L_416782
	cmpq $0x23C5,%r14
	je L_416780
L_103685:
	movsd 0x0(%r15),%xmm15
	movsd 0x8(%rbp),%xmm14
	ucomisd 0x8(%r15),%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jz L_416779
L_103718:
	movsd %xmm15,%xmm14
	movsd %xmm14,0x28(%rbp)
L_103688:
	movb 0x30(%rbp),%r15b
	movb %r15b,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_103689+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_416779:
L_103686:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_ln
L_103687:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x28(%rbp)
	jmp L_103688
.p2align 0x4
L_416780:
L_103733:
	movsd 0x0(%r15),%xmm15
	movsd 0x8(%rbp),%xmm14
	ucomisd 0x8(%r15),%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jz L_416781
L_103736:
	movsd %xmm15,%xmm14
	movsd %xmm14,0x28(%rbp)
	jmp L_103688
.p2align 0x4
L_416781:
L_103734:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_log10
L_103735:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x28(%rbp)
	jmp L_103688
.p2align 0x4
L_416782:
L_103726:
	movsd 0x8(%r15),%xmm15
	movsd 0x0(%r15),%xmm14
	movq $0x8000000000000000,%r15
	movd %r15,%xmm13
	xorpd %xmm15,%xmm13
	movsd 0x8(%rbp),%xmm12
	ucomisd %xmm13,%xmm12
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_416784
L_103727:
	ucomisd %xmm12,%xmm15
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_416783
L_103728:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd %xmm12,%xmm0
	movq $0x1,%rax
	movsd %xmm14,(localReal64+0x8)(%rip)
	call Real64_Math_acos
L_103729:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x28(%rbp)
	jmp L_103688
.p2align 0x4
L_416783:
	movsd %xmm14,%xmm7
L_103731:
	movsd %xmm7,%xmm15
	movsd %xmm15,0x28(%rbp)
	jmp L_103688
.p2align 0x4
L_416784:
	movsd %xmm14,%xmm7
	jmp L_103731
.p2align 0x4
L_416785:
L_103719:
	movsd 0x8(%r15),%xmm15
	movsd 0x0(%r15),%xmm14
	movq $0x8000000000000000,%r15
	movd %r15,%xmm13
	xorpd %xmm15,%xmm13
	movsd 0x8(%rbp),%xmm12
	ucomisd %xmm13,%xmm12
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_416787
L_103720:
	ucomisd %xmm12,%xmm15
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_416786
L_103721:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd %xmm12,%xmm0
	movq $0x1,%rax
	movsd %xmm14,(localReal64+0x8)(%rip)
	call Real64_Math_asin
L_103722:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x28(%rbp)
	jmp L_103688
.p2align 0x4
L_416786:
	movsd %xmm14,%xmm7
L_103724:
	movsd %xmm7,%xmm15
	movsd %xmm15,0x28(%rbp)
	jmp L_103688
.p2align 0x4
L_416787:
	movsd %xmm14,%xmm7
	jmp L_103724
.p2align 0x4
L_416788:
L_103747:
	sqrtsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm14
	movsd %xmm14,0x28(%rbp)
	jmp L_103688
.p2align 0x4
L_416789:
L_103745:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_exp
L_103746:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x28(%rbp)
	jmp L_103688
.p2align 0x4
L_416790:
L_103743:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_atan
L_103744:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x28(%rbp)
	jmp L_103688
.p2align 0x4
L_416791:
L_103741:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_cos
L_103742:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x28(%rbp)
	jmp L_103688
.p2align 0x4
L_416792:
L_103739:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_sin
L_103740:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x28(%rbp)
	jmp L_103688
.p2align 0x4
L_416793:
L_103737:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_tan
L_103738:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x28(%rbp)
	jmp L_103688
.p2align 0x4
.long 0x474
L_103713:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	jmp L_103667
.p2align 0x4
.long 0x7C0
L_103797:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x38(%rbp),%r15
	cmpq $0x1,%r15
	je L_416808
	cmpq $0x2,%r15
	je L_416807
	cmpq $0x3,%r15
	je L_416806
	cmpq $0x5,%r15
	je L_416805
	cmpq $0x6,%r15
	je L_416804
	cmpq $0x7,%r15
	je L_416803
L_103798:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0x23BF,%r14
	je L_416800
	cmpq $0x23C0,%r14
	je L_416797
	cmpq $0x23C1,%r14
	je L_416795
L_103799:
	movss 0x0(%r15),%xmm15
	movss 0x8(%rbp),%xmm14
	ucomiss 0x4(%r15),%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jz L_416794
L_103831:
	movss %xmm15,%xmm14
	movss %xmm14,0x24(%rbp)
L_103802:
	movb 0xC(%rbp),%r15b
	movb %r15b,0x40(%rbp)
	addq $0x40,%rbp
	leaq (L_103803+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_416794:
L_103800:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_ln
L_103801:
	movss %xmm0,%xmm15
	movss %xmm15,0x24(%rbp)
	jmp L_103802
.p2align 0x4
L_416795:
L_103846:
	movss 0x0(%r15),%xmm15
	movss 0x8(%rbp),%xmm14
	ucomiss 0x4(%r15),%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jz L_416796
L_103849:
	movss %xmm15,%xmm14
	movss %xmm14,0x24(%rbp)
	jmp L_103802
.p2align 0x4
L_416796:
L_103847:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_log10
L_103848:
	movss %xmm0,%xmm15
	movss %xmm15,0x24(%rbp)
	jmp L_103802
.p2align 0x4
L_416797:
L_103839:
	movss 0x4(%r15),%xmm15
	movss 0x0(%r15),%xmm14
	movl $0x80000000,%r15d
	movd %r15d,%xmm13
	xorps %xmm15,%xmm13
	movss 0x8(%rbp),%xmm12
	ucomiss %xmm13,%xmm12
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_416799
L_103840:
	ucomiss %xmm12,%xmm15
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_416798
L_103841:
	movq (c_stackP+0x0)(%rip),%rsp
	movss %xmm12,%xmm0
	movq $0x1,%rax
	movss %xmm14,(localReal32+0x4)(%rip)
	call Real32_Math_acos
L_103842:
	movss %xmm0,%xmm15
	movss %xmm15,0x24(%rbp)
	jmp L_103802
.p2align 0x4
L_416798:
	movss %xmm14,%xmm7
L_103844:
	movss %xmm7,%xmm15
	movss %xmm15,0x24(%rbp)
	jmp L_103802
.p2align 0x4
L_416799:
	movss %xmm14,%xmm7
	jmp L_103844
.p2align 0x4
L_416800:
L_103832:
	movss 0x4(%r15),%xmm15
	movss 0x0(%r15),%xmm14
	movl $0x80000000,%r15d
	movd %r15d,%xmm13
	xorps %xmm15,%xmm13
	movss 0x8(%rbp),%xmm12
	ucomiss %xmm13,%xmm12
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_416802
L_103833:
	ucomiss %xmm12,%xmm15
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_416801
L_103834:
	movq (c_stackP+0x0)(%rip),%rsp
	movss %xmm12,%xmm0
	movq $0x1,%rax
	movss %xmm14,(localReal32+0x4)(%rip)
	call Real32_Math_asin
L_103835:
	movss %xmm0,%xmm15
	movss %xmm15,0x24(%rbp)
	jmp L_103802
.p2align 0x4
L_416801:
	movss %xmm14,%xmm7
L_103837:
	movss %xmm7,%xmm15
	movss %xmm15,0x24(%rbp)
	jmp L_103802
.p2align 0x4
L_416802:
	movss %xmm14,%xmm7
	jmp L_103837
.p2align 0x4
L_416803:
L_103860:
	sqrtss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm14
	movss %xmm14,0x24(%rbp)
	jmp L_103802
.p2align 0x4
L_416804:
L_103858:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_exp
L_103859:
	movss %xmm0,%xmm15
	movss %xmm15,0x24(%rbp)
	jmp L_103802
.p2align 0x4
L_416805:
L_103856:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_atan
L_103857:
	movss %xmm0,%xmm15
	movss %xmm15,0x24(%rbp)
	jmp L_103802
.p2align 0x4
L_416806:
L_103854:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_cos
L_103855:
	movss %xmm0,%xmm15
	movss %xmm15,0x24(%rbp)
	jmp L_103802
.p2align 0x4
L_416807:
L_103852:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_sin
L_103853:
	movss %xmm0,%xmm15
	movss %xmm15,0x24(%rbp)
	jmp L_103802
.p2align 0x4
L_416808:
L_103850:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_tan
L_103851:
	movss %xmm0,%xmm15
	movss %xmm15,0x24(%rbp)
	jmp L_103802
.p2align 0x4
.long 0x14C1
L_103689:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_103690
L_103702:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_103703+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103703
.p2align 0x4
.long 0x14C2
L_103703:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_103690:
	movsd 0x28(%rbp),%xmm15
	movsd 0x38(%rbp),%xmm14
	ucomisd %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416813
L_103691:
	ucomisd %xmm14,%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416812
L_103692:
	ucomisd %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416811
L_103693:
	xorb %dl,%dl
L_103694:
	cmpb $0x2,%dl
	jne L_103667
L_103696:
	movsd 0x38(%rbp),%xmm15
	movd %xmm15,%r15
	movq 0x20(%rbp),%r14
	movq 0x10(%r14),%r13
	andq %r13,%r15
	cmpq %r13,%r15
	sete %al
	movzbl %al,%eax
	movsd 0x28(%rbp),%xmm14
	movd %xmm14,%r15
	andq %r13,%r15
	cmpq %r13,%r15
	sete %bl
	movzbl %bl,%ebx
	cmpl %eax,%ebx
	jne L_103667
L_103698:
	movq $0x1C8F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movsd %xmm15,%xmm14
	movsd %xmm14,0x0(%r15)
	movq $0x1C91,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416811:
L_103699:
	movb $0x2,%dl
	jmp L_103694
.p2align 0x4
L_416812:
L_103700:
	movb $0x1,%dl
	jmp L_103694
.p2align 0x4
L_416813:
L_103701:
	movb $0x3,%dl
	jmp L_103694
.p2align 0x4
.long 0x69C
L_103803:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_103804
L_103816:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_103817+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103817
.p2align 0x4
.long 0x79E
L_103817:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_103804:
	movss 0x24(%rbp),%xmm15
	movss 0x20(%rbp),%xmm14
	ucomiss %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416819
L_103805:
	ucomiss %xmm14,%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416818
L_103806:
	ucomiss %xmm14,%xmm15
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416817
L_103807:
	xorb %dl,%dl
L_103808:
	cmpb $0x2,%dl
	jne L_103667
L_103810:
	movss 0x20(%rbp),%xmm15
	movd %xmm15,%r15d
	movq 0x30(%rbp),%r14
	movl 0xC(%r14),%r13d
	andl %r13d,%r15d
	cmpl %r13d,%r15d
	sete %al
	movzbl %al,%eax
	movss 0x24(%rbp),%xmm14
	movd %xmm14,%r15d
	andl %r13d,%r15d
	cmpl %r13d,%r15d
	sete %bl
	movzbl %bl,%ebx
	cmpl %eax,%ebx
	jne L_103667
L_103812:
	movd %xmm15,%r15d
	movl %r15d,%r14d
	shlq $0x1,%r14
	orq $0x1,%r14
	movq $0x1C91,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r15,0x0(%rbp)
	addq $0x10,%r12
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416817:
L_103813:
	movb $0x2,%dl
	jmp L_103808
.p2align 0x4
L_416818:
L_103814:
	movb $0x1,%dl
	jmp L_103808
.p2align 0x4
L_416819:
L_103815:
	movb $0x3,%dl
	jmp L_103808
.text
.p2align 0x4
.globl x_1528
.hidden x_1528
x_1528:
L_103896:
	movq (gcState+0x20)(%rip),%r15
	movq %r15,0x20(%rbp)
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_103897
L_104019:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_104020+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104020
.p2align 0x4
.long 0x6FF
L_104020:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_103897:
	movq 0x10(%rbp),%r15
	movq 0x18(%r15),%r14
	movq %r14,0x28(%rbp)
	movb 0x1(%r15),%r14b
	movb %r14b,0x30(%rbp)
	movq 0x10(%r15),%r14
	movq %r14,0x38(%rbp)
	movb 0x0(%r15),%r14b
	movb %r14b,0x31(%rbp)
	movq 0x8(%r15),%r14
	movq 0x8(%rbp),%r15
	movq %r15,%r13
	andq $0x1,%r13
	cmpq $0x1,%r13
	je L_416827
L_103898:
	movsd 0x0(%r15),%xmm15
	movsd %xmm15,0x10(%rbp)
L_103899:
	movq 0x0(%rbp),%r15
	movq %r15,%r13
	andq $0x3,%r13
	jnz L_416826
L_103901:
	movsd 0x0(%r15),%xmm15
	movsd %xmm15,0x8(%rbp)
	movq 0x8(%r14),%r15
	cmpq $0x1,0x0(%r15)
	jne L_416825
L_103904:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_103905+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103905
.p2align 0x4
.long 0x5E5
L_103905:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	testl %eax,%eax
	jz L_416824
L_103906:
	cmpl $0x1,%eax
	je L_416823
L_103907:
	cmpl $0x2,%eax
	je L_416822
L_103908:
	cmpl $0x3,%eax
	jne L_416821
L_103911:
	movb $0x0,0x31(%rbp)
L_103912:
	leaq L_103934(%rip),%r15
	movq %r15,0x18(%rbp)
	movq %rbp,%r15
	addq $0x20,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movb $0x2,0x40(%rbp)
	addq $0x40,%rbp
	leaq (L_103913+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_416821:
L_103910:
	movq 0x20(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq (globalObjptr+0x778)(%rip),%r14
	movq %r14,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq %r15,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416822:
L_103958:
	movb $0x1,0x31(%rbp)
	jmp L_103912
.p2align 0x4
L_416823:
L_103959:
	movb $0x2,0x31(%rbp)
	jmp L_103912
.p2align 0x4
L_416824:
L_103960:
	movb $0x3,0x31(%rbp)
	jmp L_103912
.p2align 0x4
L_416825:
L_103903:
	movq 0x20(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416826:
L_103900:
	movq (globalObjptr+0x19D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416827:
L_103961:
	shrq $0x1,%r15
	movl %r15d,%r13d
	movd %r13d,%xmm15
	movss %xmm15,0x10(%rbp)
	movq 0x0(%rbp),%r15
	movq %r15,%r13
	andq $0x1,%r13
	cmpq $0x1,%r13
	jne L_103900
L_103962:
	shrq $0x1,%r15
	movl %r15d,%r13d
	movd %r13d,%xmm15
	movss %xmm15,0x8(%rbp)
	movq 0x8(%r14),%r15
	cmpq $0x1,0x0(%r15)
	jne L_103903
L_103964:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_103965+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103965
.p2align 0x4
.long 0x7BB
L_103965:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	testl %eax,%eax
	jz L_416831
L_103966:
	cmpl $0x1,%eax
	je L_416830
L_103967:
	cmpl $0x2,%eax
	je L_416829
L_103968:
	cmpl $0x3,%eax
	jne L_103910
L_103970:
	movb $0x0,0xC(%rbp)
L_103971:
	leaq L_103993(%rip),%r15
	movq %r15,0x18(%rbp)
	movq %rbp,%r15
	addq $0x20,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movb $0x2,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_103972+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_416829:
L_104016:
	movb $0x1,0xC(%rbp)
	jmp L_103971
.p2align 0x4
L_416830:
L_104017:
	movb $0x2,0xC(%rbp)
	jmp L_103971
.p2align 0x4
L_416831:
L_104018:
	movb $0x3,0xC(%rbp)
	jmp L_103971
.p2align 0x4
.long 0x14C3
L_103913:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movb 0x30(%rbp),%r15b
	cmpb $0x1,%r15b
	je L_416838
	cmpb $0x2,%r15b
	je L_416837
	cmpb $0x3,%r15b
	je L_416836
	cmpb $0x4,%r15b
	je L_416835
L_103914:
	movsd 0x10(%rbp),%xmm15
	subsd 0x8(%rbp),%xmm15
	movsd %xmm15,0x38(%rbp)
L_103915:
	movb $0x1,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_103916+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_416835:
L_103957:
	movsd 0x8(%rbp),%xmm15
	mulsd 0x10(%rbp),%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_103915
.p2align 0x4
L_416836:
L_103956:
	movsd 0x8(%rbp),%xmm15
	addsd 0x10(%rbp),%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_103915
.p2align 0x4
L_416837:
L_103954:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm1
	movsd 0x10(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x2,%rax
	call Real64_Math_atan2
L_103955:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_103915
.p2align 0x4
L_416838:
L_103953:
	movsd 0x10(%rbp),%xmm15
	divsd 0x8(%rbp),%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_103915
.p2align 0x4
.long 0x48B
L_103934:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_103935+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103935
.p2align 0x4
.long 0x476
L_103935:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	testl %eax,%eax
	jz L_416843
L_103936:
	cmpl $0x1,%eax
	je L_416842
L_103937:
	cmpl $0x2,%eax
	je L_416841
L_103938:
	cmpl $0x3,%eax
	jne L_103910
L_103940:
	xorb %dl,%dl
L_103941:
	movb 0x31(%rbp),%r15b
	cmpb %r15b,%dl
	je L_103903
L_103942:
	movq 0x20(%rbp),%r14
	movq %r14,(gcState+0x20)(%rip)
	movb %r15b,0x30(%rbp)
	addq $0x30,%rbp
	leaq (L_103943+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_416841:
L_103945:
	movb $0x1,%dl
	jmp L_103941
.p2align 0x4
L_416842:
L_103946:
	movb $0x2,%dl
	jmp L_103941
.p2align 0x4
L_416843:
L_103947:
	movb $0x3,%dl
	jmp L_103941
.p2align 0x4
.long 0x78C
L_103972:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movb 0x31(%rbp),%r15b
	cmpb $0x1,%r15b
	je L_416847
	cmpb $0x2,%r15b
	je L_416846
	cmpb $0x3,%r15b
	je L_416845
	cmpb $0x4,%r15b
	je L_416844
L_103973:
	movss 0x10(%rbp),%xmm15
	subss 0x8(%rbp),%xmm15
	movss %xmm15,0x14(%rbp)
L_103974:
	movb $0x1,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_103975+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_416844:
L_104015:
	movss 0x8(%rbp),%xmm15
	mulss 0x10(%rbp),%xmm15
	movss %xmm15,0x14(%rbp)
	jmp L_103974
.p2align 0x4
L_416845:
L_104014:
	movss 0x8(%rbp),%xmm15
	addss 0x10(%rbp),%xmm15
	movss %xmm15,0x14(%rbp)
	jmp L_103974
.p2align 0x4
L_416846:
L_104012:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm1
	movss 0x10(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x2,%rax
	call Real32_Math_atan2
L_104013:
	movss %xmm0,%xmm15
	movss %xmm15,0x14(%rbp)
	jmp L_103974
.p2align 0x4
L_416847:
L_104011:
	movss 0x10(%rbp),%xmm15
	divss 0x8(%rbp),%xmm15
	movss %xmm15,0x14(%rbp)
	jmp L_103974
.p2align 0x4
.long 0x48B
L_103993:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_103994+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103994
.p2align 0x4
.long 0x48C
L_103994:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	testl %eax,%eax
	jz L_416852
L_103995:
	cmpl $0x1,%eax
	je L_416851
L_103996:
	cmpl $0x2,%eax
	je L_416850
L_103997:
	cmpl $0x3,%eax
	jne L_103910
L_103999:
	xorb %dl,%dl
L_104000:
	movb 0xC(%rbp),%r15b
	cmpb %dl,%r15b
	je L_103903
L_104001:
	movq 0x20(%rbp),%r14
	movq %r14,(gcState+0x20)(%rip)
	movb %r15b,0x30(%rbp)
	addq $0x30,%rbp
	leaq (L_103943+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_416850:
L_104003:
	movb $0x1,%dl
	jmp L_104000
.p2align 0x4
L_416851:
L_104004:
	movb $0x2,%dl
	jmp L_104000
.p2align 0x4
L_416852:
L_104005:
	movb $0x3,%dl
	jmp L_104000
.p2align 0x4
.long 0x14C4
L_103916:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movb 0x30(%rbp),%r15b
	cmpb $0x1,%r15b
	je L_416856
	cmpb $0x2,%r15b
	je L_416855
	cmpb $0x3,%r15b
	je L_416854
	cmpb $0x4,%r15b
	je L_416853
L_103917:
	movsd 0x10(%rbp),%xmm15
	subsd 0x8(%rbp),%xmm15
	movsd %xmm15,0x40(%rbp)
L_103918:
	movb 0x31(%rbp),%r15b
	movb %r15b,0x50(%rbp)
	addq $0x50,%rbp
	leaq (L_103919+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_416853:
L_103952:
	movsd 0x8(%rbp),%xmm15
	mulsd 0x10(%rbp),%xmm15
	movsd %xmm15,0x40(%rbp)
	jmp L_103918
.p2align 0x4
L_416854:
L_103951:
	movsd 0x8(%rbp),%xmm15
	addsd 0x10(%rbp),%xmm15
	movsd %xmm15,0x40(%rbp)
	jmp L_103918
.p2align 0x4
L_416855:
L_103949:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm1
	movsd 0x10(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x2,%rax
	call Real64_Math_atan2
L_103950:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x40(%rbp)
	jmp L_103918
.p2align 0x4
L_416856:
L_103948:
	movsd 0x10(%rbp),%xmm15
	divsd 0x8(%rbp),%xmm15
	movsd %xmm15,0x40(%rbp)
	jmp L_103918
.p2align 0x4
.long 0x922
L_103943:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	jmp L_103903
.p2align 0x4
.long 0x78C
L_103975:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movb 0x31(%rbp),%r15b
	cmpb $0x1,%r15b
	je L_416860
	cmpb $0x2,%r15b
	je L_416859
	cmpb $0x3,%r15b
	je L_416858
	cmpb $0x4,%r15b
	je L_416857
L_103976:
	movss 0x10(%rbp),%xmm15
	subss 0x8(%rbp),%xmm15
	movss %xmm15,0x10(%rbp)
L_103977:
	movb 0xC(%rbp),%r15b
	movb %r15b,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_103978+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_416857:
L_104010:
	movss 0x8(%rbp),%xmm15
	mulss 0x10(%rbp),%xmm15
	movss %xmm15,%xmm14
	movss %xmm14,0x10(%rbp)
	jmp L_103977
.p2align 0x4
L_416858:
L_104009:
	movss 0x8(%rbp),%xmm15
	addss 0x10(%rbp),%xmm15
	movss %xmm15,%xmm14
	movss %xmm14,0x10(%rbp)
	jmp L_103977
.p2align 0x4
L_416859:
L_104007:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm1
	movss 0x10(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x2,%rax
	call Real32_Math_atan2
L_104008:
	movss %xmm0,%xmm15
	movss %xmm15,0x10(%rbp)
	jmp L_103977
.p2align 0x4
L_416860:
L_104006:
	movss 0x10(%rbp),%xmm15
	divss 0x8(%rbp),%xmm15
	movss %xmm15,0x10(%rbp)
	jmp L_103977
.p2align 0x4
.long 0x90C
L_103919:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_103920
L_103932:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_103933+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103933
.p2align 0x4
.long 0x14C5
L_103933:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_103920:
	movsd 0x40(%rbp),%xmm15
	movsd 0x38(%rbp),%xmm14
	ucomisd %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416865
L_103921:
	ucomisd %xmm14,%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416864
L_103922:
	ucomisd %xmm14,%xmm15
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416863
L_103923:
	xorb %dl,%dl
L_103924:
	cmpb $0x2,%dl
	jne L_103903
L_103926:
	movsd 0x38(%rbp),%xmm15
	movd %xmm15,%r15
	movq 0x28(%rbp),%r14
	movq 0x10(%r14),%r13
	andq %r13,%r15
	cmpq %r15,%r13
	sete %al
	movzbl %al,%eax
	movsd 0x40(%rbp),%xmm14
	movd %xmm14,%r15
	andq %r13,%r15
	cmpq %r15,%r13
	sete %bl
	movzbl %bl,%ebx
	cmpl %eax,%ebx
	jne L_103903
L_103928:
	movq $0x1C8F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movsd %xmm15,%xmm14
	movsd %xmm14,0x0(%r15)
	movq $0x1C91,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	movq 0x20(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416863:
L_103929:
	movb $0x2,%dl
	jmp L_103924
.p2align 0x4
L_416864:
L_103930:
	movb $0x1,%dl
	jmp L_103924
.p2align 0x4
L_416865:
L_103931:
	movb $0x3,%dl
	jmp L_103924
.p2align 0x4
.long 0x78C
L_103978:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_103979
L_103991:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_103992+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_103992
.p2align 0x4
.long 0x7BB
L_103992:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_103979:
	movss 0x10(%rbp),%xmm15
	movss 0x14(%rbp),%xmm14
	ucomiss %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416871
L_103980:
	ucomiss %xmm14,%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416870
L_103981:
	ucomiss %xmm14,%xmm15
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416869
L_103982:
	xorb %dl,%dl
L_103983:
	cmpb $0x2,%dl
	jne L_103903
L_103985:
	movss 0x14(%rbp),%xmm15
	movd %xmm15,%r15d
	movq 0x38(%rbp),%r14
	movl 0xC(%r14),%r13d
	andl %r13d,%r15d
	cmpl %r13d,%r15d
	sete %al
	movzbl %al,%eax
	movss 0x10(%rbp),%xmm14
	movd %xmm14,%r15d
	andl %r13d,%r15d
	cmpl %r13d,%r15d
	sete %bl
	movzbl %bl,%ebx
	cmpl %eax,%ebx
	jne L_103903
L_103987:
	movd %xmm15,%r15d
	movl %r15d,%r14d
	shlq $0x1,%r14
	orq $0x1,%r14
	movq $0x1C91,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r15,0x0(%rbp)
	addq $0x10,%r12
	movq 0x20(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416869:
L_103988:
	movb $0x2,%dl
	jmp L_103983
.p2align 0x4
L_416870:
L_103989:
	movb $0x1,%dl
	jmp L_103983
.p2align 0x4
L_416871:
L_103990:
	movb $0x3,%dl
	jmp L_103983
.text
.p2align 0x4
.globl x_1530
.hidden x_1530
x_1530:
L_104021:
	movq (gcState+0x20)(%rip),%r15
	movq %r15,0x28(%rbp)
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_104022
L_104119:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_104120+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104120
.p2align 0x4
.long 0x75D
L_104120:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_104022:
	movq 0x18(%rbp),%r15
	movq 0x10(%r15),%r14
	movq %r14,0x30(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x0(%r15),%r14
	movq 0x10(%rbp),%r15
	movq %r15,%r13
	andq $0x1,%r13
	cmpq $0x1,%r13
	je L_416880
L_104023:
	movsd 0x0(%r15),%xmm15
	movsd %xmm15,0x18(%rbp)
L_104024:
	movq 0x8(%rbp),%r15
	movq %r15,%r13
	andq $0x3,%r13
	jnz L_104025
L_104026:
	movsd 0x0(%r15),%xmm15
	movsd %xmm15,0x10(%rbp)
L_104027:
	movq 0x0(%rbp),%r15
	movq %r15,%r13
	andq $0x3,%r13
	jnz L_416878
L_104028:
	movsd 0x0(%r15),%xmm15
	movsd %xmm15,0x8(%rbp)
	movq 0x8(%r14),%r15
	cmpq $0x1,0x0(%r15)
	jne L_416877
L_104031:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_104032+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104032
.p2align 0x4
.long 0x79E
L_104032:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	testl %eax,%eax
	jz L_416876
L_104033:
	cmpl $0x1,%eax
	je L_416875
L_104034:
	cmpl $0x2,%eax
	je L_416874
L_104035:
	cmpl $0x3,%eax
	jne L_416873
L_104038:
	movb $0x0,0x38(%rbp)
L_104039:
	leaq L_104057(%rip),%r15
	movq %r15,0x20(%rbp)
	movq %rbp,%r15
	addq $0x28,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movb $0x2,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_104040+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_416873:
L_104037:
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq (globalObjptr+0x778)(%rip),%r14
	movq %r14,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq %r15,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416874:
L_104071:
	movb $0x1,0x38(%rbp)
	jmp L_104039
.p2align 0x4
L_416875:
L_104072:
	movb $0x2,0x38(%rbp)
	jmp L_104039
.p2align 0x4
L_416876:
L_104073:
	movb $0x3,0x38(%rbp)
	jmp L_104039
.p2align 0x4
L_416877:
L_104030:
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416878:
L_104025:
	movq (globalObjptr+0x19D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416880:
L_104074:
	shrq $0x1,%r15
	movl %r15d,%r13d
	movd %r13d,%xmm15
	movss %xmm15,0x18(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,%r13
	andq $0x1,%r13
	cmpq $0x1,%r13
	jne L_104025
L_104075:
	shrq $0x1,%r15
	movl %r15d,%r13d
	movd %r13d,%xmm15
	movss %xmm15,0x10(%rbp)
	movq 0x0(%rbp),%r15
	movq %r15,%r13
	andq $0x1,%r13
	cmpq $0x1,%r13
	jne L_104025
L_104076:
	shrq $0x1,%r15
	movl %r15d,%r13d
	movd %r13d,%xmm15
	movss %xmm15,0x8(%rbp)
	movq 0x8(%r14),%r15
	cmpq $0x1,0x0(%r15)
	jne L_104030
L_104078:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_104079+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104079
.p2align 0x4
.long 0x7BB
L_104079:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	testl %eax,%eax
	jz L_416884
L_104080:
	cmpl $0x1,%eax
	je L_416883
L_104081:
	cmpl $0x2,%eax
	je L_416882
L_104082:
	cmpl $0x3,%eax
	jne L_104037
L_104084:
	movb $0x0,0xC(%rbp)
L_104085:
	leaq L_104103(%rip),%r15
	movq %r15,0x20(%rbp)
	movq %rbp,%r15
	addq $0x28,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movb $0x2,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_104086+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_416882:
L_104116:
	movb $0x1,0xC(%rbp)
	jmp L_104085
.p2align 0x4
L_416883:
L_104117:
	movb $0x2,0xC(%rbp)
	jmp L_104085
.p2align 0x4
L_416884:
L_104118:
	movb $0x3,0xC(%rbp)
	jmp L_104085
.p2align 0x4
.long 0x14C6
L_104040:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movsd 0x18(%rbp),%xmm15
	mulsd 0x10(%rbp),%xmm15
	addsd 0x8(%rbp),%xmm15
	movsd %xmm15,0x40(%rbp)
	movb $0x1,0x50(%rbp)
	addq $0x50,%rbp
	leaq (L_104041+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
.long 0x474
L_104057:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_104058+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104058
.p2align 0x4
.long 0x479
L_104058:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	testl %eax,%eax
	jz L_416893
L_104059:
	cmpl $0x1,%eax
	je L_416892
L_104060:
	cmpl $0x2,%eax
	je L_416891
L_104061:
	cmpl $0x3,%eax
	jne L_104037
L_104063:
	xorb %dl,%dl
L_104064:
	cmpb %dl,0x38(%rbp)
	je L_104030
L_104065:
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	addq $0x38,%rbp
	leaq (L_104066+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_416891:
L_104068:
	movb $0x1,%dl
	jmp L_104064
.p2align 0x4
L_416892:
L_104069:
	movb $0x2,%dl
	jmp L_104064
.p2align 0x4
L_416893:
L_104070:
	movb $0x3,%dl
	jmp L_104064
.p2align 0x4
.long 0x78C
L_104086:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movss 0x18(%rbp),%xmm15
	mulss 0x10(%rbp),%xmm15
	addss 0x8(%rbp),%xmm15
	movss %xmm15,0x14(%rbp)
	movb $0x1,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_104087+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
.long 0x474
L_104103:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_104104+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104104
.p2align 0x4
.long 0x475
L_104104:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	testl %eax,%eax
	jz L_416898
L_104105:
	cmpl $0x1,%eax
	je L_416897
L_104106:
	cmpl $0x2,%eax
	je L_416896
L_104107:
	cmpl $0x3,%eax
	jne L_104037
L_104109:
	xorb %dl,%dl
L_104110:
	movb 0xC(%rbp),%r15b
	cmpb %dl,%r15b
	je L_104030
L_104111:
	movq 0x28(%rbp),%r14
	movq %r14,(gcState+0x20)(%rip)
	movb %r15b,0x38(%rbp)
	addq $0x38,%rbp
	leaq (L_104066+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_416896:
L_104113:
	movb $0x1,%dl
	jmp L_104110
.p2align 0x4
L_416897:
L_104114:
	movb $0x2,%dl
	jmp L_104110
.p2align 0x4
L_416898:
L_104115:
	movb $0x3,%dl
	jmp L_104110
.p2align 0x4
.long 0x14C7
L_104041:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movsd 0x18(%rbp),%xmm15
	mulsd 0x10(%rbp),%xmm15
	addsd 0x8(%rbp),%xmm15
	movsd %xmm15,0x48(%rbp)
	movb 0x38(%rbp),%r15b
	movb %r15b,0x58(%rbp)
	addq $0x58,%rbp
	leaq (L_104042+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
.long 0x652
L_104066:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	jmp L_104030
.p2align 0x4
.long 0x78C
L_104087:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movss 0x18(%rbp),%xmm15
	mulss 0x10(%rbp),%xmm15
	addss 0x8(%rbp),%xmm15
	movss %xmm15,0x1C(%rbp)
	movb 0xC(%rbp),%r15b
	movb %r15b,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_104088+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
.long 0x14C8
L_104042:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104043
L_104055:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_104056+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104056
.p2align 0x4
.long 0x14C9
L_104056:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
L_104043:
	movsd 0x48(%rbp),%xmm15
	movsd 0x40(%rbp),%xmm14
	ucomisd %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416903
L_104044:
	ucomisd %xmm14,%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416902
L_104045:
	ucomisd %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416901
L_104046:
	xorb %dl,%dl
L_104047:
	cmpb $0x2,%dl
	jne L_104030
L_104049:
	movsd 0x40(%rbp),%xmm15
	movd %xmm15,%r15
	movq 0x30(%rbp),%r14
	movq 0x10(%r14),%r13
	andq %r13,%r15
	cmpq %r15,%r13
	sete %al
	movzbl %al,%eax
	movsd 0x48(%rbp),%xmm14
	movd %xmm14,%r15
	andq %r13,%r15
	cmpq %r15,%r13
	sete %bl
	movzbl %bl,%ebx
	cmpl %ebx,%eax
	jne L_104030
L_104051:
	movq $0x1C8F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movsd %xmm15,%xmm14
	movsd %xmm14,0x0(%r15)
	movq $0x1C91,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416901:
L_104052:
	movb $0x2,%dl
	jmp L_104047
.p2align 0x4
L_416902:
L_104053:
	movb $0x1,%dl
	jmp L_104047
.p2align 0x4
L_416903:
L_104054:
	movb $0x3,%dl
	jmp L_104047
.p2align 0x4
.long 0x78C
L_104088:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104089
L_104101:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_104102+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104102
.p2align 0x4
.long 0x7BB
L_104102:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_104089:
	movss 0x1C(%rbp),%xmm15
	movss 0x14(%rbp),%xmm14
	ucomiss %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416909
L_104090:
	ucomiss %xmm14,%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416908
L_104091:
	ucomiss %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416907
L_104092:
	xorb %dl,%dl
L_104093:
	cmpb $0x2,%dl
	jne L_104030
L_104095:
	movss 0x14(%rbp),%xmm15
	movd %xmm15,%r15d
	movq 0x38(%rbp),%r14
	movl 0xC(%r14),%r13d
	andl %r13d,%r15d
	cmpl %r15d,%r13d
	sete %al
	movzbl %al,%eax
	movss 0x1C(%rbp),%xmm14
	movd %xmm14,%r15d
	andl %r13d,%r15d
	cmpl %r15d,%r13d
	sete %bl
	movzbl %bl,%ebx
	cmpl %ebx,%eax
	jne L_104030
L_104097:
	movd %xmm15,%r15d
	movl %r15d,%r14d
	shlq $0x1,%r14
	orq $0x1,%r14
	movq $0x1C91,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r15,0x0(%rbp)
	addq $0x10,%r12
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416907:
L_104098:
	movb $0x2,%dl
	jmp L_104093
.p2align 0x4
L_416908:
L_104099:
	movb $0x1,%dl
	jmp L_104093
.p2align 0x4
L_416909:
L_104100:
	movb $0x3,%dl
	jmp L_104093
.text
.p2align 0x4
.globl x_1529
.hidden x_1529
x_1529:
L_104121:
	movq (gcState+0x20)(%rip),%r15
	movq %r15,0x28(%rbp)
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_104122
L_104219:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_104220+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104220
.p2align 0x4
.long 0x75D
L_104220:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_104122:
	movq 0x18(%rbp),%r15
	movq 0x10(%r15),%r14
	movq %r14,0x30(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x0(%r15),%r14
	movq 0x10(%rbp),%r15
	movq %r15,%r13
	andq $0x1,%r13
	cmpq $0x1,%r13
	je L_416918
L_104123:
	movsd 0x0(%r15),%xmm15
	movsd %xmm15,0x18(%rbp)
L_104124:
	movq 0x8(%rbp),%r15
	movq %r15,%r13
	andq $0x3,%r13
	jnz L_104125
L_104126:
	movsd 0x0(%r15),%xmm15
	movsd %xmm15,0x10(%rbp)
L_104127:
	movq 0x0(%rbp),%r15
	movq %r15,%r13
	andq $0x3,%r13
	jnz L_416916
L_104128:
	movsd 0x0(%r15),%xmm15
	movsd %xmm15,0x8(%rbp)
	movq 0x8(%r14),%r15
	cmpq $0x1,0x0(%r15)
	jne L_416915
L_104131:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_104132+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104132
.p2align 0x4
.long 0x79E
L_104132:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	testl %eax,%eax
	jz L_416914
L_104133:
	cmpl $0x1,%eax
	je L_416913
L_104134:
	cmpl $0x2,%eax
	je L_416912
L_104135:
	cmpl $0x3,%eax
	jne L_416911
L_104138:
	movb $0x0,0x38(%rbp)
L_104139:
	leaq L_104157(%rip),%r15
	movq %r15,0x20(%rbp)
	movq %rbp,%r15
	addq $0x28,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movb $0x2,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_104140+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_416911:
L_104137:
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq (globalObjptr+0x778)(%rip),%r14
	movq %r14,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq %r15,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416912:
L_104171:
	movb $0x1,0x38(%rbp)
	jmp L_104139
.p2align 0x4
L_416913:
L_104172:
	movb $0x2,0x38(%rbp)
	jmp L_104139
.p2align 0x4
L_416914:
L_104173:
	movb $0x3,0x38(%rbp)
	jmp L_104139
.p2align 0x4
L_416915:
L_104130:
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416916:
L_104125:
	movq (globalObjptr+0x19D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416918:
L_104174:
	shrq $0x1,%r15
	movl %r15d,%r13d
	movd %r13d,%xmm15
	movss %xmm15,0x18(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,%r13
	andq $0x1,%r13
	cmpq $0x1,%r13
	jne L_104125
L_104175:
	shrq $0x1,%r15
	movl %r15d,%r13d
	movd %r13d,%xmm15
	movss %xmm15,0x10(%rbp)
	movq 0x0(%rbp),%r15
	movq %r15,%r13
	andq $0x1,%r13
	cmpq $0x1,%r13
	jne L_104125
L_104176:
	shrq $0x1,%r15
	movl %r15d,%r13d
	movd %r13d,%xmm15
	movss %xmm15,0x8(%rbp)
	movq 0x8(%r14),%r15
	cmpq $0x1,0x0(%r15)
	jne L_104130
L_104178:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_104179+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104179
.p2align 0x4
.long 0x7BB
L_104179:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	testl %eax,%eax
	jz L_416922
L_104180:
	cmpl $0x1,%eax
	je L_416921
L_104181:
	cmpl $0x2,%eax
	je L_416920
L_104182:
	cmpl $0x3,%eax
	jne L_104137
L_104184:
	movb $0x0,0xC(%rbp)
L_104185:
	leaq L_104203(%rip),%r15
	movq %r15,0x20(%rbp)
	movq %rbp,%r15
	addq $0x28,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movb $0x2,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_104186+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_416920:
L_104216:
	movb $0x1,0xC(%rbp)
	jmp L_104185
.p2align 0x4
L_416921:
L_104217:
	movb $0x2,0xC(%rbp)
	jmp L_104185
.p2align 0x4
L_416922:
L_104218:
	movb $0x3,0xC(%rbp)
	jmp L_104185
.p2align 0x4
.long 0x14C6
L_104140:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movsd 0x18(%rbp),%xmm15
	mulsd 0x10(%rbp),%xmm15
	subsd 0x8(%rbp),%xmm15
	movsd %xmm15,0x40(%rbp)
	movb $0x1,0x50(%rbp)
	addq $0x50,%rbp
	leaq (L_104141+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
.long 0x474
L_104157:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_104158+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104158
.p2align 0x4
.long 0x479
L_104158:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	testl %eax,%eax
	jz L_416931
L_104159:
	cmpl $0x1,%eax
	je L_416930
L_104160:
	cmpl $0x2,%eax
	je L_416929
L_104161:
	cmpl $0x3,%eax
	jne L_104137
L_104163:
	xorb %dl,%dl
L_104164:
	cmpb %dl,0x38(%rbp)
	je L_104130
L_104165:
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	addq $0x38,%rbp
	leaq (L_104166+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_416929:
L_104168:
	movb $0x1,%dl
	jmp L_104164
.p2align 0x4
L_416930:
L_104169:
	movb $0x2,%dl
	jmp L_104164
.p2align 0x4
L_416931:
L_104170:
	movb $0x3,%dl
	jmp L_104164
.p2align 0x4
.long 0x78C
L_104186:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movss 0x18(%rbp),%xmm15
	mulss 0x10(%rbp),%xmm15
	subss 0x8(%rbp),%xmm15
	movss %xmm15,0x14(%rbp)
	movb $0x1,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_104187+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
.long 0x474
L_104203:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_104204+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104204
.p2align 0x4
.long 0x475
L_104204:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	testl %eax,%eax
	jz L_416936
L_104205:
	cmpl $0x1,%eax
	je L_416935
L_104206:
	cmpl $0x2,%eax
	je L_416934
L_104207:
	cmpl $0x3,%eax
	jne L_104137
L_104209:
	xorb %dl,%dl
L_104210:
	movb 0xC(%rbp),%r15b
	cmpb %dl,%r15b
	je L_104130
L_104211:
	movq 0x28(%rbp),%r14
	movq %r14,(gcState+0x20)(%rip)
	movb %r15b,0x38(%rbp)
	addq $0x38,%rbp
	leaq (L_104166+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_416934:
L_104213:
	movb $0x1,%dl
	jmp L_104210
.p2align 0x4
L_416935:
L_104214:
	movb $0x2,%dl
	jmp L_104210
.p2align 0x4
L_416936:
L_104215:
	movb $0x3,%dl
	jmp L_104210
.p2align 0x4
.long 0x14C7
L_104141:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movsd 0x18(%rbp),%xmm15
	mulsd 0x10(%rbp),%xmm15
	subsd 0x8(%rbp),%xmm15
	movsd %xmm15,0x48(%rbp)
	movb 0x38(%rbp),%r15b
	movb %r15b,0x58(%rbp)
	addq $0x58,%rbp
	leaq (L_104142+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
.long 0x652
L_104166:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	jmp L_104130
.p2align 0x4
.long 0x78C
L_104187:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movss 0x18(%rbp),%xmm15
	mulss 0x10(%rbp),%xmm15
	subss 0x8(%rbp),%xmm15
	movss %xmm15,0x1C(%rbp)
	movb 0xC(%rbp),%r15b
	movb %r15b,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_104188+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
.long 0x14C8
L_104142:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104143
L_104155:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_104156+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104156
.p2align 0x4
.long 0x14C9
L_104156:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
L_104143:
	movsd 0x48(%rbp),%xmm15
	movsd 0x40(%rbp),%xmm14
	ucomisd %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416941
L_104144:
	ucomisd %xmm14,%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416940
L_104145:
	ucomisd %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416939
L_104146:
	xorb %dl,%dl
L_104147:
	cmpb $0x2,%dl
	jne L_104130
L_104149:
	movsd 0x40(%rbp),%xmm15
	movd %xmm15,%r15
	movq 0x30(%rbp),%r14
	movq 0x10(%r14),%r13
	andq %r13,%r15
	cmpq %r15,%r13
	sete %al
	movzbl %al,%eax
	movsd 0x48(%rbp),%xmm14
	movd %xmm14,%r15
	andq %r13,%r15
	cmpq %r15,%r13
	sete %bl
	movzbl %bl,%ebx
	cmpl %ebx,%eax
	jne L_104130
L_104151:
	movq $0x1C8F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movsd %xmm15,%xmm14
	movsd %xmm14,0x0(%r15)
	movq $0x1C91,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416939:
L_104152:
	movb $0x2,%dl
	jmp L_104147
.p2align 0x4
L_416940:
L_104153:
	movb $0x1,%dl
	jmp L_104147
.p2align 0x4
L_416941:
L_104154:
	movb $0x3,%dl
	jmp L_104147
.p2align 0x4
.long 0x78C
L_104188:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104189
L_104201:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_104202+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104202
.p2align 0x4
.long 0x7BB
L_104202:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_104189:
	movss 0x1C(%rbp),%xmm15
	movss 0x14(%rbp),%xmm14
	ucomiss %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416947
L_104190:
	ucomiss %xmm14,%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416946
L_104191:
	ucomiss %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_416945
L_104192:
	xorb %dl,%dl
L_104193:
	cmpb $0x2,%dl
	jne L_104130
L_104195:
	movss 0x14(%rbp),%xmm15
	movd %xmm15,%r15d
	movq 0x38(%rbp),%r14
	movl 0xC(%r14),%r13d
	andl %r13d,%r15d
	cmpl %r13d,%r15d
	sete %al
	movzbl %al,%eax
	movss 0x1C(%rbp),%xmm14
	movd %xmm14,%r15d
	andl %r13d,%r15d
	cmpl %r15d,%r13d
	sete %bl
	movzbl %bl,%ebx
	cmpl %ebx,%eax
	jne L_104130
L_104197:
	movd %xmm15,%r15d
	movl %r15d,%r14d
	shlq $0x1,%r14
	orq $0x1,%r14
	movq $0x1C91,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r15,0x0(%rbp)
	addq $0x10,%r12
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416945:
L_104198:
	movb $0x2,%dl
	jmp L_104193
.p2align 0x4
L_416946:
L_104199:
	movb $0x1,%dl
	jmp L_104193
.p2align 0x4
L_416947:
L_104200:
	movb $0x3,%dl
	jmp L_104193
.text
.p2align 0x4
.globl loop_3827
.hidden loop_3827
loop_3827:
L_104221:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_104222
L_104404:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_104405+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104405
.p2align 0x4
.long 0x4AF
L_104405:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_104222:
	movq 0x0(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x10(%rbp),%r15
	movq %r15,0x30(%rbp)
.p2align 0x4,,0x7
loop_1132:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_416974
.p2align 0x4,,0x7
L_104223:
	movq 0x18(%rbp),%r15
	movq 0x60(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x58(%r15),%r14
	movq 0x50(%r15),%r13
	movq 0x28(%r15),%r11
	movq %r11,0x40(%rbp)
	movq 0x20(%r15),%r11
	movq 0x18(%r15),%r10
	movq 0x8(%r15),%r9
	movq %r9,0x48(%rbp)
	movq 0x0(%r15),%r9
	movq %r9,0x50(%rbp)
	movq 0x30(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%rax
	shrq $0x1,%rax
	subq $0xEC5,%rax
	cmpq $0xF,%rax
	ja L_416949
	jmp *jumpTable_199(,%rax,8)
.data
.p2align 0x4
jumpTable_199:
.quad L_416973,L_416972,L_416971,L_416970,L_416966,L_416965,L_416964,L_416963,L_416960,L_416959,L_416958,L_416957,L_416956,L_416953,L_416952,L_416950
.text
.p2align 0x4
L_416949:
L_104224:
	movq 0x30(%rbp),%r15
	movq 0x0(%r15),%r14
	movq 0x0(%r14),%r13
	movq %r13,0x8(%rbp)
	movq 0x8(%r14),%r13
	movq %r13,0x0(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x10(%rbp)
	jmp sendVar_0
.p2align 0x4
L_416950:
L_104401:
	movq 0x30(%rbp),%r13
	movq 0x18(%r13),%r15
	movq 0x10(%r13),%r14
	movq 0x8(%r13),%r11
	movq 0x0(%r13),%r9
	movq $0x4747,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x0(%r13)
	movq %r11,0x18(%r13)
	movq %r10,0x20(%r13)
	movq %r15,0x28(%r13)
	addq $0x40,%r12
	movq 0x18(%rbp),%r11
	movq %r11,0x8(%r13)
	movq 0x28(%rbp),%r11
	movq %r11,0x10(%r13)
	movq 0x20(%rbp),%r11
	movq %r11,0x30(%r13)
	movq %r9,%r15
	movq %r13,%r14
loops_0:
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r13
	movl %r13d,%r11d
	movslq %r11d,%r10
	cmpq %r13,%r10
	jne L_416951
L_104228:
	movq $0x315,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movl %r11d,0x0(%r13)
	movq %r15,0x18(%r13)
	movq %r14,0x20(%r13)
	addq $0x30,%r12
	movl $0x0,0x4(%r13)
	movq 0x18(%rbp),%r15
	movq %r15,0x8(%r13)
	movq 0x28(%rbp),%r15
	movq %r15,0x10(%r13)
	movq %r13,0x10(%rbp)
	movq $0x1,0x0(%rbp)
	movl $0x0,0x8(%rbp)
	jmp each_0
.p2align 0x4
L_416951:
L_104227:
	movq (globalObjptr+0x518)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416952:
L_104400:
	movq 0x30(%rbp),%r14
	movq 0x10(%r14),%r15
	movq 0x8(%r14),%r13
	movq 0x0(%r14),%r11
	movq $0x474D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r13,0x0(%r14)
	movq %r10,0x10(%r14)
	movq %r15,0x18(%r14)
	addq $0x30,%r12
	movq 0x28(%rbp),%r13
	movq %r13,0x8(%r14)
	movq 0x20(%rbp),%r13
	movq %r13,0x20(%r14)
	movq %r11,%r15
	jmp loops_0
.p2align 0x4
L_416953:
L_104367:
	movq 0x30(%rbp),%r15
	movq 0x18(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x10(%r15),%r14
	movq %r14,0x40(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x48(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x50(%rbp)
	movq 0x0(%r10),%r15
	movq %r15,0x58(%rbp)
	movq 0x30(%r10),%r15
	movq 0x8(%r15),%r14
	movq 0x0(%r15),%r13
	movq %r13,0x60(%rbp)
L_104368:
	movq 0x20(%rbp),%r15
	movq %r15,%r13
	andq $0x3,%r13
	jnz L_416955
L_104398:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r13
	shrq $0x1,%r13
	cmpq $0xEDB,%r13
	jne L_416954
L_104399:
	movq 0x8(%r15),%r13
	movq %r13,0x30(%rbp)
	movq 0x0(%r15),%r13
	movq 0x10(%r15),%r15
	movq %r15,0x20(%rbp)
	movq %r13,0x68(%rbp)
L_104373:
	movq 0x60(%rbp),%r15
	movq %r15,0x78(%rbp)
	addq $0x78,%rbp
	leaq (L_104374+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_416954:
	xchgq %r14,%r15
L_104369:
	movq %r15,0x70(%rbp)
	addq $0x70,%rbp
	leaq (L_104370+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_416955:
	xchgq %r14,%r15
	jmp L_104369
.p2align 0x4
L_416956:
L_104366:
	movq 0x30(%rbp),%r13
	movq 0x10(%r13),%r15
	movq 0x8(%r13),%r14
	movq 0x0(%r13),%r11
	movq $0x474B,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x8(%r13)
	movq %r14,0x18(%r13)
	addq $0x28,%r12
	movq 0x40(%rbp),%r10
	movq %r10,0x0(%r13)
	movq 0x20(%rbp),%r10
	movq %r10,0x10(%r13)
	movq %r11,%r15
	movq %r13,%r14
	jmp loops_0
.p2align 0x4
L_416957:
L_104347:
	movq %r11,0x58(%rbp)
	movq 0x30(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r14,0x28(%rbp)
	movq %r14,0x50(%rbp)
	addq $0x50,%rbp
	leaq (L_104348+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp ofConst_0
.p2align 0x4
L_416958:
L_104346:
	movq 0x30(%rbp),%r15
	movl 0x0(%r15),%r13d
	movq 0x8(%r15),%r11
	movq 0x10(%r15),%r15
	movq %r15,0x30(%rbp)
	movq $0x1DB3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movl %r13d,0x0(%r15)
	movq %r11,0x20(%r15)
	movq %r14,0x28(%r15)
	addq $0x38,%r12
	movl $0x0,0x4(%r15)
	movq 0x18(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x18(%r15)
	movq %r15,0x20(%rbp)
	jmp loop_1132
.p2align 0x4
L_416959:
L_104310:
	movq 0x30(%rbp),%r15
	movq 0x18(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x10(%r15),%r14
	movq %r14,0x40(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x48(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x68(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x58,%rbp
	leaq (L_104311+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3827
.p2align 0x4
L_416960:
L_104250:
	movq 0x30(%rbp),%r15
	movq 0x18(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x10(%r15),%r14
	movq %r14,0x40(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x58(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x60(%rbp)
	movq 0x0(%r10),%r15
	movq %r15,0x68(%rbp)
	movq 0x30(%r10),%r15
	movq 0x8(%r15),%r14
	movq 0x0(%r15),%r13
	movq %r13,0x70(%rbp)
L_104251:
	movq 0x20(%rbp),%r15
	movq %r15,%r13
	andq $0x3,%r13
	jnz L_416962
L_104308:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r13
	shrq $0x1,%r13
	cmpq $0xEDB,%r13
	jne L_416961
L_104309:
	movq 0x8(%r15),%r13
	movq %r13,0x30(%rbp)
	movq 0x0(%r15),%r13
	movq 0x10(%r15),%r15
	movq %r15,0x20(%rbp)
	movq %r13,0x78(%rbp)
L_104256:
	movq 0x70(%rbp),%r15
	movq %r15,0x88(%rbp)
	addq $0x88,%rbp
	leaq (L_104257+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_416961:
	xchgq %r14,%r15
L_104252:
	movq %r15,0x80(%rbp)
	addq $0x80,%rbp
	leaq (L_104253+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_416962:
	xchgq %r14,%r15
	jmp L_104252
.p2align 0x4
L_416963:
L_104249:
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x0(%rbp)
	movq 0x18(%rbp),%r14
	movq %r14,0x8(%rbp)
	movq 0x20(%rbp),%r14
	movq %r14,0x10(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x18(%rbp)
	jmp each_1
.p2align 0x4
L_416964:
L_104248:
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq 0x0(%r15),%r15
	movq %r15,0x30(%rbp)
	movq $0x4741,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x18(%r15)
	addq $0x28,%r12
	movq 0x18(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0x1DB1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x20(%rbp)
	addq $0x10,%r12
	jmp loop_1132
.p2align 0x4
L_416965:
L_104247:
	movq 0x30(%rbp),%r14
	movq 0x18(%r14),%r15
	movq 0x10(%r14),%r13
	movq 0x8(%r14),%r11
	movq 0x0(%r14),%r10
	movq $0x4751,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	movq %r13,0x18(%r14)
	movq %r11,0x20(%r14)
	addq $0x30,%r12
	movq 0x40(%rbp),%r13
	movq %r13,0x0(%r14)
	movq 0x20(%rbp),%r13
	movq %r13,0x10(%r14)
	movq %r10,%r15
	jmp loops_0
.p2align 0x4
L_416966:
L_104232:
	movq 0x30(%rbp),%r14
	movq 0x0(%r14),%r15
	movq $0x1D73,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x28(%rbp)
	movq %r15,0x0(%r14)
	addq $0x10,%r12
	movq 0x40(%rbp),%r14
	movq 0x10(%r14),%r15
L_104233:
	movq 0x20(%rbp),%r14
	movq %r14,%r13
	andq $0x3,%r13
	jnz L_104234
L_104244:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0xED9,%r13
	je L_416968
	cmpq $0xEDB,%r13
	je L_416967
L_104234:
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_104235+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_416967:
L_104246:
	movq 0x20(%rbp),%r11
	movq 0x10(%r11),%r15
	movq 0x8(%r11),%r13
	movq 0x0(%r11),%r14
L_104239:
	movq %r15,0x0(%rbp)
	movq $0x937,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x20,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0x1DB9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r13,0x8(%r14)
	movq %r14,0x8(%rbp)
	addq $0x18,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416968:
L_104245:
	movq 0x20(%rbp),%r15
	movl 0x0(%r15),%r14d
	movl %r14d,0x10(%rbp)
	movq 0x28(%r15),%r14
	movq %r14,0x18(%rbp)
	movq 0x18(%r15),%r14
	movq 0x10(%r15),%r13
	movq %r13,0x30(%rbp)
	movq 0x8(%r15),%r13
	movq 0x20(%r15),%r15
	movq %r15,0x20(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq %r13,0x38(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq %r14,0x28(%rbp)
	jmp x_1535
.p2align 0x4
L_416970:
L_104231:
	movq 0x30(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r14,0x30(%rbp)
	movq $0x473F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1DB1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x20(%rbp)
	addq $0x10,%r12
	jmp loop_1132
.p2align 0x4
L_416971:
L_104230:
	movq 0x30(%rbp),%r11
	movq 0x10(%r11),%r15
	movq 0x8(%r11),%r9
	movq 0x0(%r11),%r8
	movq $0x474F,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r9,0x10(%r11)
	movq %r13,0x18(%r11)
	movq %r14,0x20(%r11)
	movq %r10,0x28(%r11)
	movq %r15,0x30(%r11)
	addq $0x48,%r12
	movq 0x18(%rbp),%r13
	movq %r13,0x0(%r11)
	movq 0x28(%rbp),%r13
	movq %r13,0x8(%r11)
	movq 0x20(%rbp),%r13
	movq %r13,0x38(%r11)
	movq %r8,%r15
	movq %r11,%r14
	jmp loops_0
.p2align 0x4
L_416972:
L_104229:
	movq 0x30(%rbp),%r15
	movq 0x10(%r15),%r14
	movl 0x0(%r15),%r13d
	movq 0x8(%r15),%r15
	movq %r15,0x30(%rbp)
	movq $0x4743,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movl %r13d,0x0(%r15)
	movq %r14,0x10(%r15)
	addq $0x28,%r12
	movl $0x0,0x4(%r15)
	movq 0x40(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x18(%r15)
	movq $0x1DB1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x20(%rbp)
	addq $0x10,%r12
	jmp loop_1132
.p2align 0x4
L_416973:
L_104225:
	movq 0x30(%rbp),%r13
	movq 0x8(%r13),%r15
	movq 0x0(%r13),%r11
	movq $0x4749,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x20,%r12
	movq 0x40(%rbp),%r13
	movq %r13,0x0(%r14)
	movq 0x20(%rbp),%r13
	movq %r13,0x10(%r14)
	movq %r11,%r15
	jmp loops_0
.p2align 0x4
L_416974:
L_104402:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_104403+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104403
.p2align 0x4
.long 0x720
L_104403:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	jmp L_104223
.p2align 0x4
.long 0x99E
L_104374:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movl 0x78(%rbp),%r15d
	movl %r15d,0x60(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104375
L_104394:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_104395+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104395
.p2align 0x4
.long 0xC2A
L_104395:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_104375:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x70(%rbp)
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x78(%rbp)
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x80(%rbp)
	addq $0x28,%r12
	movl 0x60(%rbp),%r11d
	movl %r11d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	movq (globalObjptr+0xEC10)(%rip),%r15
	movq %r15,0x18(%r13)
	movq $0x9C3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x68(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x3EFB,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x90(%rbp)
	addq $0x10,%r12
	movl $0x1,0x98(%rbp)
	addq $0x90,%rbp
	leaq (L_104376+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
.long 0x14DE
L_104370:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movl 0x70(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104371
L_104396:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_104397+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104397
.p2align 0x4
.long 0x14E4
L_104397:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_104371:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x68(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x30(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq %r13,0x78(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x80(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x88(%rbp)
	addq $0x78,%rbp
	leaq (L_104372+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sendVar_0
.p2align 0x4
.long 0x7AC
L_104348:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104349
L_104364:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_104365+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104365
.p2align 0x4
.long 0x7A4
L_104365:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_104349:
	movq $0x1D77,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x38(%rbp)
	addq $0x10,%r12
	movq 0x28(%rbp),%r13
	movq %r13,0x0(%r14)
	movq 0x40(%rbp),%r14
	movq 0x10(%r14),%r15
L_104350:
	movq 0x20(%rbp),%r14
	movq %r14,%r13
	andq $0x3,%r13
	jnz L_104351
L_104361:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0xED9,%r13
	je L_416979
	cmpq $0xEDB,%r13
	je L_416978
L_104351:
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_104352+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_416978:
L_104363:
	movq 0x20(%rbp),%r11
	movq 0x10(%r11),%r15
	movq 0x8(%r11),%r13
	movq 0x0(%r11),%r14
L_104356:
	movq %r15,0x0(%rbp)
	movq $0x937,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x20,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0x1DB9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r13,0x8(%r14)
	movq %r14,0x8(%rbp)
	addq $0x18,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416979:
L_104362:
	movq 0x20(%rbp),%r15
	movl 0x0(%r15),%r14d
	movl %r14d,0x10(%rbp)
	movq 0x28(%r15),%r14
	movq %r14,0x18(%rbp)
	movq 0x18(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x10(%r15),%r14
	movq 0x8(%r15),%r13
	movq 0x20(%r15),%r15
	movq %r15,0x20(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq %r14,0x30(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq %r13,0x38(%rbp)
	jmp x_1535
.p2align 0x4
.long 0x9B4
L_104311:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x50(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0x58(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104312
L_104344:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_104345+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104345
.p2align 0x4
.long 0x14DC
L_104345:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_104312:
	movq 0x48(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movq %r14,0x60(%rbp)
	movl %r14d,%r15d
	movslq %r15d,%r13
	cmpq %r14,%r13
	jne L_104227
L_104314:
	cmpl $0x0,%r15d
	je L_416994
	cmpl $0x1,%r15d
	je L_416992
L_104315:
	movq 0x38(%rbp),%r15
	movq 0x8(%r15),%r14
L_104316:
	movq %r14,%r15
	andq $0x3,%r15
	jnz L_104317
L_104318:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0xEB2,%r15
	jne L_416990
L_104319:
	movq 0x0(%r14),%r15
	movq %r15,0x68(%rbp)
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movl %r13d,0x70(%rbp)
	movslq %r13d,%r11
	cmpq %r14,%r11
	jne L_104227
L_104321:
	cmpl $0x0,%r13d
	jl L_416988
L_104322:
	movq $0x1,0x78(%rbp)
	movl $0x0,0x74(%rbp)
.p2align 0x4,,0x7
loop_1133:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_416987
.p2align 0x4,,0x7
L_104323:
	movl 0x74(%rbp),%r15d
	cmpl 0x70(%rbp),%r15d
	jnl L_416983
L_104333:
	movslq %r15d,%r14
	movq 0x68(%rbp),%r13
	movq 0x0(%r13,%r14,8),%r11
	cmpq 0x60(%rbp),%r14
	jnb L_416982
L_104336:
	movq 0x48(%rbp),%r13
	movq 0x0(%r13,%r14,8),%r10
	movq $0x1D71,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movl %r15d,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq 0x40(%rbp),%r13
	movq %r13,0x8(%r14)
	movq $0x937,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r10,0x0(%r13)
	movq %r11,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x20,%r12
	movq $0x1DB9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r13,0x0(%r14)
	addq $0x18,%r12
	movq 0x78(%rbp),%r13
	movq %r13,0x8(%r14)
	movq %r14,0x78(%rbp)
	incl %r15d
	movl %r15d,0x74(%rbp)
	jmp loop_1133
.p2align 0x4
L_416982:
L_104335:
	movq $0x6,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416983:
L_104324:
	movq 0x78(%rbp),%r14
	cmpq $0x1,%r14
	je L_416986
L_104325:
	movq 0x0(%r14),%r13
	movq %r13,0x60(%rbp)
	movq 0x58(%rbp),%r13
	movq %r13,0x68(%rbp)
	movq 0x8(%r14),%r13
	movq %r13,0x58(%rbp)
.p2align 0x4,,0x7
L_104326:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_416985
.p2align 0x4,,0x7
L_104327:
	movq $0x1DB9,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x60(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x68(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x58(%rbp),%r14
	cmpq $0x1,%r14
	je L_416984
L_104328:
	movq %r15,0x68(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x58(%rbp)
	movq %r15,0x60(%rbp)
	jmp L_104326
.p2align 0x4
L_416984:
L_104329:
	movq %r15,0x8(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416985:
L_104330:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_104331+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104331
.p2align 0x4
.long 0xCBF
L_104331:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	jmp L_104327
.p2align 0x4
L_416986:
L_104332:
	movq 0x50(%rbp),%r13
	movq %r13,0x0(%rbp)
	movq 0x58(%rbp),%r13
	movq %r13,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416987:
L_104337:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_104338+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104338
.p2align 0x4
.long 0x14DB
L_104338:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	jmp L_104323
.p2align 0x4
L_416988:
L_104339:
	movq (globalObjptr+0x520)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416990:
L_104317:
	movq $0x9,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_416992:
L_104341:
	cmpq $0x0,0x60(%rbp)
	jna L_104335
L_104343:
	movq 0x48(%rbp),%r15
	movq 0x0(%r15),%r14
	movq $0x1D6D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x40(%rbp),%r13
	movq %r13,0x0(%r15)
	movq $0x937,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x0(%r13)
	movq %r15,0x10(%r13)
	addq $0x20,%r12
	movq 0x38(%rbp),%r15
	movq %r15,0x8(%r13)
	movq %r13,0x60(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq $0x1,0x58(%rbp)
	jmp L_104326
.p2align 0x4
L_416994:
L_104340:
	movq 0x50(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x14CC
L_104257:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	movl 0x88(%rbp),%r15d
	movl %r15d,0x70(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104258
L_104304:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_104305+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104305
.p2align 0x4
.long 0x14D9
L_104305:
	addq $0xFFFFFFFFFFFFFF78,%rbp
L_104258:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x80(%rbp)
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x88(%rbp)
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x90(%rbp)
	addq $0x28,%r12
	movl 0x70(%rbp),%r11d
	movl %r11d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	movq (globalObjptr+0xEC10)(%rip),%r15
	movq %r15,0x18(%r13)
	movq $0x9C3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x78(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x3EFB,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0xA0(%rbp)
	addq $0x10,%r12
	movl $0x1,0xA8(%rbp)
	addq $0xA0,%rbp
	leaq (L_104259+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
.long 0x14CA
L_104253:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movl 0x80(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104254
L_104306:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x80,%rbp
	leaq (L_104307+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104307
.p2align 0x4
.long 0x14DA
L_104307:
	addq $0xFFFFFFFFFFFFFF80,%rbp
L_104254:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x78(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x30(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq %r13,0x88(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x90(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x98(%rbp)
	addq $0x88,%rbp
	leaq (L_104255+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sendVar_0
.p2align 0x4
.long 0x512
L_104235:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl 0x48(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104236
L_104242:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_104243+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104243
.p2align 0x4
.long 0x816
L_104243:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_104236:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x40(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x30(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq %r13,0x50(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x60(%rbp)
	addq $0x50,%rbp
	leaq (L_104237+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sendVar_0
.p2align 0x4
.long 0x14E0
L_104376:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq 0x90(%rbp),%r15
	movq %r15,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104377
L_104392:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_104393+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104393
.p2align 0x4
.long 0x14E2
L_104393:
	addq $0xFFFFFFFFFFFFFF70,%rbp
L_104377:
	movq $0x939,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x68(%rbp)
	addq $0x10,%r12
	movq 0x30(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_417003
L_104378:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_104379:
	incl %ecx
	movl %ecx,0x30(%rbp)
	jo L_417002
L_104380:
	cmpq $0x1,%r15
	je L_417000
L_104381:
	movq 0x8(%r15),%r15
	jmp L_104379
.p2align 0x4
L_417000:
L_104382:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104383
L_104389:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_104390+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104390
.p2align 0x4
.long 0x14E3
L_104390:
	addq $0xFFFFFFFFFFFFFF70,%rbp
L_104383:
	movl 0x30(%rbp),%ecx
L_104384:
	movl %ecx,0x98(%rbp)
	movq $0x4067,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x68(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x90(%rbp)
	addq $0x90,%rbp
	leaq (L_104385+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_5
.p2align 0x4
L_417002:
L_104263:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417003:
L_104391:
	xorl %ecx,%ecx
	jmp L_104384
.p2align 0x4
.long 0x14DF
L_104372:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq 0x78(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0x80(%rbp),%r15
	movq %r15,0x30(%rbp)
	jmp L_104373
.p2align 0x4
.long 0x75E
L_104352:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl 0x48(%rbp),%r15d
	movl %r15d,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104353
L_104359:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_104360+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104360
.p2align 0x4
.long 0x7C1
L_104360:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_104353:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x40(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x28(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq %r13,0x50(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x60(%rbp)
	addq $0x50,%rbp
	leaq (L_104354+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sendVar_0
.p2align 0x4
.long 0x14CD
L_104259:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104260
L_104302:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA0,%rbp
	leaq (L_104303+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104303
.p2align 0x4
.long 0x14D7
L_104303:
	addq $0xFFFFFFFFFFFFFF60,%rbp
L_104260:
	movq $0x939,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x78(%rbp)
	addq $0x10,%r12
	movq 0x30(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_417009
L_104261:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_104262:
	incl %ecx
	movl %ecx,0x30(%rbp)
	jo L_104263
L_104264:
	cmpq $0x1,%r15
	je L_417006
L_104265:
	movq 0x8(%r15),%r15
	jmp L_104262
.p2align 0x4
L_417006:
L_104266:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104267
L_104299:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA0,%rbp
	leaq (L_104300+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104300
.p2align 0x4
.long 0x14D8
L_104300:
	addq $0xFFFFFFFFFFFFFF60,%rbp
L_104267:
	movl 0x30(%rbp),%ecx
L_104268:
	movl %ecx,0xA8(%rbp)
	movq $0x4067,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x78(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0xA0(%rbp)
	addq $0xA0,%rbp
	leaq (L_104269+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_5
.p2align 0x4
L_417009:
L_104301:
	xorl %ecx,%ecx
	jmp L_104268
.p2align 0x4
.long 0x14CB
L_104255:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	movq 0x88(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0x90(%rbp),%r15
	movq %r15,0x30(%rbp)
	jmp L_104256
.p2align 0x4
.long 0x9B3
L_104237:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x48(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104238
L_104240:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_104241+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104241
.p2align 0x4
.long 0x113C
L_104241:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
L_104238:
	movq 0x30(%rbp),%r15
	movq 0x48(%rbp),%r13
	movq 0x40(%rbp),%r14
	jmp L_104239
.p2align 0x4
.long 0x14E1
L_104385:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq 0x90(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104386
L_104387:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_104388+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104388
.p2align 0x4
.long 0x14E2
L_104388:
	addq $0xFFFFFFFFFFFFFF70,%rbp
L_104386:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x80(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x18(%r15)
	movq 0x58(%rbp),%r14
	movq 0x0(%r14),%r13
	movq $0x1DBB,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r15,0x0(%r11)
	movq %r13,0x8(%r11)
	addq $0x18,%r12
	movq %r14,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r13
	movb $0x1,0x0(%r13,%r15,1)
	movq %r11,0x0(%r14)
	movq $0x1DB5,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movl 0x60(%rbp),%r14d
	movl %r14d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq (globalObjptr+0xEC10)(%rip),%r14
	movq %r14,0x8(%r15)
	movq 0x78(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x70(%rbp),%r14
	movq %r14,0x18(%r15)
	movq $0x4745,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x18(%r14)
	addq $0x38,%r12
	movq 0x18(%rbp),%r15
	movq %r15,0x0(%r14)
	movq 0x50(%rbp),%r13
	movq %r13,0x8(%r14)
	movq %r15,0x10(%r14)
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%r14)
	movq 0x48(%rbp),%r15
	movq %r15,0x28(%r14)
	movq $0x1DB1,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r15,0x20(%rbp)
	addq $0x10,%r12
	movq 0x40(%rbp),%r15
	movq %r15,0x30(%rbp)
	jmp loop_1132
.p2align 0x4
.long 0x513
L_104354:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x50(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104355
L_104357:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_104358+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104358
.p2align 0x4
.long 0x14DD
L_104358:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_104355:
	movq 0x48(%rbp),%r15
	movq 0x50(%rbp),%r13
	movq 0x40(%rbp),%r14
	jmp L_104356
.p2align 0x4
.long 0x14CE
L_104269:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104270
L_104297:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA0,%rbp
	leaq (L_104298+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104298
.p2align 0x4
.long 0x14D7
L_104298:
	addq $0xFFFFFFFFFFFFFF60,%rbp
L_104270:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x90(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x18(%r15)
	movq 0x68(%rbp),%r14
	movq 0x0(%r14),%r13
	movq $0x1DBB,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r15,0x0(%r11)
	movq %r13,0x8(%r11)
	addq $0x18,%r12
	movq %r14,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r13
	movb $0x1,0x0(%r13,%r15,1)
	movq %r11,0x0(%r14)
	movq $0x1DB5,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x78(%rbp)
	addq $0x28,%r12
	movl 0x70(%rbp),%r14d
	movl %r14d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq (globalObjptr+0xEC10)(%rip),%r14
	movq %r14,0x8(%r15)
	movq 0x88(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x80(%rbp),%r14
	movq %r14,0x18(%r15)
	movq 0x48(%rbp),%r15
	movq %r15,0x88(%rbp)
	addq $0x88,%rbp
	leaq (L_104271+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
.long 0x14CF
L_104271:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	movl 0x88(%rbp),%r15d
	movl %r15d,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104272
L_104295:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_104296+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104296
.p2align 0x4
.long 0x14D6
L_104296:
	addq $0xFFFFFFFFFFFFFF78,%rbp
L_104272:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x30(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x20(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xEC10)(%rip),%r15
	movq %r15,0x18(%r13)
	movq 0x78(%rbp),%r15
	movq %r15,0x88(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x90(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x98(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0xA0(%rbp)
	addq $0x88,%rbp
	leaq (L_104273+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3827
.p2align 0x4
.long 0x14D0
L_104273:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	movq 0x88(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0x90(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104274
L_104293:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_104294+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104294
.p2align 0x4
.long 0x14D5
L_104294:
	addq $0xFFFFFFFFFFFFFF78,%rbp
L_104274:
	movq $0x3EFB,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x60(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x88(%rbp)
	movl $0x1,0x90(%rbp)
	addq $0x88,%rbp
	leaq (L_104275+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
.long 0x14D1
L_104275:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	movq 0x88(%rbp),%r15
	movq %r15,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104276
L_104291:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_104292+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104292
.p2align 0x4
.long 0x14D3
L_104292:
	addq $0xFFFFFFFFFFFFFF78,%rbp
L_104276:
	movq $0x939,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x48(%rbp)
	addq $0x10,%r12
	movq 0x28(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_417020
L_104277:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_104278:
	incl %ecx
	movl %ecx,0x28(%rbp)
	jo L_104263
L_104279:
	cmpq $0x1,%r15
	je L_417017
L_104280:
	movq 0x8(%r15),%r15
	jmp L_104278
.p2align 0x4
L_417017:
L_104281:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104282
L_104288:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_104289+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104289
.p2align 0x4
.long 0x14D4
L_104289:
	addq $0xFFFFFFFFFFFFFF78,%rbp
L_104282:
	movl 0x28(%rbp),%ecx
L_104283:
	movl %ecx,0x90(%rbp)
	movq $0x4067,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x48(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x88(%rbp)
	addq $0x88,%rbp
	leaq (L_104284+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_5
.p2align 0x4
L_417020:
L_104290:
	xorl %ecx,%ecx
	jmp L_104283
.p2align 0x4
.long 0x14D2
L_104284:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	movq 0x88(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104285
L_104286:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_104287+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104287
.p2align 0x4
.long 0x14D3
L_104287:
	addq $0xFFFFFFFFFFFFFF78,%rbp
L_104285:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x38(%rbp),%r13
	movq %r13,0x18(%r15)
	movq 0x50(%rbp),%r13
	movq 0x0(%r13),%r11
	movq $0x1DBB,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,0x0(%r10)
	movq %r11,0x8(%r10)
	addq $0x18,%r12
	movq %r13,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r15,1)
	movq %r10,0x0(%r13)
	movq 0x78(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq %r14,0x28(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x30(%rbp)
	jmp loop_1132
.text
.p2align 0x4
.globl sendVar_0
.hidden sendVar_0
sendVar_0:
L_104406:
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_104854
L_104407:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_417063
L_104408:
	movq 0x10(%rbp),%r15
	cmpq $0x1,%r15
	je L_417062
L_104409:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xED9,%r14
	je L_417061
	cmpq $0xEDA,%r14
	je L_417060
	cmpq $0xEDB,%r14
	je L_417059
L_104410:
	movq 0x0(%r15),%r14
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0x239F,%r15
	je L_417056
	cmpq $0x23A0,%r15
	je L_417037
	cmpq $0x23A1,%r15
	je L_417033
	cmpq $0x23A2,%r15
	je L_417024
L_104411:
	movl 0x0(%r14),%r15d
	movq 0x10(%r14),%r13
	movq 0x8(%r14),%r11
	incl %r15d
	jo L_417023
L_104413:
	movl %r15d,0x8(%rbp)
	movq %r11,0x10(%rbp)
	movq $0x1CE1,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r13,0x8(%r15)
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x0(%rbp)
	jmp each_0
.p2align 0x4
L_417023:
L_104412:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417024:
L_104774:
	movq 0x28(%r14),%r15
	movq %r15,0x8(%rbp)
	movq 0x20(%r14),%r13
	movq %r13,0x10(%rbp)
	movq 0x18(%r14),%r13
	movq %r13,0x18(%rbp)
	movq 0x10(%r14),%r13
	movq %r13,0x20(%rbp)
	movq 0x8(%r14),%r13
	movq %r13,0x28(%rbp)
	movq 0x0(%r14),%r13
	movq %r13,0x30(%rbp)
	cmpq $0x1,%r15
	je L_417025
L_104775:
	movq $0x1,0x40(%rbp)
	movl $0x0,0x48(%rbp)
	addq $0x40,%rbp
	leaq (L_104776+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
L_417025:
L_104839:
	movq 0x28(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xED5,%r14
	je L_417031
L_104841:
	movq 0x0(%r15),%r14
	movq %r14,0x8(%rbp)
	movq $0x1,0x20(%rbp)
L_104799:
	movq 0x8(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	movq %r11,0x28(%rbp)
	cmpq %r11,%r14
	jne L_417030
L_104801:
	testq %r11,%r11
	jz L_417029
L_104802:
	cmpq $0x7FFFFFFF,%r11
	ja L_417028
L_104803:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104804
L_104828:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_104829+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104829
.p2align 0x4
.long 0xE7B
L_104829:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_104804:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x14DF,%rcx
	movq 0x28(%rbp),%rdx
	movq $0x30,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_104805+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104805
.p2align 0x4
.long 0xE7B
L_104805:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq %rax,0x38(%rbp)
L_104806:
	movq $0x0,0x40(%rbp)
loop_1135:
	movq 0x28(%rbp),%r13
	cmpq %r13,0x40(%rbp)
	jl L_417026
L_104807:
	movq 0x38(%rbp),%r13
	movq $0xB03,0xFFFFFFFFFFFFFFF8(%r13)
	movq $0x240F,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq %r13,0x0(%r14)
	movq 0x20(%rbp),%r15
L_104795:
	movq $0x1D83,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x0(%r13)
	movq %r15,0x8(%r13)
	addq $0x20,%r12
	movq 0x0(%rbp),%r15
	movq %r15,0x10(%r13)
	movq %r13,0x0(%rbp)
	movq $0x1,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417026:
L_104808:
	movq 0x40(%rbp),%r15
	movl %r15d,%r14d
	movslq %r14d,%r15
	movq %r15,%r14
	movq %r15,%r13
	imulq $0x18,%r14
	movq 0x8(%rbp),%r11
	movq 0x0(%r11,%r14,1),%r10
	movq %r10,0x48(%rbp)
	imulq $0x18,%r13
	movq 0x8(%r11,%r13,1),%r14
	movq %r14,0x80(%rbp)
	imulq $0x18,%r15
	movq 0x10(%r11,%r15,1),%r14
	movq %r14,0x50(%rbp)
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x58(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x60(%rbp)
	movq 0x18(%rbp),%r14
	movq %r14,0x70(%rbp)
	movq 0x10(%rbp),%r14
	movq %r14,0x78(%rbp)
	movq %r15,0x88(%rbp)
	addq $0x70,%rbp
	leaq (L_104809+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3827
.p2align 0x4
L_417028:
L_104830:
	movq $0x5,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417029:
L_104831:
	movq (globalObjptr+0x1E70)(%rip),%r15
	movq %r15,0x38(%rbp)
	jmp L_104806
.p2align 0x4
L_417030:
L_104453:
	movq (globalObjptr+0x518)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417031:
L_104840:
	movq 0x8(%r15),%r14
	movq 0x0(%r15),%r13
	movq %r13,0x8(%rbp)
	movq $0x1,0x28(%rbp)
	movq %r14,%r15
L_104790:
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r14,%r11
	jne L_104453
L_104792:
	movl %r13d,0x40(%rbp)
	movq $0x39FB,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x18(%r14)
	addq $0x28,%r12
	movq 0x20(%rbp),%r15
	movq %r15,0x0(%r14)
	movq 0x18(%rbp),%r15
	movq %r15,0x8(%r14)
	movq 0x10(%rbp),%r15
	movq %r15,0x10(%r14)
	movq %r14,0x38(%rbp)
	addq $0x38,%rbp
	leaq (L_104793+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_21
.p2align 0x4
L_417033:
L_104759:
	movl 0x0(%r14),%r13d
	movq 0x18(%r14),%r11
	movq %r11,0x8(%rbp)
	movq 0x10(%r14),%r10
	movq %r10,0x10(%rbp)
	movq 0x8(%r14),%r15
	movq $0x1D71,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x18(%rbp)
	movl %r13d,0x0(%r14)
	addq $0x18,%r12
	movl $0x0,0x4(%r14)
	movq 0x0(%rbp),%r13
	movq %r13,0x8(%r14)
	movq 0x10(%r15),%r14
L_104760:
	movq %r11,%r15
	andq $0x3,%r15
	jnz L_417036
L_104771:
	movq 0xFFFFFFFFFFFFFFF8(%r11),%r15
	shrq $0x1,%r15
	cmpq $0xED9,%r15
	je L_417035
	cmpq $0xEDB,%r15
	je L_417034
	movq %r14,%r15
L_104761:
	movq %r15,0x28(%rbp)
	addq $0x28,%rbp
	leaq (L_104762+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_417034:
L_104773:
	movq 0x8(%rbp),%r11
	movq 0x10(%r11),%r15
	movq 0x8(%r11),%r13
	movq 0x0(%r11),%r14
L_104766:
	movq %r15,0x0(%rbp)
	movq $0x937,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x20,%r12
	movq 0x10(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x18(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0x1DB9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r13,0x8(%r14)
	movq %r14,0x8(%rbp)
	addq $0x18,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417035:
L_104772:
	movq 0x8(%rbp),%r15
	movq 0x28(%r15),%r14
	movq 0x20(%r15),%r13
	movq %r13,0x20(%rbp)
	movq 0x18(%r15),%r13
	movq %r13,0x28(%rbp)
	movq 0x10(%r15),%r13
	movq %r13,0x30(%rbp)
	movq 0x8(%r15),%r13
	movq %r13,0x38(%rbp)
	movq 0x10(%rbp),%r13
	movq %r13,0x0(%rbp)
	movl 0x0(%r15),%r13d
	movl %r13d,0x10(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq %r14,0x18(%rbp)
	jmp x_1535
.p2align 0x4
L_417036:
	movq %r14,%r15
	jmp L_104761
.p2align 0x4
L_417037:
L_104426:
	movq 0x18(%r14),%r15
	movq 0x10(%r14),%r13
	movq %r13,0x8(%rbp)
	movq 0x8(%r14),%r13
	movq %r13,0x10(%rbp)
	movq 0x0(%r14),%r13
	movq %r13,0x18(%rbp)
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0x23AA,%r14
	je L_417055
	cmpq $0x23AB,%r14
	je L_417054
	cmpq $0x23AC,%r14
	je L_417038
L_104427:
	movq 0x10(%r15),%r14
	movq 0x8(%r15),%r13
	movq 0x0(%r15),%r11
	movq $0x4759,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r13,0x8(%r15)
	addq $0x20,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0x1D97,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r11,0x0(%r14)
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq %r14,%r15
L_104428:
	movq 0x10(%rbp),%r14
	movq %r14,0x0(%rbp)
	movq %r15,0x10(%rbp)
	jmp loop_3827
.p2align 0x4
L_417038:
L_104432:
	movq 0x10(%r15),%r14
	movq 0x8(%r15),%r13
	movq 0x0(%r15),%r11
	movq %r11,0x20(%rbp)
	movq 0xD8(%r11),%r15
	movq 0xD0(%r11),%r10
	movq %r10,0x28(%rbp)
	movq 0xC8(%r11),%r10
	movq %r10,0x30(%rbp)
	movq 0xC0(%r11),%r10
	movq %r10,0x38(%rbp)
	movq 0xB8(%r11),%r9
	movq 0xB0(%r11),%r8
	movq %r8,0x40(%rbp)
	movq 0xA8(%r11),%r8
	movq %r8,0x48(%rbp)
	movq 0xA0(%r11),%r8
	movq %r8,0x50(%rbp)
	movq 0x98(%r11),%r8
	movq %r8,0x58(%rbp)
	movq 0x90(%r11),%r8
	movq %r8,0x60(%rbp)
	movq 0x88(%r11),%r8
	movq %r8,0x68(%rbp)
	movq 0x80(%r11),%r8
	movq %r8,0x70(%rbp)
	movq 0x78(%r11),%r8
	movq 0x48(%r11),%rsp
	movq %rsp,0x78(%rbp)
	movq 0x40(%r11),%rsp
	movq %rsp,0x80(%rbp)
	movq 0x20(%r11),%rsi
	movq %rsi,0x88(%rbp)
	movq 0x18(%r11),%rsi
	movq %rsi,0x90(%rbp)
	movq $0x9C3,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r14,0x8(%r11)
	addq $0x18,%r12
	movq %rsp,0x0(%r11)
	movq $0x1D89,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x98(%rbp)
	movq %r11,0x0(%r14)
	addq $0x10,%r12
	movq $0x9C3,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	addq $0x18,%r12
	movq %r13,0x0(%r11)
	movq 0x0(%rbp),%rsp
	movq %rsp,0x8(%r11)
	movq $0x1D89,0x0(%r12)
	movq %r12,%rsp
	addq $0x8,%rsp
	movq %rsp,0xA0(%rbp)
	movq %r11,0x0(%rsp)
	addq $0x10,%r12
	movq 0x8(%r13),%r11
	movq %r11,%rsi
	andq $0x7,%rsi
	cmpq $0x1,%rsi
	je L_417052
	cmpq $0x2,%rsi
	je L_417050
	cmpq $0x3,%rsi
	je stateful_4
	cmpq $0x5,%rsi
	je L_417048
L_104433:
	movq 0xFFFFFFFFFFFFFFF8(%r11),%rsi
	shrq $0x1,%rsi
	cmpq $0xEB0,%rsi
	je stateful_3
	cmpq $0xEB1,%rsi
	je L_417047
	cmpq $0xEB2,%rsi
	je L_417040
	cmpq $0xEB3,%rsi
	je stateful_2
	cmpq $0xEB4,%rsi
	je L_417039
	cmpq $0xEB5,%rsi
	je stateful_1
L_104434:
	movq 0x0(%r11),%rsi
	movq %rsi,0x28(%rbp)
	movq %rsp,0x30(%rbp)
	movq %r10,0x40(%rbp)
	movq %r14,0x38(%rbp)
	addq $0x28,%rbp
	leaq (L_104431+0x0)(%rip),%r14
	movq %r14,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp wordBytes_0
.p2align 0x4
stateful_1:
	movq %r13,%r15
stateful_0:
	movq 0x88(%rbp),%r14
	movq 0x0(%r14),%r13
	movq %r13,0x20(%rbp)
	movl 0x0(%r15),%r13d
	shlq $0x1,%r13
	orq $0x1,%r13
	movq %r13,0x28(%rbp)
	movq 0x8(%r14),%r15
	movq 0x8(%r15),%r13
	movq %r13,0x30(%rbp)
	movq 0x0(%r15),%r13
	movq %r13,0x38(%rbp)
	movq 0x90(%rbp),%r15
	movq %r15,0xA8(%rbp)
	addq $0xA8,%rbp
	leaq (L_104436+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
L_417039:
L_104466:
	movq 0x0(%r11),%r15
	movq %r15,0x28(%rbp)
	movq 0x20(%rbp),%r13
	movq 0x68(%r13),%r11
	movq %r11,0x30(%rbp)
	movq 0x60(%r13),%r11
	movq %r11,0x38(%rbp)
	movq 0x58(%r13),%r11
	movq %r11,0x40(%rbp)
	movq 0x50(%r13),%r11
	movq %r11,0x48(%rbp)
	movq 0x38(%r13),%r11
	movq %r11,0x50(%rbp)
	movq 0x30(%r13),%r11
	movq %r11,0x58(%rbp)
	movq 0x10(%r13),%r11
	movq %r11,0x60(%rbp)
	movq 0x8(%r13),%r11
	movq %r11,0x68(%rbp)
	movq 0x0(%r13),%r11
	movq %r11,0x70(%rbp)
	movq 0x70(%r13),%r11
	movq 0x8(%r11),%r10
	movq %r10,0xC8(%rbp)
	movq 0x0(%r11),%r10
	movq %r10,0xA8(%rbp)
	movq 0x10(%r15),%r13
	movq %r13,0xB0(%rbp)
	movq %r13,0xC0(%rbp)
	addq $0xC0,%rbp
	leaq (L_104467+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp peek_6
.p2align 0x4
stateful_2:
	movq %r13,%r15
	jmp stateful_0
.p2align 0x4
L_417040:
L_104451:
	movq 0x0(%r11),%r15
	movq %r15,0x28(%rbp)
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r13
	movq %r13,0x30(%rbp)
	movl %r13d,%r15d
	movslq %r15d,%r11
	cmpq %r11,%r13
	jne L_104453
L_104454:
	decl %r15d
	movl %r15d,0x38(%rbp)
	jo L_104412
L_104455:
	movq %r14,0x40(%rbp)
	movl $0x0,0x3C(%rbp)
.p2align 0x4,,0x7
loop_1134:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_417044
.p2align 0x4,,0x7
L_104456:
	movl 0x3C(%rbp),%r15d
	cmpl %r15d,0x38(%rbp)
	jl L_417043
L_104457:
	movslq %r15d,%r14
	cmpq 0x30(%rbp),%r14
	jnb L_417042
L_104460:
	movq 0x28(%rbp),%r13
	movq 0x0(%r13,%r14,8),%r11
	movq $0x1D8D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x20,%r12
	movl %r15d,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq 0xA0(%rbp),%r13
	movq %r13,0x8(%r14)
	movq %r11,0x10(%r14)
	incl %r15d
	jo L_104412
L_104461:
	movl %r15d,0x3C(%rbp)
	movq $0x4753,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r11,0x8(%r15)
	addq $0x20,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0x1D97,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x40(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x40(%rbp)
	jmp loop_1134
.p2align 0x4
L_417042:
L_104459:
	movq $0x6,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417043:
L_104462:
	movq 0x40(%rbp),%r14
	movq %r14,%r15
	jmp L_104428
.p2align 0x4
L_417044:
L_104463:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB0,%rbp
	leaq (L_104464+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104464
.p2align 0x4
.long 0x14ED
L_104464:
	addq $0xFFFFFFFFFFFFFF50,%rbp
	jmp L_104456
.p2align 0x4
L_417047:
L_104442:
	movq 0x0(%r11),%r15
	movq %r15,0xB0(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0xB8(%rbp)
	addq $0xB0,%rbp
	leaq (L_104443+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp vectorHashFunc_0
.p2align 0x4
stateful_3:
	movq %r13,%r15
	jmp stateful_0
.p2align 0x4
L_417048:
L_104734:
	shrq $0x3,%r11
	movb %r11b,%r13b
	movb %r13b,0x20(%rbp)
	testb %r13b,%r13b
	jnz L_417049
L_104735:
	movq $0x11,%r13
	xchgq %r15,%r14
	xchgq %r13,%r15
toBits_12:
	movq %r15,0xB8(%rbp)
	movq %r14,0xC0(%rbp)
	movq $0x11,0xB0(%rbp)
	addq $0xB0,%rbp
	leaq (L_104736+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1182
.p2align 0x4
L_417049:
L_104758:
	movq $0x9,%r13
	xchgq %r15,%r14
	xchgq %r13,%r15
	jmp toBits_12
.p2align 0x4
stateful_4:
	movq %r13,%r15
	jmp stateful_0
.p2align 0x4
L_417050:
L_104618:
	movq 0x0(%r9),%r15
	movq 0x8(%r9),%r13
	movq 0x0(%r13),%r11
	movq 0x8(%r13),%r8
	movq 0x0(%r8),%rsi
	cmpq $0x1,%rsi
	je L_417051
L_104619:
	movq %r15,0xB8(%rbp)
	movq 0x0(%rsi),%r15
	movq %r15,0xB0(%rbp)
	addq $0xB0,%rbp
	leaq (L_104620+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp fromBits_5
.p2align 0x4
L_417051:
L_104728:
	movq %r11,0x8(%rbp)
	movq (globalObjptr+0xD098)(%rip),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_104729+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp append_0
.p2align 0x4
L_417052:
L_104592:
	movq 0x0(%r8),%r15
	movq 0x8(%r8),%r13
	movq 0x0(%r13),%r11
	movq 0x8(%r13),%r9
	movq 0x0(%r9),%rsi
	cmpq $0x1,%rsi
	je L_417053
L_104593:
	movq %r15,0xB8(%rbp)
	movq 0x0(%rsi),%r15
	movq %r15,0xB0(%rbp)
	addq $0xB0,%rbp
	leaq (L_104594+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp fromBits_5
.p2align 0x4
L_417053:
L_104613:
	movq %r11,0x8(%rbp)
	movq (globalObjptr+0xD098)(%rip),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_104614+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp append_0
.p2align 0x4
L_417054:
L_104430:
	movq 0x10(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x40(%rbp)
	movq 0x0(%rbp),%r15
	movq %r15,0x30(%rbp)
	addq $0x28,%rbp
	leaq (L_104431+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp equal_9
.p2align 0x4
L_417055:
L_104429:
	movq 0x10(%r15),%r14
	movq 0x8(%r15),%r13
	movq 0x0(%r15),%r11
	movq $0x4757,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r13,0x8(%r15)
	addq $0x20,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0x1D97,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r11,0x0(%r14)
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq %r14,%r15
	jmp L_104428
.p2align 0x4
L_417056:
L_104414:
	movq 0x0(%r14),%r15
	movq %r15,0x8(%rbp)
	cmpq $0x1,%r15
	je L_417058
	cmpq $0x2,%r15
	je L_417057
L_104415:
	movq $0x3FE3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x18(%rbp)
	movl $0x1,0x20(%rbp)
	addq $0x18,%rbp
	leaq (L_104416+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_417057:
L_104421:
	movq $0x3FE3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x8(%rbp)
	movl $0x1,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_104422+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_417058:
L_104420:
	movq (globalObjptr+0x1E68)(%rip),%r14
	movq %r14,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417059:
L_104848:
	movq 0x10(%r15),%r14
	movq 0x8(%r15),%r13
	movq 0x0(%r15),%r11
	movq $0x1D6D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r10
	movq %r10,0x0(%r15)
	movq %r14,0x0(%rbp)
	movq $0x937,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r11,0x0(%r14)
	movq %r15,0x10(%r14)
	addq $0x20,%r12
	movq 0x8(%rbp),%r15
	movq %r15,0x8(%r14)
	movq $0x1DB9,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r13,0x8(%r15)
	movq %r15,0x8(%rbp)
	addq $0x18,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417060:
L_104843:
	movq 0x18(%r15),%r14
	movq 0x10(%r15),%r13
	movq 0x8(%r15),%r11
	movl 0x0(%r15),%r10d
	movq $0x17,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x8(%rbp)
	movl %r10d,0x0(%r15)
	movq %r14,0x8(%r15)
	movq %r13,0x10(%r15)
	movq %r11,0x18(%r15)
	addq $0x28,%r12
	movl $0x0,0x4(%r15)
	movq $0x3FE3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x18(%rbp)
	movl $0x1,0x20(%rbp)
	addq $0x18,%rbp
	leaq (L_104844+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_417061:
L_104842:
	movq 0x28(%r15),%r14
	movq %r14,0x18(%rbp)
	movq 0x20(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x18(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x10(%r15),%r14
	movq %r14,0x30(%rbp)
	movq 0x8(%r15),%r14
	movl 0x0(%r15),%r13d
	movl %r13d,0x10(%rbp)
	movq %r14,0x38(%rbp)
	movq $0x1D6D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x8(%rbp),%r14
	movq %r14,0x0(%rbp)
	movq %r15,0x8(%rbp)
	jmp x_1535
.p2align 0x4
L_417062:
L_104849:
	movq $0x3FE3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq 0x0(%rbp),%r13
	movq %r13,0x0(%r14)
	movq %r14,0x8(%rbp)
	movl $0x1,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_104850+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_417063:
L_104854:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_104855+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104855
.p2align 0x4
.long 0x45C
L_104855:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	jmp L_104408
.p2align 0x4
.long 0x656
L_104776:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0x20(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x40(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x48(%rbp)
	movq 0x18(%rbp),%r14
	movq %r14,0x58(%rbp)
	movq 0x10(%rbp),%r14
	movq %r14,0x60(%rbp)
	movq 0x8(%rbp),%r14
	movq %r14,0x68(%rbp)
	movq %r15,0x70(%rbp)
	addq $0x58,%rbp
	leaq (L_104777+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3827
.p2align 0x4
.long 0x1544
L_104809:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq 0x70(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq 0x78(%rbp),%r15
	movq %r15,0x70(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x80(%rbp)
	addq $0x80,%rbp
	leaq (L_104810+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
.long 0x56D
L_104793:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x10(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104794
L_104796:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_104797+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104797
.p2align 0x4
.long 0xE84
L_104797:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_104794:
	movq $0x240D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movq 0x8(%rbp),%r13
	movq %r13,0x0(%r14)
	movq 0x10(%rbp),%r13
	movq %r13,0x8(%r14)
	movq 0x28(%rbp),%r15
	jmp L_104795
.p2align 0x4
.long 0x5F0
L_104762:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movl 0x28(%rbp),%r15d
	movl %r15d,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104763
L_104769:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_104770+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104770
.p2align 0x4
.long 0x4E2
L_104770:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_104763:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x28(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x20(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq %r13,0x38(%rbp)
	movq 0x10(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x38,%rbp
	leaq (L_104764+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sendVar_0
.p2align 0x4
.long 0x5F0
L_104431:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%rbp)
	jmp L_104428
.p2align 0x4
.long 0x14E5
L_104436:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movl 0xA8(%rbp),%r15d
	movl %r15d,0x40(%rbp)
	movl %r15d,0xA8(%rbp)
	movq $0x3,0xB0(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0xB8(%rbp)
	addq $0xA8,%rbp
	leaq (L_104437+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1199
.p2align 0x4
.long 0x14EE
L_104467:
	addq $0xFFFFFFFFFFFFFF40,%rbp
	movq 0xC0(%rbp),%r15
	movq %r15,0xB8(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104468
L_104589:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xC8,%rbp
	leaq (L_104590+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104590
.p2align 0x4
.long 0x1501
L_104590:
	addq $0xFFFFFFFFFFFFFF38,%rbp
L_104468:
	movq 0xB8(%rbp),%r15
	cmpq $0x1,%r15
	je L_417068
L_104469:
x_353:
	movq 0x0(%r15),%r14
	cmpq $0x1,%r14
	je L_417067
L_104470:
	movq %r14,0x20(%rbp)
L_104471:
	movq $0x37CB,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0xA0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x98(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x90(%rbp)
	movl $0x2,0x98(%rbp)
	addq $0x90,%rbp
	leaq (L_104472+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
L_417067:
L_104476:
	movq 0x28(%rbp),%r15
	movq 0x18(%r15),%r14
	movq %r14,0xA8(%rbp)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xF200)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0xC0(%rbp)
	addq $0xC0,%rbp
	leaq (L_104477+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
L_417068:
L_104588:
	movq $0x6F5,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x1959,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	addq $0x18,%r12
	movq 0xA8(%rbp),%r11
	movq %r11,0x0(%r13)
	movq %r14,0x8(%r13)
	movq 0xB0(%rbp),%r11
	movq 0x0(%r11),%r10
	movq $0x28DF,0x0(%r12)
	movq %r12,%r9
	addq $0x8,%r9
	movq %r13,0x0(%r9)
	movq %r10,0x8(%r9)
	addq $0x18,%r12
	movq %r11,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r10
	movb $0x1,0x0(%r10,%r13,1)
	movq %r9,0x0(%r11)
	xchgq %r14,%r15
	jmp x_353
.p2align 0x4
.long 0x14E9
L_104443:
	addq $0xFFFFFFFFFFFFFF50,%rbp
	movq 0xB0(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104444
L_104449:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB0,%rbp
	leaq (L_104450+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104450
.p2align 0x4
.long 0x14EC
L_104450:
	addq $0xFFFFFFFFFFFFFF50,%rbp
L_104444:
	movq $0x37CB,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0xA0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x98(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x90(%rbp)
	movl $0x2,0x98(%rbp)
	addq $0x90,%rbp
	leaq (L_104445+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
.long 0x1538
L_104736:
	addq $0xFFFFFFFFFFFFFF50,%rbp
	movq 0xB0(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq %r15,0xB0(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0xB8(%rbp)
	addq $0xB0,%rbp
	leaq (L_104737+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp fromBits_5
.p2align 0x4
.long 0x150A
L_104620:
	addq $0xFFFFFFFFFFFFFF50,%rbp
	movq 0xB0(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x40(%rbp),%r15
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r13
	movq 0x0(%r13),%r11
	movq 0x8(%r13),%r10
	movq 0x0(%r10),%r9
	cmpq $0x1,%r9
	je L_417071
L_104621:
	movq %r14,0xB8(%rbp)
	movq 0x0(%r9),%r15
	movq %r15,0xB0(%rbp)
	addq $0xB0,%rbp
	leaq (L_104622+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp fromBits_5
.p2align 0x4
L_417071:
L_104723:
	movq %r11,0x8(%rbp)
	movq (globalObjptr+0xD098)(%rip),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_104724+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp append_0
.p2align 0x4
.long 0x1
L_104729:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq (globalObjptr+0xD0A0)(%rip),%r14
	movq %r14,0x8(%rbp)
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (bug_277+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp append_0
.p2align 0x4
.long 0x1502
L_104594:
	addq $0xFFFFFFFFFFFFFF50,%rbp
	movq 0xB0(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq $0x1,0xB0(%rbp)
	movl $0x0,0xB8(%rbp)
	addq $0xB0,%rbp
	leaq (L_104595+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_5
.p2align 0x4
.long 0x1
L_104614:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq (globalObjptr+0xD0A0)(%rip),%r14
	movq %r14,0x8(%rbp)
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (bug_275+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp append_0
.p2align 0x4
.long 0x522
L_104416:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq 0x18(%rbp),%r15
	movq %r15,0x10(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104417
L_104418:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_104419+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104419
.p2align 0x4
.long 0x4E9
L_104419:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_104417:
	movq $0x1D81,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x10(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x8(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x0(%rbp)
	movq $0x1,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1
L_104422:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104423
L_104424:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_104425+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104425
.p2align 0x4
.long 0x452
L_104425:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_104423:
	movq $0x1D7F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x0(%rbp)
	movq $0x1,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x522
L_104844:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq 0x18(%rbp),%r15
	movq %r15,0x10(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104845
L_104846:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_104847+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104847
.p2align 0x4
.long 0x4E9
L_104847:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_104845:
	movq $0x1D81,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x10(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x8(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x0(%rbp)
	movq $0x1,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1
L_104850:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104851
L_104852:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_104853+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104853
.p2align 0x4
.long 0x452
L_104853:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_104851:
	movq $0x1D7D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x0(%rbp)
	movq $0x1,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1541
L_104777:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0x50(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x60(%rbp)
	addq $0x60,%rbp
	leaq (L_104778+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
.long 0x1545
L_104810:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movl 0x80(%rbp),%r15d
	movl %r15d,0x58(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104811
L_104826:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x80,%rbp
	leaq (L_104827+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104827
.p2align 0x4
.long 0x1549
L_104827:
	addq $0xFFFFFFFFFFFFFF80,%rbp
L_104811:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x78(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x58(%rbp),%r14d
	movl %r14d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xEC10)(%rip),%r14
	movq %r14,0x18(%r13)
	movq $0x939,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x80(%rbp)
	addq $0x10,%r12
	movq 0x70(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_417079
L_104812:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_104813:
	incl %ecx
	movl %ecx,0x58(%rbp)
	jo L_104412
L_104814:
	cmpq $0x1,%r15
	je L_417076
L_104815:
	movq 0x8(%r15),%r15
	jmp L_104813
.p2align 0x4
L_417076:
L_104816:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104817
L_104823:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_104824+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104824
.p2align 0x4
.long 0x1548
L_104824:
	addq $0xFFFFFFFFFFFFFF70,%rbp
L_104817:
	movl 0x58(%rbp),%ecx
L_104818:
	movl %ecx,0x90(%rbp)
	movq $0x4067,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x80(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x88(%rbp)
	addq $0x88,%rbp
	leaq (L_104819+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_5
.p2align 0x4
L_417079:
L_104825:
	xorl %ecx,%ecx
	jmp L_104818
.p2align 0x4
.long 0x4E3
L_104764:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104765
L_104767:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_104768+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104768
.p2align 0x4
.long 0x721
L_104768:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_104765:
	movq 0x20(%rbp),%r15
	movq 0x30(%rbp),%r13
	movq 0x28(%rbp),%r14
	jmp L_104766
.p2align 0x4
.long 0x14E6
L_104437:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movq 0xA8(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq %r15,0xA8(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0xB0(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0xB8(%rbp)
	addq $0xA8,%rbp
	leaq (L_104438+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigMod_0
.p2align 0x4
.long 0x14EA
L_104472:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq 0x90(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104473
L_104474:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_104475+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104475
.p2align 0x4
.long 0x14EB
L_104475:
	addq $0xFFFFFFFFFFFFFF70,%rbp
L_104473:
	movq $0x1DA7,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x20,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x80(%rbp),%r14
	movq %r14,0x10(%r15)
	jmp L_104428
.p2align 0x4
.long 0x14EE
L_104477:
	addq $0xFFFFFFFFFFFFFF40,%rbp
	movq 0xC0(%rbp),%r15
	movq %r15,0xB8(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0xC8(%rbp)
	addq $0xC8,%rbp
	leaq (L_104478+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
.long 0x14EA
L_104445:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq 0x90(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104446
L_104447:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_104448+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104448
.p2align 0x4
.long 0x14EB
L_104448:
	addq $0xFFFFFFFFFFFFFF70,%rbp
L_104446:
	movq $0x1DA7,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x20,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x80(%rbp),%r14
	movq %r14,0x10(%r15)
	jmp L_104428
.p2align 0x4
.long 0x1502
L_104737:
	addq $0xFFFFFFFFFFFFFF50,%rbp
	movq 0xB0(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104738
L_104756:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB0,%rbp
	leaq (L_104757+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104757
.p2align 0x4
.long 0x1540
L_104757:
	addq $0xFFFFFFFFFFFFFF50,%rbp
L_104738:
	movq $0x1E1F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x40(%rbp)
	addq $0x18,%r12
	movzbl 0x20(%rbp),%r14d
	movl %r14d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x1,0xB0(%rbp)
	movl $0x0,0xB8(%rbp)
	addq $0xB0,%rbp
	leaq (L_104739+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_5
.p2align 0x4
.long 0x150B
L_104622:
	addq $0xFFFFFFFFFFFFFF50,%rbp
	movq 0xB0(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq $0x1,0xB0(%rbp)
	movl $0x0,0xB8(%rbp)
	addq $0xB0,%rbp
	leaq (L_104623+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_5
.p2align 0x4
.long 0x1
L_104724:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq (globalObjptr+0xD0A0)(%rip),%r14
	movq %r14,0x8(%rbp)
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (bug_276+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp append_0
.p2align 0x4
.long 0x1
bug_277:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104730
L_104731:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_104732+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104732
.p2align 0x4
.long 0x452
L_104732:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_104730:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1503
L_104595:
	addq $0xFFFFFFFFFFFFFF50,%rbp
	movq 0xB0(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104596
L_104611:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB0,%rbp
	leaq (L_104612+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104612
.p2align 0x4
.long 0x1509
L_104612:
	addq $0xFFFFFFFFFFFFFF50,%rbp
L_104596:
	movq $0x37CD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0xA0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0xA8(%rbp)
	movl $0x1,0xB0(%rbp)
	addq $0xA8,%rbp
	leaq (L_104597+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
.long 0x1
bug_275:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104615
L_104616:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_104617+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104617
.p2align 0x4
.long 0x452
L_104617:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_104615:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1542
L_104778:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movl 0x60(%rbp),%r15d
	movl %r15d,0x40(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104779
L_104837:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_104838+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104838
.p2align 0x4
.long 0x154C
L_104838:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_104779:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x58(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x40(%rbp),%r14d
	movl %r14d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xEC10)(%rip),%r14
	movq %r14,0x18(%r13)
	movq $0x939,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x60(%rbp)
	addq $0x10,%r12
	movq 0x50(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_417091
L_104780:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_104781:
	incl %ecx
	movl %ecx,0x40(%rbp)
	jo L_104412
L_104782:
	cmpq $0x1,%r15
	je L_417088
L_104783:
	movq 0x8(%r15),%r15
	jmp L_104781
.p2align 0x4
L_417088:
L_104784:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104785
L_104834:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_104835+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104835
.p2align 0x4
.long 0x154B
L_104835:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_104785:
	movl 0x40(%rbp),%ecx
L_104786:
	movl %ecx,0x70(%rbp)
	movq $0x4067,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x60(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x68(%rbp)
	addq $0x68,%rbp
	leaq (L_104787+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_5
.p2align 0x4
L_417091:
L_104836:
	xorl %ecx,%ecx
	jmp L_104786
.p2align 0x4
.long 0x1546
L_104819:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	movq 0x88(%rbp),%r15
	movq %r15,0x58(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104820
L_104821:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_104822+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104822
.p2align 0x4
.long 0x1547
L_104822:
	addq $0xFFFFFFFFFFFFFF78,%rbp
L_104820:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x68(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x58(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x78(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x50(%rbp),%r13
	movq %r13,0x18(%r15)
	movq 0x60(%rbp),%r13
	movq 0x0(%r13),%r11
	movq $0x1DBB,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,0x0(%r10)
	movq %r11,0x8(%r10)
	addq $0x18,%r12
	movq %r13,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r15,1)
	movq %r10,0x0(%r13)
	movq $0x17D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq %r14,0x0(%r15)
	movq 0x48(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movb $0x1,0x0(%r11,%r13,1)
	movq 0x40(%rbp),%r13
	movq %r15,0x0(%r14,%r13,8)
	incq %r13
	movq %r13,0x40(%rbp)
	jmp loop_1135
.p2align 0x4
.long 0x14E7
L_104438:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movq 0xA8(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104439
L_104440:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA8,%rbp
	leaq (L_104441+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104441
.p2align 0x4
.long 0x14E8
L_104441:
	addq $0xFFFFFFFFFFFFFF58,%rbp
L_104439:
	movq $0x2D5,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x90(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x1C95,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x0(%r13)
	addq $0x10,%r12
	movq $0x1DA1,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r13,0x0(%r15)
	movq %r15,0x30(%rbp)
	addq $0x10,%r12
	movq %r14,0x28(%rbp)
	movq 0x98(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x40(%rbp)
	addq $0x28,%rbp
	leaq (L_104431+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp wordBytes_0
.p2align 0x4
.long 0x14EF
L_104478:
	addq $0xFFFFFFFFFFFFFF38,%rbp
	movl 0xC8(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104479
L_104586:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xC8,%rbp
	leaq (L_104587+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104587
.p2align 0x4
.long 0x1500
L_104587:
	addq $0xFFFFFFFFFFFFFF38,%rbp
L_104479:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0xC0(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x30(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq 0xB8(%rbp),%r15
	movq %r15,0x18(%r13)
	movq 0xB0(%rbp),%r15
	movq %r15,0xD0(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0xD8(%rbp)
	addq $0xD0,%rbp
	leaq (L_104480+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp peek_6
.p2align 0x4
.long 0x1539
L_104739:
	addq $0xFFFFFFFFFFFFFF50,%rbp
	movq 0xB0(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104740
L_104754:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB0,%rbp
	leaq (L_104755+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104755
.p2align 0x4
.long 0x153F
L_104755:
	addq $0xFFFFFFFFFFFFFF50,%rbp
L_104740:
	movq $0x37CD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0xA0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0xA8(%rbp)
	movl $0x1,0xB0(%rbp)
	addq $0xA8,%rbp
	leaq (L_104741+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
.long 0x150C
L_104623:
	addq $0xFFFFFFFFFFFFFF50,%rbp
	movq 0xB0(%rbp),%r15
	movq %r15,0x88(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104624
L_104721:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB0,%rbp
	leaq (L_104722+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104722
.p2align 0x4
.long 0x1537
L_104722:
	addq $0xFFFFFFFFFFFFFF50,%rbp
L_104624:
	movq $0x37CD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x90(%rbp)
	addq $0x10,%r12
	movq 0xA0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0xA8(%rbp)
	movl $0x1,0xB0(%rbp)
	addq $0xA8,%rbp
	leaq (L_104625+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
.long 0x1
bug_276:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104725
L_104726:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_104727+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104727
.p2align 0x4
.long 0x452
L_104727:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_104725:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1504
L_104597:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movq 0xA8(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x48(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x50(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0xA8(%rbp)
	addq $0xA8,%rbp
	leaq (L_104598+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp schckToInt32_0
.p2align 0x4
.long 0x1543
L_104787:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq 0x68(%rbp),%r15
	movq %r15,0x40(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104788
L_104832:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_104833+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104833
.p2align 0x4
.long 0x154A
L_104833:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_104788:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x8(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x40(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x58(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x38(%rbp),%r13
	movq %r13,0x18(%r15)
	movq 0x48(%rbp),%r13
	movq 0x0(%r13),%r11
	movq $0x1DBB,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,0x0(%r10)
	movq %r11,0x8(%r10)
	addq $0x18,%r12
	movq %r13,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r15,1)
	movq %r10,0x0(%r13)
	movq 0x28(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r13
	shrq $0x1,%r13
	cmpq $0xED5,%r13
	je L_417099
L_104798:
	movq 0x0(%r15),%r13
	movq %r13,0x8(%rbp)
	movq %r14,0x20(%rbp)
	jmp L_104799
.p2align 0x4
L_417099:
L_104789:
	movq 0x8(%r15),%r13
	movq 0x0(%r15),%r11
	movq %r11,0x8(%rbp)
	movq %r14,0x28(%rbp)
	movq %r13,%r15
	jmp L_104790
.p2align 0x4
.long 0x14F0
L_104480:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104481
L_104584:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_104585+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104585
.p2align 0x4
.long 0x14FD
L_104585:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_104481:
	movq 0x30(%rbp),%r15
	cmpq $0x1,%r15
	je L_417101
L_104482:
	movq %r15,%r14
	shrq $0x8,%r14
	movq (gcState+0x3C8)(%rip),%r13
	movb $0x1,0x0(%r13,%r14,1)
	movq 0xC0(%rbp),%r14
	movq %r14,0x0(%r15)
datatypee_1:
	movq 0x28(%rbp),%r15
	movl 0x0(%r15),%r14d
	movl %r14d,0xD8(%rbp)
	movq $0x1D69,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq %r15,0x0(%r14)
	movq %r14,0xD0(%rbp)
	movq 0x48(%rbp),%r15
	movq %r15,0xE0(%rbp)
	addq $0xD0,%rbp
	leaq (L_104483+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_1
.p2align 0x4
L_417101:
L_104583:
	movq $0x6F5,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq 0xC0(%rbp),%r13
	movq %r13,0x0(%r14)
	movq $0x1959,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x8(%r13)
	addq $0x18,%r12
	movq 0x40(%rbp),%r14
	movq %r14,0x0(%r13)
	movq 0xB0(%rbp),%r14
	movq 0x0(%r14),%r11
	movq $0x28DF,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r13,0x0(%r10)
	movq %r11,0x8(%r10)
	addq $0x18,%r12
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq %r10,0x0(%r14)
	jmp datatypee_1
.p2align 0x4
.long 0x153A
L_104741:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movq 0xA8(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x50(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x58(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0xA8(%rbp)
	addq $0xA8,%rbp
	leaq (L_104742+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp schckToInt32_0
.p2align 0x4
.long 0x11F2
L_104625:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movq 0xA8(%rbp),%r15
	movq %r15,0xA0(%rbp)
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0xA8(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0xB0(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0xC0(%rbp)
	addq $0xC0,%rbp
	leaq (L_104626+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp schckToInt32_0
.p2align 0x4
.long 0x1505
L_104598:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movl 0xA8(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104599
L_104609:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA8,%rbp
	leaq (L_104610+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104610
.p2align 0x4
.long 0x1508
L_104610:
	addq $0xFFFFFFFFFFFFFF58,%rbp
L_104599:
	movslq 0x30(%rbp),%r15
	movq 0x50(%rbp),%r14
	cmpq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	jnb L_104459
L_104601:
	movq 0x0(%r14,%r15,8),%r13
	cmpq $0x1,%r13
	je L_417103
L_104602:
	movl 0x0(%r13),%r15d
	movl %r15d,0xB0(%rbp)
	movq $0x1D5F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0xA8(%rbp)
	movq 0x48(%rbp),%r15
	movq %r15,0xB8(%rbp)
	addq $0xA8,%rbp
	leaq (L_104603+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_1
.p2align 0x4
L_417103:
L_104608:
	movq $0x9,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x14F1
L_104483:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x78(%rbp),%r15
	movq %r15,0xD0(%rbp)
	addq $0xD0,%rbp
	leaq (L_104484+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
.long 0x153B
L_104742:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movl 0xA8(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104743
L_104752:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA8,%rbp
	leaq (L_104753+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104753
.p2align 0x4
.long 0x153E
L_104753:
	addq $0xFFFFFFFFFFFFFF58,%rbp
L_104743:
	movslq 0x30(%rbp),%r15
	movq 0x58(%rbp),%r14
	cmpq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	jnb L_104459
L_104745:
	movq 0x0(%r14,%r15,8),%r13
	cmpq $0x1,%r13
	je L_104608
L_104746:
	movl 0x0(%r13),%r15d
	movl %r15d,0xB0(%rbp)
	movq $0x1D5F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0xA8(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0xB8(%rbp)
	addq $0xA8,%rbp
	leaq (L_104747+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_1
.p2align 0x4
.long 0x150D
L_104626:
	addq $0xFFFFFFFFFFFFFF40,%rbp
	movl 0xC0(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104627
L_104719:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xC0,%rbp
	leaq (L_104720+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104720
.p2align 0x4
.long 0x1536
L_104720:
	addq $0xFFFFFFFFFFFFFF40,%rbp
L_104627:
	movq 0xB0(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movq %r14,0xB8(%rbp)
	movslq 0x30(%rbp),%r13
	cmpq %r14,%r13
	jnb L_104459
L_104629:
	movq 0x0(%r15,%r13,8),%r14
	cmpq $0x1,%r14
	je L_104608
L_104630:
	movl 0x0(%r14),%r15d
	movl %r15d,0xD0(%rbp)
	movq $0x1D5F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x30(%rbp)
	addq $0x10,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0xC8(%rbp)
	movq 0xA8(%rbp),%r15
	movq %r15,0xD8(%rbp)
	addq $0xC8,%rbp
	leaq (L_104631+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_1
.p2align 0x4
.long 0x1506
L_104603:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movq 0xA8(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104604
L_104605:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA8,%rbp
	leaq (L_104606+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104606
.p2align 0x4
.long 0x1507
L_104606:
	addq $0xFFFFFFFFFFFFFF58,%rbp
L_104604:
	movq $0x1D95,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x40(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x16,0x8(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x18(%r15)
	movq %r15,0x30(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x98(%rbp),%r15
	movq %r15,0x38(%rbp)
	addq $0x28,%rbp
	leaq (L_104431+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp wordBytes_0
.p2align 0x4
.long 0x14F2
L_104484:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movl 0xD0(%rbp),%r15d
	movl %r15d,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104485
L_104581:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_104582+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104582
.p2align 0x4
.long 0x14FF
L_104582:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_104485:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x38(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq $0x9C3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x40(%rbp)
	movq %r13,0x8(%r15)
	addq $0x18,%r12
	movq 0x80(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x78(%rbp),%r15
	movq %r15,0xD0(%rbp)
	addq $0xD0,%rbp
	leaq (L_104486+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
.long 0x153C
L_104747:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movq 0xA8(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104748
L_104749:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA8,%rbp
	leaq (L_104750+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104750
.p2align 0x4
.long 0x153D
L_104750:
	addq $0xFFFFFFFFFFFFFF58,%rbp
L_104748:
	movq $0x1D95,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x48(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x40(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x18(%r15)
	movq %r15,0x30(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x98(%rbp),%r15
	movq %r15,0x38(%rbp)
	addq $0x28,%rbp
	leaq (L_104431+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp wordBytes_0
.p2align 0x4
.long 0x150E
L_104631:
	addq $0xFFFFFFFFFFFFFF38,%rbp
	movq 0xC8(%rbp),%r15
	movq %r15,0xC0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104632
L_104716:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_104717+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104717
.p2align 0x4
.long 0x1535
L_104717:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_104632:
	movq $0x1D95,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0xC8(%rbp)
	addq $0x28,%r12
	movq 0xA0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x32,0x8(%r15)
	movq 0x88(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0xC0(%rbp),%r14
	movq %r14,0x18(%r15)
	movq $0x1,0xD8(%rbp)
	movl $0x0,0xE0(%rbp)
	addq $0xD8,%rbp
	leaq (L_104633+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_5
.p2align 0x4
.long 0x14F3
L_104486:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movl 0xD0(%rbp),%r15d
	movl %r15d,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104487
L_104579:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_104580+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104580
.p2align 0x4
.long 0x14FE
L_104580:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_104487:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x38(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq $0x9C3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x48(%rbp)
	movq %r13,0x8(%r15)
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x3EF7,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movq %r15,0x0(%r14)
	movq 0x40(%rbp),%r15
	movq %r15,0x8(%r14)
	movq %r14,0xD0(%rbp)
	movl $0x2,0xD8(%rbp)
	addq $0xD0,%rbp
	leaq (L_104488+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
.long 0x150F
L_104633:
	addq $0xFFFFFFFFFFFFFF28,%rbp
	movq 0xD8(%rbp),%r15
	movq %r15,0x88(%rbp)
	movq 0x90(%rbp),%r15
	movq %r15,0xD8(%rbp)
	movl $0x1,0xE0(%rbp)
	addq $0xD8,%rbp
	leaq (L_104634+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
.long 0x14F0
L_104488:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104489
L_104577:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_104578+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104578
.p2align 0x4
.long 0x14FD
L_104578:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_104489:
	movq $0x1D89,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x38(%rbp)
	addq $0x10,%r12
	movq 0x40(%rbp),%r11
	movq %r11,0x0(%r13)
	movq $0x1D89,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0xB8(%rbp)
	addq $0x10,%r12
	movq 0x48(%rbp),%r11
	movq %r11,0x0(%r13)
	movq (globalObjptr+0x1068)(%rip),%r13
	movq 0x0(%r13),%r15
	incq %r15
	jo L_417129
L_104491:
	movq %r15,0x0(%r13)
	movq 0xB0(%rbp),%r13
	movq 0x0(%r13),%r11
	cmpq $0x1,%r11
	je L_417128
L_104492:
	movq 0x0(%r11),%r14
	movq 0x8(%r11),%r11
	movl $0x0,0x40(%rbp)
	movq %r11,%r15
.p2align 0x4,,0x7
L_104494:
	movq %r14,%r13
	andq $0x3,%r13
	jnz L_104495
L_104537:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0xD1A,%r13
	jne L_104495
L_104538:
	movq 0x8(%r14),%r13
	movq %r13,0x48(%rbp)
	movq 0x50(%rbp),%r13
	cmpq %r13,0x0(%r14)
	je L_417121
L_104495:
	movl 0x40(%rbp),%r13d
	incl %r13d
	jo L_104412
L_104496:
	cmpq $0x1,%r15
	je L_417117
L_104497:
	movl %r13d,0x40(%rbp)
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	jmp L_104494
.p2align 0x4
L_417117:
	movl %r13d,%ecx
L_104499:
	movslq %ecx,%r15
	movq (globalObjptr+0x1070)(%rip),%r14
	addq 0x0(%r14),%r15
	jo L_417119
L_104501:
	movq %r15,0x0(%r14)
	movq (globalObjptr+0x1078)(%rip),%r15
	cmpl %ecx,0x0(%r15)
	jnl x_354
L_104536:
	movl %ecx,0x0(%r15)
x_354:
	movq 0x58(%rbp),%r14
	movq 0x0(%r14),%r13
	movq 0x28(%rbp),%r14
	movq 0x8(%r14),%r11
	movq %r11,0x30(%rbp)
	movq 0x0(%r11),%r15
	cmpq $0x1,%r15
	je L_417118
L_104503:
L_104504:
	movq %r15,0x8(%rbp)
	addq $0x8,%rbp
	leaq (L_104505+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp str_3
.p2align 0x4
L_417118:
L_104534:
	movq %r13,0x48(%rbp)
	movq 0xA8(%rbp),%r15
	movq %r15,0x40(%rbp)
	addq $0x40,%rbp
	leaq (L_104535+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unique_0
.p2align 0x4
L_417119:
L_104500:
	movq (globalObjptr+0x1080)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417121:
L_104540:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104541
L_104574:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_104575+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104575
.p2align 0x4
.long 0x14FC
L_104575:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_104541:
	movl 0x40(%rbp),%r14d
	movslq %r14d,%r15
	movq (globalObjptr+0x1070)(%rip),%r13
	addq 0x0(%r13),%r15
	jo L_104500
L_104542:
	movq %r15,0x0(%r13)
	movq (globalObjptr+0x1078)(%rip),%r13
	cmpl %r14d,0x0(%r13)
	jl L_417123
L_104543:
	movq 0x48(%rbp),%r15
L_104544:
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_104453
L_104546:
	movl %r13d,0xD8(%rbp)
	movq $0x395D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x28(%r14)
	addq $0x38,%r12
	movq 0x20(%rbp),%r15
	movq %r15,0x0(%r14)
	movq 0x88(%rbp),%r15
	movq %r15,0x8(%r14)
	movq 0x90(%rbp),%r15
	movq %r15,0x10(%r14)
	movq 0x38(%rbp),%r15
	movq %r15,0x18(%r14)
	movq 0x78(%rbp),%r15
	movq %r15,0x20(%r14)
	movq %r14,0xD0(%rbp)
	addq $0xD0,%rbp
	leaq (L_104547+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_30
.p2align 0x4
L_417123:
L_104573:
	movq (globalObjptr+0x1078)(%rip),%r14
	movl 0x40(%rbp),%r13d
	movl %r13d,0x0(%r14)
	movq 0x48(%rbp),%r15
	jmp L_104544
.p2align 0x4
L_417128:
L_104576:
	xorl %ecx,%ecx
	jmp L_104499
.p2align 0x4
L_417129:
L_104490:
	movq (globalObjptr+0x1088)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1510
L_104634:
	addq $0xFFFFFFFFFFFFFF28,%rbp
	movq 0xD8(%rbp),%r15
	movq %r15,0x90(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0xD8(%rbp)
	addq $0xD8,%rbp
	leaq (L_104635+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp schckToInt32_0
.p2align 0x4
.long 0x1
L_104505:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq (globalObjptr+0xDFE8)(%rip),%r15
	movq %r15,0x10(%rbp)
	addq $0x10,%rbp
	leaq (L_104506+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp str_3
.p2align 0x4
.long 0x69C
L_104535:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0x30(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq %r15,0x0(%r14)
	jmp L_104504
.p2align 0x4
.long 0x14F4
L_104547:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104548
L_104571:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_104572+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104572
.p2align 0x4
.long 0x14FB
L_104572:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_104548:
	movq $0x1DAD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1DA5,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x28,%r12
	movq $0x1,0x8(%r14)
	movq 0xB8(%rbp),%r15
	movq %r15,0x10(%r14)
	movq 0x80(%rbp),%r15
	movq %r15,0x18(%r14)
	movq %r14,0xD8(%rbp)
	movq $0x2,0xD0(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0xE0(%rbp)
	addq $0xD0,%rbp
	leaq (L_104549+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1537
.p2align 0x4
.long 0x1511
L_104635:
	addq $0xFFFFFFFFFFFFFF28,%rbp
	movl 0xD8(%rbp),%r15d
	movl %r15d,0xA0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104636
L_104714:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD8,%rbp
	leaq (L_104715+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104715
.p2align 0x4
.long 0x1534
L_104715:
	addq $0xFFFFFFFFFFFFFF28,%rbp
L_104636:
	movslq 0xA0(%rbp),%r15
	cmpq 0xB8(%rbp),%r15
	jnb L_104459
L_104638:
	movq 0xB0(%rbp),%r14
	movq 0x0(%r14,%r15,8),%r13
	cmpq $0x1,%r13
	je L_104608
L_104639:
	movl 0x0(%r13),%r15d
	movl %r15d,0xE0(%rbp)
	movq $0x1D5F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0xA0(%rbp)
	addq $0x10,%r12
	movq 0x40(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0xD8(%rbp)
	movq 0xA8(%rbp),%r15
	movq %r15,0xE8(%rbp)
	addq $0xD8,%rbp
	leaq (L_104640+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_1
.p2align 0x4
.long 0x4B0
L_104506:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
	movq 0x10(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq (globalObjptr+0xF208)(%rip),%r15
	movq %r15,0x18(%rbp)
	addq $0x18,%rbp
	leaq (L_104507+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp str_3
.p2align 0x4
.long 0x14F5
L_104549:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0xD8(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104550
L_104569:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_104570+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104570
.p2align 0x4
.long 0x14F9
L_104570:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_104550:
	movq $0x30D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x38(%rbp)
	addq $0x10,%r12
	movq 0x20(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_417138
L_104551:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_104552:
	incl %ecx
	movl %ecx,0x20(%rbp)
	jo L_104412
L_104553:
	cmpq $0x1,%r15
	je L_417135
L_104554:
	movq 0x8(%r15),%r15
	jmp L_104552
.p2align 0x4
L_417135:
L_104555:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104556
L_104566:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_104567+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104567
.p2align 0x4
.long 0x14FA
L_104567:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_104556:
	movl 0x20(%rbp),%ecx
L_104557:
	movl %ecx,0xD8(%rbp)
	movq $0x3E77,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0xD0(%rbp)
	addq $0xD0,%rbp
	leaq (L_104558+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_6
.p2align 0x4
L_417138:
L_104568:
	xorl %ecx,%ecx
	jmp L_104557
.p2align 0x4
.long 0x1512
L_104640:
	addq $0xFFFFFFFFFFFFFF28,%rbp
	movq 0xD8(%rbp),%r15
	movq %r15,0xC0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104641
L_104711:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD8,%rbp
	leaq (L_104712+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104712
.p2align 0x4
.long 0x1533
L_104712:
	addq $0xFFFFFFFFFFFFFF28,%rbp
L_104641:
	movq 0x48(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0xE8(%rbp)
	movl 0x0(%r15),%r14d
	movq 0xC0(%rbp),%r15
	xorl 0x0(%r15),%r14d
	movl %r14d,0xE0(%rbp)
	movq $0x1D63,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq %r15,0x0(%r14)
	movq %r14,0xD8(%rbp)
	addq $0xD8,%rbp
	leaq (L_104642+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_1
.p2align 0x4
.long 0x5B0
L_104507:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq 0x18(%rbp),%r15
	movq %r15,0x10(%rbp)
	movq (globalObjptr+0xDFF8)(%rip),%r15
	movq %r15,0x20(%rbp)
	addq $0x20,%rbp
	leaq (L_104508+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp str_3
.p2align 0x4
.long 0x14F6
L_104558:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104559
L_104564:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_104565+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104565
.p2align 0x4
.long 0x14F9
L_104565:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_104559:
	movq $0x721,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x40,%r12
	movl $0x1,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x68(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0x1,0x18(%r15)
	movq 0xC0(%rbp),%r14
	movq %r14,0x20(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x28(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x30(%r15)
	movq 0x70(%rbp),%r14
	movq 0x10(%r14),%r13
	movq %r13,0xD0(%rbp)
	movq 0x8(%r14),%r13
	movq %r13,0xE0(%rbp)
	movq 0x0(%r14),%r13
	movq %r13,0x38(%rbp)
	movq $0x723,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movq $0x7FFFFFFF,0x0(%r14)
	movq %r15,0x8(%r14)
	movq $0x2957,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	addq $0x10,%r12
	movq %r14,0x0(%r13)
	movq $0x725,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r13,0x0(%r11)
	addq $0x10,%r12
	movq $0x727,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r11,0x0(%r13)
	movq %r14,0x8(%r13)
	addq $0x18,%r12
	movq $0x729,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r13,0x8(%r14)
	movq %r14,0xD8(%rbp)
	addq $0x18,%r12
	addq $0xD0,%rbp
	leaq (L_104560+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1538
.p2align 0x4
.long 0x1513
L_104642:
	addq $0xFFFFFFFFFFFFFF28,%rbp
	movq 0xD8(%rbp),%r15
	movq %r15,0x48(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104643
L_104709:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD8,%rbp
	leaq (L_104710+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104710
.p2align 0x4
.long 0x1532
L_104710:
	addq $0xFFFFFFFFFFFFFF28,%rbp
L_104643:
	movq $0x1D95,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0xC0(%rbp)
	addq $0x28,%r12
	movq 0x90(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x31,0x8(%r15)
	movq 0x88(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x48(%rbp),%r14
	movq %r14,0x18(%r15)
	movq 0x78(%rbp),%r15
	movq %r15,0xD8(%rbp)
	addq $0xD8,%rbp
	leaq (L_104644+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
.long 0x51F
L_104508:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq 0x20(%rbp),%r15
	movq %r15,0x18(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104509
L_104532:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_104533+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104533
.p2align 0x4
.long 0x4AF
L_104533:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_104509:
	movq $0x1B6D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x18(%rbp),%r13
	movq %r13,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B6D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x10(%rbp),%r13
	movq %r13,0x0(%r14)
	movq $0x1B6D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq 0x8(%rbp),%r13
	movq %r13,0x0(%r15)
	movq $0x1B6D,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x20(%rbp)
	movq %r15,0x8(%r13)
	addq $0x18,%r12
	movq 0x0(%rbp),%r11
	movq %r11,0x0(%r13)
	xorl %ecx,%ecx
	movq %r15,%r14
	movq %r11,%r15
.p2align 0x4,,0x7
L_104510:
	addl 0x0(%r15),%ecx
	movl %ecx,0x28(%rbp)
	jo L_104412
L_104511:
	cmpq $0x1,%r14
	je L_417143
L_104512:
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	jmp L_104510
.p2align 0x4
L_417143:
L_104513:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104514
L_104530:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_104531+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104531
.p2align 0x4
.long 0x4E7
L_104531:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_104514:
	movl 0x28(%rbp),%ecx
	testl %ecx,%ecx
	jz L_417144
L_104515:
	movq $0x1B69,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
toString_197:
	movq $0xC3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movl %ecx,0x0(%r14)
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl $0x0,0x4(%r14)
	movq %r14,0x10(%rbp)
	movq $0x1,0x8(%rbp)
	addq $0x8,%rbp
	leaq (rev_195+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3785
.p2align 0x4
L_417144:
L_104529:
	movq $0x1,%r15
	xorl %r14d,%r14d
	xchgl %r14d,%ecx
	jmp toString_197
.p2align 0x4
.long 0x14F7
L_104560:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104561
L_104562:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_104563+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104563
.p2align 0x4
.long 0x14F8
L_104563:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_104561:
	movq 0x38(%rbp),%r15
	movq 0x0(%r15),%r14
	movq $0x210F,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x8(%r13)
	addq $0x18,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r13)
	movq %r15,%r14
	shrq $0x8,%r14
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r14,1)
	movq %r13,0x0(%r15)
	movq 0xC0(%rbp),%r15
	movq %r15,0x20(%rbp)
	jmp L_104471
.p2align 0x4
.long 0x1514
L_104644:
	addq $0xFFFFFFFFFFFFFF28,%rbp
	movl 0xD8(%rbp),%r15d
	movl %r15d,0x48(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104645
L_104707:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD8,%rbp
	leaq (L_104708+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104708
.p2align 0x4
.long 0x1531
L_104708:
	addq $0xFFFFFFFFFFFFFF28,%rbp
L_104645:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x78(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x48(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq 0x28(%rbp),%r15
	movq %r15,0xD8(%rbp)
	addq $0xD8,%rbp
	leaq (L_104646+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp schckToInt32_0
.p2align 0x4
.long 0x1
rev_195:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq $0x1,%r15
	je L_417152
L_104516:
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	movq %r15,0x0(%rbp)
	movq %r14,0x8(%rbp)
	movq $0x1,0x10(%rbp)
.p2align 0x4,,0x7
L_104517:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_417151
.p2align 0x4,,0x7
L_104518:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x8(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x10(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x0(%rbp),%r14
	cmpq $0x1,%r14
	je L_417150
L_104519:
	movq %r15,0x10(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x0(%rbp)
	movq %r15,0x8(%rbp)
	jmp L_104517
.p2align 0x4
L_417150:
L_104521:
	movq %r15,0x8(%rbp)
	addq $0x8,%rbp
	leaq (L_104522+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
L_417151:
L_104526:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_104527+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104527
.p2align 0x4
.long 0x45C
L_104527:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	jmp L_104518
.p2align 0x4
L_417152:
L_104528:
	movq $0x1,%r14
	xchgq %r14,%r15
	jmp L_104521
.p2align 0x4
.long 0x1515
L_104646:
	addq $0xFFFFFFFFFFFFFF28,%rbp
	movl 0xD8(%rbp),%r15d
	movl %r15d,0x48(%rbp)
	movslq %r15d,%r14
	cmpq 0xB8(%rbp),%r14
	jnb L_104459
L_104648:
	movq 0xB0(%rbp),%r15
	movq 0x0(%r15,%r14,8),%r13
	cmpq $0x1,%r13
	je L_104608
L_104649:
	movl 0x0(%r13),%r15d
	movl %r15d,0xE0(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0xD8(%rbp)
	movq 0xA8(%rbp),%r15
	movq %r15,0xE8(%rbp)
	addq $0xD8,%rbp
	leaq (L_104650+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_1
.p2align 0x4
.long 0x1
L_104522:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104523
L_104524:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_104525+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104525
.p2align 0x4
.long 0x452
L_104525:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_104523:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1515
L_104650:
	addq $0xFFFFFFFFFFFFFF28,%rbp
	movq 0xD8(%rbp),%r15
	movq %r15,0x48(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104651
L_104704:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD8,%rbp
	leaq (L_104705+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104705
.p2align 0x4
.long 0x1530
L_104705:
	addq $0xFFFFFFFFFFFFFF28,%rbp
L_104651:
	movq $0x9C3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x48(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x78(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x1D89,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x88(%rbp)
	movq %r15,0x0(%r14)
	addq $0x10,%r12
	movq 0x50(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x90(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0xD0(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0xE0(%rbp)
	addq $0xE0,%rbp
	leaq (L_104652+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
.long 0x1516
L_104652:
	addq $0xFFFFFFFFFFFFFF20,%rbp
	movl 0xE0(%rbp),%r15d
	movl %r15d,0x48(%rbp)
	movl %r15d,0xE0(%rbp)
	movq $0x3,0xE8(%rbp)
	movq 0x90(%rbp),%r15
	movq %r15,0xF0(%rbp)
	addq $0xE0,%rbp
	leaq (L_104653+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1199
.p2align 0x4
.long 0x1517
L_104653:
	addq $0xFFFFFFFFFFFFFF20,%rbp
	movq 0xE0(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq %r15,0xD8(%rbp)
	movq $0x3,0xE0(%rbp)
	movq 0xD0(%rbp),%r15
	movq %r15,0xE8(%rbp)
	addq $0xD8,%rbp
	leaq (L_104654+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigMod_0
.p2align 0x4
.long 0x1518
L_104654:
	addq $0xFFFFFFFFFFFFFF28,%rbp
	movq 0xD8(%rbp),%r15
	movq %r15,0x48(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104655
L_104702:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD8,%rbp
	leaq (L_104703+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104703
.p2align 0x4
.long 0x152F
L_104703:
	addq $0xFFFFFFFFFFFFFF28,%rbp
L_104655:
	movq $0x2D5,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x48(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x1C95,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x0(%r13)
	addq $0x10,%r12
	movq $0x1DA1,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x50(%rbp)
	movq %r13,0x0(%r15)
	addq $0x10,%r12
	movq $0x12BB,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x78(%rbp),%r13
	movq %r13,0x0(%r15)
	movq 0xC8(%rbp),%r13
	movq %r13,0x8(%r15)
	movq $0x1DAF,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x90(%rbp)
	movq %r15,0x0(%r13)
	addq $0x18,%r12
	movq $0x1,0x8(%r13)
	movq $0x1E17,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0xD0(%rbp)
	addq $0x10,%r12
	movq %r14,0x0(%r15)
	movq $0x1,0xE0(%rbp)
	movl $0x0,0xE8(%rbp)
	addq $0xE0,%rbp
	leaq (L_104656+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_5
.p2align 0x4
.long 0x1519
L_104656:
	addq $0xFFFFFFFFFFFFFF20,%rbp
	movq 0xE0(%rbp),%r15
	movq %r15,0x48(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104657
L_104700:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xE0,%rbp
	leaq (L_104701+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104701
.p2align 0x4
.long 0x152E
L_104701:
	addq $0xFFFFFFFFFFFFFF20,%rbp
L_104657:
	movq $0x37CB,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x50(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x88(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0xE0(%rbp)
	movl $0x2,0xE8(%rbp)
	addq $0xE0,%rbp
	leaq (L_104658+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
.long 0x151A
L_104658:
	addq $0xFFFFFFFFFFFFFF20,%rbp
	movq 0xE0(%rbp),%r15
	movq %r15,0x78(%rbp)
	movq 0x58(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0xC8(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0xD8(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0xE8(%rbp)
	addq $0xE8,%rbp
	leaq (L_104659+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp schckToInt32_0
.p2align 0x4
.long 0x151B
L_104659:
	addq $0xFFFFFFFFFFFFFF18,%rbp
	movl 0xE8(%rbp),%r15d
	movl %r15d,0x58(%rbp)
	movslq %r15d,%r14
	movq 0xD8(%rbp),%r15
	cmpq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	jnb L_104459
L_104661:
	movq 0x0(%r15,%r14,8),%r13
	cmpq $0x1,%r13
	je L_104608
L_104662:
	movl 0x0(%r13),%r15d
	movl %r15d,0xE8(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0xE0(%rbp)
	movq 0xC8(%rbp),%r15
	movq %r15,0xF0(%rbp)
	addq $0xE0,%rbp
	leaq (L_104663+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_1
.p2align 0x4
.long 0x151C
L_104663:
	addq $0xFFFFFFFFFFFFFF20,%rbp
	movq 0xE0(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104664
L_104697:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xE0,%rbp
	leaq (L_104698+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104698
.p2align 0x4
.long 0x152D
L_104698:
	addq $0xFFFFFFFFFFFFFF20,%rbp
L_104664:
	movq $0x1D95,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x58(%rbp)
	addq $0x28,%r12
	movq 0x78(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0xD0(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x48(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x18(%r15)
	movq $0x1E13,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0xC8(%rbp)
	addq $0x10,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0xD8(%rbp)
	movl $0x0,0xE0(%rbp)
	addq $0xD8,%rbp
	leaq (L_104665+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_5
.p2align 0x4
.long 0x151D
L_104665:
	addq $0xFFFFFFFFFFFFFF28,%rbp
	movq 0xD8(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104666
L_104695:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD8,%rbp
	leaq (L_104696+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104696
.p2align 0x4
.long 0x152C
L_104696:
	addq $0xFFFFFFFFFFFFFF28,%rbp
L_104666:
	movq $0x37CB,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x50(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x58(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0xD8(%rbp)
	movl $0x2,0xE0(%rbp)
	addq $0xD8,%rbp
	leaq (L_104667+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
.long 0x151E
L_104667:
	addq $0xFFFFFFFFFFFFFF28,%rbp
	movq 0xD8(%rbp),%r15
	movq %r15,0x48(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104668
L_104693:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD8,%rbp
	leaq (L_104694+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104694
.p2align 0x4
.long 0x152B
L_104694:
	addq $0xFFFFFFFFFFFFFF28,%rbp
L_104668:
	movq $0x1D95,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x50(%rbp)
	addq $0x28,%r12
	movq 0x48(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0xC8(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x60(%rbp),%r14
	movq %r14,0x18(%r15)
	movq $0x1,0xD0(%rbp)
	movl $0x0,0xD8(%rbp)
	addq $0xD0,%rbp
	leaq (L_104669+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
.long 0x151F
L_104669:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0xD0(%rbp)
	movq 0x88(%rbp),%r15
	movq %r15,0xD8(%rbp)
	movq 0x98(%rbp),%r15
	movq %r15,0xE0(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0xE8(%rbp)
	addq $0xD0,%rbp
	leaq (L_104670+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp wordBytes_0
.p2align 0x4
.long 0x1520
L_104670:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104671
L_104691:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_104692+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104692
.p2align 0x4
.long 0x152A
L_104692:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_104671:
	movq $0xBE9,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x38(%rbp)
	addq $0x20,%r12
	movq 0x68(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0x1,0xD0(%rbp)
	movl $0x0,0xD8(%rbp)
	addq $0xD0,%rbp
	leaq (L_104672+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
.long 0x1521
L_104672:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0xD0(%rbp)
	addq $0xD0,%rbp
	leaq (L_104673+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp schckToInt32_0
.p2align 0x4
.long 0x1522
L_104673:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movl 0xD0(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	movslq %r15d,%r14
	cmpq 0xB8(%rbp),%r14
	jnb L_104459
L_104675:
	movq 0xB0(%rbp),%r15
	movq 0x0(%r15,%r14,8),%r13
	cmpq $0x1,%r13
	je L_104608
L_104676:
	movl 0x0(%r13),%r15d
	movl %r15d,0xD8(%rbp)
	movq 0xA0(%rbp),%r15
	movq %r15,0xD0(%rbp)
	movq 0xA8(%rbp),%r15
	movq %r15,0xE0(%rbp)
	addq $0xD0,%rbp
	leaq (L_104677+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_1
.p2align 0x4
.long 0x1523
L_104677:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq %r15,0xD0(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0xD8(%rbp)
	addq $0xD0,%rbp
	leaq (L_104678+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp vectorHashFunc_0
.p2align 0x4
.long 0x1524
L_104678:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104679
L_104688:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_104689+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104689
.p2align 0x4
.long 0x1529
L_104689:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_104679:
	movq $0x37CB,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0xC0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x98(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0xA0(%rbp)
	movl $0x2,0xA8(%rbp)
	addq $0xA0,%rbp
	leaq (L_104680+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
.long 0x1525
L_104680:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104681
L_104686:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA0,%rbp
	leaq (L_104687+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104687
.p2align 0x4
.long 0x1528
L_104687:
	addq $0xFFFFFFFFFFFFFF60,%rbp
L_104681:
	movq $0x1DA7,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x20,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x80(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0xBE9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x20,%r12
	movq 0x70(%rbp),%r15
	movq %r15,0x0(%r14)
	movq 0x28(%rbp),%r15
	movq %r15,0x10(%r14)
	movq $0x3959,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x18,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0xA0(%rbp)
	movl $0x2,0xA8(%rbp)
	addq $0xA0,%rbp
	leaq (L_104682+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_30
.p2align 0x4
.long 0x1526
L_104682:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104683
L_104684:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA0,%rbp
	leaq (L_104685+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104685
.p2align 0x4
.long 0x1527
L_104685:
	addq $0xFFFFFFFFFFFFFF60,%rbp
L_104683:
	movq $0x1DAD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1DA5,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x28,%r12
	movq $0x1,0x8(%r14)
	movq 0x50(%rbp),%r13
	movq %r13,0x10(%r14)
	movq 0x80(%rbp),%r13
	movq %r13,0x18(%r14)
	movq $0x1D99,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x18,%r12
	movq 0x90(%rbp),%r14
	movq %r14,0x8(%r15)
	jmp L_104428
.text
.p2align 0x4
.globl each_0
.hidden each_0
each_0:
L_104856:
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_105111
L_104857:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_417176
L_104858:
	movq 0x10(%rbp),%r15
	movq 0x20(%r15),%r14
	movq %r14,0x18(%rbp)
	movq 0x18(%r15),%r14
	movq 0x10(%r15),%r13
	movq 0x8(%r15),%r11
	movl 0x8(%rbp),%r10d
	cmpl %r10d,0x0(%r15)
	je L_417171
L_104859:
	movslq %r10d,%r9
	cmpq 0xFFFFFFFFFFFFFFF0(%r14),%r9
	jnb L_417170
L_104862:
	movq %r11,0x18(%rbp)
	movq 0x0(%r14,%r9,8),%r11
	movq $0x473D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x20,%r12
	movl %r10d,0x0(%r14)
	movq %r13,0x8(%rbp)
	movl $0x0,0x4(%r14)
	movq %r15,0x8(%r14)
	movq %r11,0x10(%rbp)
	movq 0x0(%rbp),%r15
	movq %r15,0x10(%r14)
	movq $0x1DB1,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r15,0x0(%rbp)
	addq $0x10,%r12
	jmp loop_3827
.p2align 0x4
L_417170:
L_104861:
	movq $0x6,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417171:
L_104863:
	movq $0x19D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x8(%rbp)
	addq $0x10,%r12
	movq 0x0(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_417175
L_104864:
	movq 0x8(%r13),%r14
	xorl %ecx,%ecx
	xchgq %r14,%r15
.p2align 0x4,,0x7
L_104865:
	incl %ecx
	movl %ecx,0x10(%rbp)
	jo L_417174
L_104867:
	cmpq $0x1,%r15
	je L_417172
L_104868:
	movq 0x8(%r15),%r15
	jmp L_104865
.p2align 0x4
L_417172:
L_104869:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104870
L_105108:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_105109+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105109
.p2align 0x4
.long 0x523
L_105109:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_104870:
	movl 0x10(%rbp),%ecx
L_104871:
	movl %ecx,0x30(%rbp)
	movq $0x3FE1,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x8(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x28(%rbp)
	addq $0x28,%rbp
	leaq (L_104872+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_417174:
L_104866:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417175:
L_105110:
	xorl %ecx,%ecx
	jmp L_104871
.p2align 0x4
L_417176:
L_105111:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_105112+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105112
.p2align 0x4
.long 0x65B
L_105112:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	jmp L_104858
.p2align 0x4
.long 0x490
L_104872:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104873
L_105106:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_105107+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105107
.p2align 0x4
.long 0x5E6
L_105107:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_104873:
	movq 0x20(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_417179
L_104876:
	movl %r13d,%r14d
	decl %r14d
	jo L_104866
L_104877:
	movl %r13d,0x30(%rbp)
	movq $0x3FDD,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movl %r14d,0x0(%r13)
	addq $0x18,%r12
	movl $0x0,0x4(%r13)
	movq %r15,0x8(%r13)
	movq %r13,0x28(%rbp)
	addq $0x28,%rbp
	leaq (L_104878+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_417179:
L_104875:
	movq (globalObjptr+0x518)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x490
L_104878:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104879
L_105104:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_105105+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105105
.p2align 0x4
.long 0x5E6
L_105105:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_104879:
	movq 0x18(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0x23A4,%r14
	je L_417197
	cmpq $0x23A5,%r14
	je L_417193
	cmpq $0x23A6,%r14
	je L_417190
	cmpq $0x23A7,%r14
	je L_417187
	cmpq $0x23A8,%r14
	je L_417183
L_104880:
	movq 0x30(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x28(%r15),%r13
	movq %r13,0x30(%rbp)
	movq 0x18(%r15),%r13
	movq %r13,0x38(%rbp)
	movq 0x10(%r15),%r13
	movq %r13,0x40(%rbp)
	movq 0x8(%r15),%r13
	movq %r13,0x48(%rbp)
	movq 0x0(%r15),%r13
	movq %r13,0x50(%rbp)
	movq 0x20(%r15),%r13
	movq 0x0(%r13),%r11
	movq %r11,0x58(%rbp)
	movq 0x30(%r13),%r11
	movq 0x8(%r11),%r10
	movq 0x0(%r11),%r9
	movq %r9,0x60(%rbp)
L_104881:
	movq %r14,%r15
	andq $0x3,%r15
	jnz L_417182
L_104931:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0xEDB,%r15
	jne L_417181
L_104932:
	movq 0x8(%r14),%r15
	movq %r15,0x68(%rbp)
	movq 0x0(%r14),%r10
	movq 0x10(%r14),%r14
	movq %r14,0x28(%rbp)
	movq %r10,0x70(%rbp)
L_104886:
	movq 0x60(%rbp),%r15
	movq %r15,0x80(%rbp)
	addq $0x80,%rbp
	leaq (L_104887+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_417181:
	movq %r10,%r15
L_104882:
	movq %r15,0x70(%rbp)
	addq $0x70,%rbp
	leaq (L_104883+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_417182:
	movq %r10,%r15
	jmp L_104882
.p2align 0x4
L_417183:
L_105089:
	movq 0x20(%r15),%r14
	movq 0x18(%r15),%r13
	movq 0x10(%r15),%r11
	movq %r11,0x28(%rbp)
	movq 0x8(%r15),%r10
	movq %r10,0x30(%rbp)
	movq 0x0(%r15),%r10
	movq $0x1D75,0x0(%r12)
	movq %r12,%r9
	addq $0x8,%r9
	movq %r9,0x38(%rbp)
	movq %r14,0x8(%r9)
	movq %r13,0x10(%r9)
	addq $0x20,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r9)
	movq 0x10(%r10),%r15
L_105090:
	movq %r11,%r14
	andq $0x3,%r14
	jnz L_105091
L_105101:
	movq 0xFFFFFFFFFFFFFFF8(%r11),%r14
	shrq $0x1,%r14
	cmpq $0xED9,%r14
	je L_417185
	cmpq $0xEDB,%r14
	je L_417184
L_105091:
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_105092+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_417184:
L_105103:
	movq 0x28(%rbp),%r11
	movq 0x10(%r11),%r15
	movq 0x8(%r11),%r13
	movq 0x0(%r11),%r14
L_105096:
	movq %r15,0x0(%rbp)
	movq $0x937,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x20,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0x1DB9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r13,0x8(%r14)
	movq %r14,0x8(%rbp)
	addq $0x18,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417185:
L_105102:
	movq 0x28(%rbp),%r15
	movl 0x0(%r15),%r14d
	movl %r14d,0x10(%rbp)
	movq 0x28(%r15),%r14
	movq %r14,0x18(%rbp)
	movq 0x20(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x10(%r15),%r14
	movq 0x8(%r15),%r13
	movq 0x18(%r15),%r15
	movq %r15,0x28(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq %r14,0x30(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq %r13,0x38(%rbp)
	jmp x_1535
.p2align 0x4
L_417187:
L_104996:
	movq 0x38(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x30(%r15),%r13
	movq %r13,0x30(%rbp)
	movq 0x20(%r15),%r13
	movq %r13,0x38(%rbp)
	movq 0x18(%r15),%r13
	movq %r13,0x40(%rbp)
	movq 0x10(%r15),%r13
	movq %r13,0x48(%rbp)
	movq 0x8(%r15),%r13
	movq %r13,0x50(%rbp)
	movq 0x0(%r15),%r13
	movq %r13,0x58(%rbp)
	movq 0x28(%r15),%r13
	movq 0x0(%r13),%r11
	movq %r11,0x60(%rbp)
	movq 0x30(%r13),%r11
	movq 0x8(%r11),%r10
	movq 0x0(%r11),%r9
	movq %r9,0x68(%rbp)
L_104997:
	movq %r14,%r15
	andq $0x3,%r15
	jnz L_417189
L_105087:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0xEDB,%r15
	jne L_417188
L_105088:
	movq 0x8(%r14),%r15
	movq %r15,0x70(%rbp)
	movq 0x0(%r14),%r10
	movq 0x10(%r14),%r14
	movq %r14,0x28(%rbp)
	movq %r10,0x78(%rbp)
L_105002:
	movq 0x68(%rbp),%r15
	movq %r15,0x88(%rbp)
	addq $0x88,%rbp
	leaq (L_105003+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_417188:
	movq %r10,%r15
L_104998:
	movq %r15,0x78(%rbp)
	addq $0x78,%rbp
	leaq (L_104999+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_417189:
	movq %r10,%r15
	jmp L_104998
.p2align 0x4
L_417190:
L_104963:
	movq 0x20(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x18(%r15),%r13
	movq %r13,0x30(%rbp)
	movq 0x8(%r15),%r13
	movq %r13,0x38(%rbp)
	movq 0x0(%r15),%r13
	movq %r13,0x40(%rbp)
	movq 0x10(%r15),%r13
	movq 0x0(%r13),%r11
	movq %r11,0x48(%rbp)
	movq 0x30(%r13),%r11
	movq 0x8(%r11),%r10
	movq 0x0(%r11),%r9
	movq %r9,0x50(%rbp)
L_104964:
	movq %r14,%r15
	andq $0x3,%r15
	jnz L_417192
L_104994:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0xEDB,%r15
	jne L_417191
L_104995:
	movq 0x8(%r14),%r15
	movq %r15,0x58(%rbp)
	movq 0x0(%r14),%r10
	movq 0x10(%r14),%r14
	movq %r14,0x28(%rbp)
	movq %r10,0x60(%rbp)
L_104969:
	movq 0x50(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x70,%rbp
	leaq (L_104970+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_417191:
	movq %r10,%r15
L_104965:
	movq %r15,0x60(%rbp)
	addq $0x60,%rbp
	leaq (L_104966+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_417192:
	movq %r10,%r15
	jmp L_104965
.p2align 0x4
L_417193:
L_104948:
	movq 0x18(%r15),%r14
	movq 0x10(%r15),%r13
	movq %r13,0x28(%rbp)
	movq 0x8(%r15),%r11
	movq %r11,0x30(%rbp)
	movq 0x0(%r15),%r11
	movq $0x1D79,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r10,0x38(%rbp)
	movq %r14,0x8(%r10)
	addq $0x18,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r10)
	movq 0x10(%r11),%r15
L_104949:
	movq %r13,%r14
	andq $0x3,%r14
	jnz L_104950
L_104960:
	movq 0xFFFFFFFFFFFFFFF8(%r13),%r14
	shrq $0x1,%r14
	cmpq $0xED9,%r14
	je L_417195
	cmpq $0xEDB,%r14
	je L_417194
L_104950:
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_104951+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_417194:
L_104962:
	movq 0x28(%rbp),%r11
	movq 0x10(%r11),%r15
	movq 0x8(%r11),%r13
	movq 0x0(%r11),%r14
L_104955:
	movq %r15,0x0(%rbp)
	movq $0x937,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x20,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0x1DB9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r13,0x8(%r14)
	movq %r14,0x8(%rbp)
	addq $0x18,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417195:
L_104961:
	movq 0x28(%rbp),%r15
	movl 0x0(%r15),%r14d
	movl %r14d,0x10(%rbp)
	movq 0x28(%r15),%r14
	movq %r14,0x18(%rbp)
	movq 0x20(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x10(%r15),%r14
	movq 0x8(%r15),%r13
	movq 0x18(%r15),%r15
	movq %r15,0x28(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq %r14,0x30(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq %r13,0x38(%rbp)
	jmp x_1535
.p2align 0x4
L_417197:
L_104933:
	movq 0x10(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x8(%r15),%r13
	movq %r13,0x30(%rbp)
	movq 0x0(%r15),%r13
	movq $0x1D6F,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,0x38(%rbp)
	addq $0x10,%r12
	movq 0x20(%rbp),%r10
	movq %r10,0x0(%r11)
	movq 0x10(%r13),%r15
L_104934:
	movq %r14,%r13
	andq $0x3,%r13
	jnz L_104935
L_104945:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0xED9,%r13
	je L_417199
	cmpq $0xEDB,%r13
	je L_417198
L_104935:
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_104936+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_417198:
L_104947:
	movq 0x28(%rbp),%r11
	movq 0x10(%r11),%r15
	movq 0x8(%r11),%r13
	movq 0x0(%r11),%r14
L_104940:
	movq %r15,0x0(%rbp)
	movq $0x937,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x20,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0x1DB9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r13,0x8(%r14)
	movq %r14,0x8(%rbp)
	addq $0x18,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417199:
L_104946:
	movq 0x28(%rbp),%r15
	movl 0x0(%r15),%r14d
	movl %r14d,0x10(%rbp)
	movq 0x28(%r15),%r14
	movq %r14,0x18(%rbp)
	movq 0x20(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x10(%r15),%r14
	movq 0x8(%r15),%r13
	movq 0x18(%r15),%r15
	movq %r15,0x28(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq %r14,0x30(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq %r13,0x38(%rbp)
	jmp x_1535
.p2align 0x4
.long 0x154E
L_104887:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movl 0x80(%rbp),%r15d
	movl %r15d,0x60(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104888
L_104927:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x80,%rbp
	leaq (L_104928+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104928
.p2align 0x4
.long 0x155A
L_104928:
	addq $0xFFFFFFFFFFFFFF80,%rbp
L_104888:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x78(%rbp)
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x80(%rbp)
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x88(%rbp)
	addq $0x28,%r12
	movl 0x60(%rbp),%r11d
	movl %r11d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	movq (globalObjptr+0xEC10)(%rip),%r15
	movq %r15,0x18(%r13)
	movq $0x9C3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x70(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x3EFB,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x98(%rbp)
	addq $0x10,%r12
	movl $0x1,0xA0(%rbp)
	addq $0x98,%rbp
	leaq (L_104889+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
.long 0xA3A
L_104883:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movl 0x70(%rbp),%r15d
	movl %r15d,0x68(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104884
L_104929:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_104930+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104930
.p2align 0x4
.long 0x155B
L_104930:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_104884:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x70(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x68(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq %r13,0x80(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x88(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x90(%rbp)
	addq $0x80,%rbp
	leaq (L_104885+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sendVar_0
.p2align 0x4
.long 0x7B5
L_105092:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl 0x48(%rbp),%r15d
	movl %r15d,0x40(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105093
L_105099:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_105100+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105100
.p2align 0x4
.long 0x1499
L_105100:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_105093:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x48(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x40(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq %r13,0x58(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x68(%rbp)
	addq $0x58,%rbp
	leaq (L_105094+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sendVar_0
.p2align 0x4
.long 0x1564
L_105003:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	movl 0x88(%rbp),%r15d
	movl %r15d,0x68(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105004
L_105083:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_105084+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105084
.p2align 0x4
.long 0x1571
L_105084:
	addq $0xFFFFFFFFFFFFFF78,%rbp
L_105004:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x80(%rbp)
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x88(%rbp)
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x90(%rbp)
	addq $0x28,%r12
	movl 0x68(%rbp),%r11d
	movl %r11d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	movq (globalObjptr+0xEC10)(%rip),%r15
	movq %r15,0x18(%r13)
	movq $0x9C3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x78(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x3EFB,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0xA0(%rbp)
	addq $0x10,%r12
	movl $0x1,0xA8(%rbp)
	addq $0xA0,%rbp
	leaq (L_105005+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
.long 0x1562
L_104999:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movl 0x78(%rbp),%r15d
	movl %r15d,0x70(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105000
L_105085:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x80,%rbp
	leaq (L_105086+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105086
.p2align 0x4
.long 0x1572
L_105086:
	addq $0xFFFFFFFFFFFFFF80,%rbp
L_105000:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x78(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x70(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq %r13,0x88(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x90(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x98(%rbp)
	addq $0x88,%rbp
	leaq (L_105001+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sendVar_0
.p2align 0x4
.long 0x155C
L_104970:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movl 0x70(%rbp),%r15d
	movl %r15d,0x50(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104971
L_104990:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_104991+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104991
.p2align 0x4
.long 0x86D
L_104991:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_104971:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x68(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x50(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xEC10)(%rip),%r15
	movq %r15,0x18(%r13)
	movq $0x9C3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x60(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x3EFB,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x78(%rbp)
	addq $0x10,%r12
	movl $0x1,0x80(%rbp)
	addq $0x78,%rbp
	leaq (L_104972+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
.long 0x4B4
L_104966:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movl 0x60(%rbp),%r15d
	movl %r15d,0x58(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104967
L_104992:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_104993+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104993
.p2align 0x4
.long 0x1561
L_104993:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_104967:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x60(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x58(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq %r13,0x70(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x78(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x80(%rbp)
	addq $0x70,%rbp
	leaq (L_104968+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sendVar_0
.p2align 0x4
.long 0x7B5
L_104951:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl 0x48(%rbp),%r15d
	movl %r15d,0x40(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104952
L_104958:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_104959+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104959
.p2align 0x4
.long 0x1499
L_104959:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_104952:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x48(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x40(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq %r13,0x58(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x68(%rbp)
	addq $0x58,%rbp
	leaq (L_104953+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sendVar_0
.p2align 0x4
.long 0x7B5
L_104936:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl 0x48(%rbp),%r15d
	movl %r15d,0x40(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104937
L_104943:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_104944+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104944
.p2align 0x4
.long 0x1499
L_104944:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_104937:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x48(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x40(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq %r13,0x58(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x68(%rbp)
	addq $0x58,%rbp
	leaq (L_104938+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sendVar_0
.p2align 0x4
.long 0x154F
L_104889:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq 0x98(%rbp),%r15
	movq %r15,0x70(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104890
L_104925:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_104926+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104926
.p2align 0x4
.long 0x1558
L_104926:
	addq $0xFFFFFFFFFFFFFF68,%rbp
L_104890:
	movq $0x939,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x90(%rbp)
	addq $0x10,%r12
	movq 0x68(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_417214
L_104891:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_104892:
	incl %ecx
	movl %ecx,0x64(%rbp)
	jo L_104866
L_104893:
	cmpq $0x1,%r15
	je L_417211
L_104894:
	movq 0x8(%r15),%r15
	jmp L_104892
.p2align 0x4
L_417211:
L_104895:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104896
L_104922:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA0,%rbp
	leaq (L_104923+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104923
.p2align 0x4
.long 0x1559
L_104923:
	addq $0xFFFFFFFFFFFFFF60,%rbp
L_104896:
	movl 0x64(%rbp),%ecx
L_104897:
	movl %ecx,0xA0(%rbp)
	movq $0x4067,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x90(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x98(%rbp)
	addq $0x98,%rbp
	leaq (L_104898+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_5
.p2align 0x4
L_417214:
L_104924:
	xorl %ecx,%ecx
	jmp L_104897
.p2align 0x4
.long 0x154D
L_104885:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movq 0x80(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x88(%rbp),%r15
	movq %r15,0x68(%rbp)
	jmp L_104886
.p2align 0x4
.long 0x6DC
L_105094:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0x50(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105095
L_105097:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_105098+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105098
.p2align 0x4
.long 0x14DD
L_105098:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_105095:
	movq 0x40(%rbp),%r15
	movq 0x50(%rbp),%r13
	movq 0x48(%rbp),%r14
	jmp L_105096
.p2align 0x4
.long 0x1565
L_105005:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x78(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105006
L_105081:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA0,%rbp
	leaq (L_105082+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105082
.p2align 0x4
.long 0x156F
L_105082:
	addq $0xFFFFFFFFFFFFFF60,%rbp
L_105006:
	movq $0x939,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x98(%rbp)
	addq $0x10,%r12
	movq 0x70(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_417220
L_105007:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_105008:
	incl %ecx
	movl %ecx,0x6C(%rbp)
	jo L_104866
L_105009:
	cmpq $0x1,%r15
	je L_417217
L_105010:
	movq 0x8(%r15),%r15
	jmp L_105008
.p2align 0x4
L_417217:
L_105011:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105012
L_105078:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA8,%rbp
	leaq (L_105079+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105079
.p2align 0x4
.long 0x1570
L_105079:
	addq $0xFFFFFFFFFFFFFF58,%rbp
L_105012:
	movl 0x6C(%rbp),%ecx
L_105013:
	movl %ecx,0xA8(%rbp)
	movq $0x4067,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x98(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0xA0(%rbp)
	addq $0xA0,%rbp
	leaq (L_105014+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_5
.p2align 0x4
L_417220:
L_105080:
	xorl %ecx,%ecx
	jmp L_105013
.p2align 0x4
.long 0x1563
L_105001:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	movq 0x88(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x90(%rbp),%r15
	movq %r15,0x70(%rbp)
	jmp L_105002
.p2align 0x4
.long 0x155D
L_104972:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq 0x78(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104973
L_104988:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_104989+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104989
.p2align 0x4
.long 0x1560
L_104989:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_104973:
	movq $0x939,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x50(%rbp)
	addq $0x10,%r12
	movq 0x58(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_417225
L_104974:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_104975:
	incl %ecx
	movl %ecx,0x58(%rbp)
	jo L_104866
L_104976:
	cmpq $0x1,%r15
	je L_417222
L_104977:
	movq 0x8(%r15),%r15
	jmp L_104975
.p2align 0x4
L_417222:
L_104978:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104979
L_104985:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_104986+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104986
.p2align 0x4
.long 0x155F
L_104986:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_104979:
	movl 0x58(%rbp),%ecx
L_104980:
	movl %ecx,0x80(%rbp)
	movq $0x4067,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x50(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x78(%rbp)
	addq $0x78,%rbp
	leaq (L_104981+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_5
.p2align 0x4
L_417225:
L_104987:
	xorl %ecx,%ecx
	jmp L_104980
.p2align 0x4
.long 0x824
L_104968:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq 0x70(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x78(%rbp),%r15
	movq %r15,0x58(%rbp)
	jmp L_104969
.p2align 0x4
.long 0x6DC
L_104953:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0x50(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104954
L_104956:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_104957+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104957
.p2align 0x4
.long 0x14DD
L_104957:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_104954:
	movq 0x40(%rbp),%r15
	movq 0x50(%rbp),%r13
	movq 0x48(%rbp),%r14
	jmp L_104955
.p2align 0x4
.long 0x6DC
L_104938:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0x50(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104939
L_104941:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_104942+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104942
.p2align 0x4
.long 0x14DD
L_104942:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_104939:
	movq 0x40(%rbp),%r15
	movq 0x50(%rbp),%r13
	movq 0x48(%rbp),%r14
	jmp L_104940
.p2align 0x4
.long 0x1550
L_104898:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq 0x98(%rbp),%r15
	movq %r15,0x68(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104899
L_104920:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_104921+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104921
.p2align 0x4
.long 0x1558
L_104921:
	addq $0xFFFFFFFFFFFFFF68,%rbp
L_104899:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x68(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x88(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x70(%rbp),%r14
	movq %r14,0x18(%r15)
	movq 0x58(%rbp),%r14
	movq 0x0(%r14),%r13
	movq $0x1DBB,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r15,0x0(%r11)
	movq %r13,0x8(%r11)
	addq $0x18,%r12
	movq %r14,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r13
	movb $0x1,0x0(%r13,%r15,1)
	movq %r11,0x0(%r14)
	movq $0x1DB5,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x90(%rbp)
	addq $0x28,%r12
	movl 0x60(%rbp),%r14d
	movl %r14d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq (globalObjptr+0xEC10)(%rip),%r14
	movq %r14,0x8(%r15)
	movq 0x80(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x78(%rbp),%r14
	movq %r14,0x18(%r15)
	movq $0x1,0xA0(%rbp)
	movl $0x0,0xA8(%rbp)
	addq $0xA0,%rbp
	leaq (L_104900+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
.long 0x1566
L_105014:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x70(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105015
L_105076:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA0,%rbp
	leaq (L_105077+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105077
.p2align 0x4
.long 0x156F
L_105077:
	addq $0xFFFFFFFFFFFFFF60,%rbp
L_105015:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x70(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x90(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x78(%rbp),%r14
	movq %r14,0x18(%r15)
	movq 0x60(%rbp),%r14
	movq 0x0(%r14),%r13
	movq $0x1DBB,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r15,0x0(%r11)
	movq %r13,0x8(%r11)
	addq $0x18,%r12
	movq %r14,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r13
	movb $0x1,0x0(%r13,%r15,1)
	movq %r11,0x0(%r14)
	movq $0x1DB5,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x98(%rbp)
	addq $0x28,%r12
	movl 0x68(%rbp),%r14d
	movl %r14d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq (globalObjptr+0xEC10)(%rip),%r14
	movq %r14,0x8(%r15)
	movq 0x88(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x80(%rbp),%r14
	movq %r14,0x18(%r15)
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
L_105016:
	movq %r14,%r15
	andq $0x3,%r15
	jnz L_105017
L_105057:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0xEB2,%r15
	jne L_417232
L_105058:
	movq 0x0(%r14),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r13
	movl %r13d,%r11d
	movslq %r11d,%r10
	cmpq %r10,%r13
	jne L_104875
L_105060:
	testl %r11d,%r11d
	jz L_417230
L_105061:
	movq 0x48(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_105062+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_545
.p2align 0x4
L_417230:
L_105070:
	movq $0x1,0xA8(%rbp)
	movl $0x0,0xB0(%rbp)
	addq $0xA8,%rbp
	leaq (L_105071+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
L_417232:
L_105017:
	movq 0x38(%rbp),%r15
	movq %r15,0xA8(%rbp)
	addq $0xA8,%rbp
	leaq (L_105018+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
.long 0x155E
L_104981:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq 0x78(%rbp),%r15
	movq %r15,0x50(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104982
L_104983:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_104984+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104984
.p2align 0x4
.long 0x155F
L_104984:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_104982:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x50(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x68(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x30(%rbp),%r13
	movq %r13,0x18(%r15)
	movq 0x48(%rbp),%r13
	movq 0x0(%r13),%r11
	movq $0x1DBB,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,0x0(%r10)
	movq %r11,0x8(%r10)
	addq $0x18,%r12
	movq %r13,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r15,1)
	movq %r10,0x0(%r13)
	movq $0x240B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq %r14,0x0(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x1D85,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x10(%r14)
	addq $0x20,%r12
	movq 0x20(%rbp),%r15
	movq %r15,0x0(%r14)
	movq 0x40(%rbp),%r15
	movq %r15,0x8(%r14)
	movq %r14,0x0(%rbp)
	movq $0x1,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1551
L_104900:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x48(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x58(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x60(%rbp)
	movq 0x90(%rbp),%r14
	movq %r14,0x98(%rbp)
	movq 0x40(%rbp),%r14
	movq %r14,0xA0(%rbp)
	movq 0x38(%rbp),%r14
	movq %r14,0xA8(%rbp)
	movq %r15,0xB0(%rbp)
	addq $0x98,%rbp
	leaq (L_104901+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3827
.p2align 0x4
.long 0x1
L_105062:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105063
L_105068:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_105069+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105069
.p2align 0x4
.long 0x452
L_105069:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_105063:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xF210)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x8(%rbp)
	addq $0x8,%rbp
	leaq (L_105064+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x1567
L_105071:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movq 0xA8(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq $0x1,0xA8(%rbp)
	movl $0x0,0xB0(%rbp)
	addq $0xA8,%rbp
	leaq (L_105072+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
.long 0x1567
L_105018:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movl 0xA8(%rbp),%r15d
	movl %r15d,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105019
L_105055:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA8,%rbp
	leaq (L_105056+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105056
.p2align 0x4
.long 0x156E
L_105056:
	addq $0xFFFFFFFFFFFFFF58,%rbp
L_105019:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x28(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq $0x9C3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x38(%rbp)
	movq %r13,0x8(%r15)
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x3EFB,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq %r15,0x0(%r14)
	movq %r14,0xA8(%rbp)
	movl $0x1,0xB0(%rbp)
	addq $0xA8,%rbp
	leaq (L_105020+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
.long 0x1552
L_104901:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq 0x98(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0xA0(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x98(%rbp)
	addq $0x98,%rbp
	leaq (L_104902+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
.long 0x1
L_105064:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105065
L_105066:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_105067+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105067
.p2align 0x4
.long 0x452
L_105067:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_105065:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1569
L_105072:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movq 0xA8(%rbp),%r15
	movq %r15,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105073
L_105074:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA8,%rbp
	leaq (L_105075+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105075
.p2align 0x4
.long 0x156D
L_105075:
	addq $0xFFFFFFFFFFFFFF58,%rbp
L_105073:
	movq 0x38(%rbp),%r15
L_105024:
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_104875
L_105026:
	cmpl $0x1,%r13d
	jne L_417240
L_105048:
	cmpq $0x0,%r14
	jna L_104861
L_105050:
	movq 0x0(%r15),%r15
L_105028:
	movq %r15,0x68(%rbp)
	movq 0x58(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x30(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x50(%rbp),%r14
	movq %r14,0x60(%rbp)
	movq %r15,0x70(%rbp)
	movq 0x98(%rbp),%r15
	movq %r15,0x58(%rbp)
	addq $0x58,%rbp
	leaq (L_105029+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3827
.p2align 0x4
L_417240:
L_105027:
	movq $0x1D8B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x18,%r12
	movq 0x30(%rbp),%r13
	movq %r13,0x8(%r14)
	movq %r14,%r15
	jmp L_105028
.p2align 0x4
.long 0x1568
L_105020:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movq 0xA8(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105021
L_105053:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA8,%rbp
	leaq (L_105054+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105054
.p2align 0x4
.long 0x156D
L_105054:
	addq $0xFFFFFFFFFFFFFF58,%rbp
L_105021:
	movq $0x1D89,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x37CD,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0xA8(%rbp)
	addq $0x10,%r12
	movl $0x1,0xB0(%rbp)
	addq $0xA8,%rbp
	leaq (L_105022+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
.long 0x1553
L_104902:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movl 0x98(%rbp),%r15d
	movl %r15d,0x48(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104903
L_104918:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_104919+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104919
.p2align 0x4
.long 0x1557
L_104919:
	addq $0xFFFFFFFFFFFFFF68,%rbp
L_104903:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x58(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x48(%rbp),%r14d
	movl %r14d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xEC10)(%rip),%r14
	movq %r14,0x18(%r13)
	movq $0x939,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x68(%rbp)
	addq $0x10,%r12
	movq 0x40(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_417247
L_104904:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_104905:
	incl %ecx
	movl %ecx,0x40(%rbp)
	jo L_104866
L_104906:
	cmpq $0x1,%r15
	je L_417244
L_104907:
	movq 0x8(%r15),%r15
	jmp L_104905
.p2align 0x4
L_417244:
L_104908:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104909
L_104915:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_104916+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104916
.p2align 0x4
.long 0x1556
L_104916:
	addq $0xFFFFFFFFFFFFFF68,%rbp
L_104909:
	movl 0x40(%rbp),%ecx
L_104910:
	movl %ecx,0xA0(%rbp)
	movq $0x4067,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x68(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x98(%rbp)
	addq $0x98,%rbp
	leaq (L_104911+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_5
.p2align 0x4
L_417247:
L_104917:
	xorl %ecx,%ecx
	jmp L_104910
.p2align 0x4
.long 0x77D
L_105029:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0x50(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x60(%rbp)
	addq $0x60,%rbp
	leaq (L_105030+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
.long 0x1569
L_105022:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movq 0xA8(%rbp),%r15
	movq %r15,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105023
L_105051:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA8,%rbp
	leaq (L_105052+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105052
.p2align 0x4
.long 0x156D
L_105052:
	addq $0xFFFFFFFFFFFFFF58,%rbp
L_105023:
	movq 0x38(%rbp),%r15
	jmp L_105024
.p2align 0x4
.long 0x1554
L_104911:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq 0x98(%rbp),%r15
	movq %r15,0x40(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_104912
L_104913:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_104914+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104914
.p2align 0x4
.long 0x1555
L_104914:
	addq $0xFFFFFFFFFFFFFF68,%rbp
L_104912:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x40(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x58(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x28(%rbp),%r13
	movq %r13,0x18(%r15)
	movq 0x60(%rbp),%r13
	movq 0x0(%r13),%r11
	movq $0x1DBB,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,0x0(%r10)
	movq %r11,0x8(%r10)
	addq $0x18,%r12
	movq %r13,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r15,1)
	movq %r10,0x0(%r13)
	movq $0x1D87,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x30,%r12
	movq 0x20(%rbp),%r13
	movq %r13,0x0(%r15)
	movq %r14,0x8(%r15)
	movq 0x50(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x88(%rbp),%r14
	movq %r14,0x18(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x20(%r15)
	movq %r15,0x0(%rbp)
	movq $0x1,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x156A
L_105030:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movl 0x60(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105031
L_105046:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_105047+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105047
.p2align 0x4
.long 0x857
L_105047:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_105031:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x58(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x30(%rbp),%r14d
	movl %r14d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xEC10)(%rip),%r14
	movq %r14,0x18(%r13)
	movq $0x939,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x60(%rbp)
	addq $0x10,%r12
	movq 0x50(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_417254
L_105032:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_105033:
	incl %ecx
	movl %ecx,0x30(%rbp)
	jo L_104866
L_105034:
	cmpq $0x1,%r15
	je L_417251
L_105035:
	movq 0x8(%r15),%r15
	jmp L_105033
.p2align 0x4
L_417251:
L_105036:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105037
L_105043:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_105044+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105044
.p2align 0x4
.long 0x156C
L_105044:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_105037:
	movl 0x30(%rbp),%ecx
L_105038:
	movl %ecx,0x70(%rbp)
	movq $0x4067,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x60(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x68(%rbp)
	addq $0x68,%rbp
	leaq (L_105039+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_5
.p2align 0x4
L_417254:
L_105045:
	xorl %ecx,%ecx
	jmp L_105038
.p2align 0x4
.long 0x156B
L_105039:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq 0x68(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105040
L_105041:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_105042+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105042
.p2align 0x4
.long 0x7B1
L_105042:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_105040:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x40(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x58(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x28(%rbp),%r13
	movq %r13,0x18(%r15)
	movq 0x38(%rbp),%r13
	movq 0x0(%r13),%r11
	movq $0x1DBB,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,0x0(%r10)
	movq %r11,0x8(%r10)
	addq $0x18,%r12
	movq %r13,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r15,1)
	movq %r10,0x0(%r13)
	movq $0x1D7B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x20,%r12
	movq 0x20(%rbp),%r13
	movq %r13,0x0(%r15)
	movq 0x48(%rbp),%r13
	movq %r13,0x8(%r15)
	movq %r14,0x10(%r15)
	movq %r15,0x0(%rbp)
	movq $0x1,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl x_1535
.hidden x_1535
x_1535:
L_105113:
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_105267
L_105114:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_417266
L_105115:
	movq 0x8(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xEB6,%r14
	je L_417263
	cmpq $0xEB7,%r14
	je L_417257
L_105116:
	movq 0x18(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_105117+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_417257:
L_105245:
	movq 0x8(%rbp),%r15
	movq 0x0(%r15),%r14
	movq 0x20(%rbp),%r15
	movq 0x20(%r15),%r13
	movq %r13,0x10(%rbp)
	movq 0x18(%r15),%r13
	movq 0x10(%r15),%r11
	movq 0x8(%r15),%r10
	movq 0x0(%r15),%r9
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	movl %r15d,%r8d
	movslq %r8d,%rsp
	cmpq %rsp,%r15
	jne L_105126
L_105247:
	movq 0xFFFFFFFFFFFFFFF0(%r9),%r15
	movl %r15d,%esp
	movslq %esp,%rsi
	cmpq %rsi,%r15
	jne L_105126
L_105249:
	cmpl %r8d,%esp
	jne L_105137
L_105251:
	movq 0xFFFFFFFFFFFFFFF0(%r10),%r15
	movl %r15d,%esp
	movslq %esp,%rsi
	cmpq %r15,%rsi
	jne L_417259
L_105253:
	cmpl %esp,%r8d
	jne L_417258
L_105255:
	movl %r8d,0x50(%rbp)
	movq $0x37C9,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r11,0x0(%r15)
	movq %r13,0x8(%r15)
	movq %r10,0x10(%r15)
	movq %r9,0x18(%r15)
	movq %r14,0x20(%r15)
	movq %r15,0x48(%rbp)
	addq $0x30,%r12
	addq $0x48,%rbp
	leaq (L_105256+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
L_417258:
L_105137:
	movq (globalObjptr+0x70C0)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417259:
L_105126:
	movq (globalObjptr+0x518)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417263:
L_105187:
	movq 0x8(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r14,0x40(%rbp)
	movl 0x10(%rbp),%r15d
	cmpl $0x0,%r15d
	je L_417265
	cmpl $0x1,%r15d
	je L_417264
L_105188:
	movq $0x3FD7,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq 0x18(%rbp),%r13
	movq %r13,0x0(%r14)
	movq %r14,0x50(%rbp)
	movl %r15d,0x58(%rbp)
	addq $0x50,%rbp
	leaq (L_105189+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_417264:
L_105240:
	movq $0x3FE3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq 0x40(%rbp),%r13
	movq %r13,0x0(%r14)
	movq %r14,0x48(%rbp)
	movl $0x1,0x50(%rbp)
	addq $0x48,%rbp
	leaq (L_105241+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_417265:
L_105235:
	movq $0x1,0x48(%rbp)
	movl $0x0,0x50(%rbp)
	addq $0x48,%rbp
	leaq (L_105236+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_417266:
L_105267:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_105268+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105268
.p2align 0x4
.long 0x564
L_105268:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	jmp L_105115
.p2align 0x4
.long 0x541
L_105117:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl 0x48(%rbp),%r15d
	movl %r15d,0x14(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105118
L_105185:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_105186+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105186
.p2align 0x4
.long 0x564
L_105186:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_105118:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x40(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x14(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movl 0x10(%rbp),%r15d
	cmpl $0x0,%r15d
	je L_417269
	cmpl $0x1,%r15d
	je L_417268
L_105119:
	movq $0x3FD7,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq 0x18(%rbp),%r13
	movq %r13,0x0(%r14)
	movq %r14,0x50(%rbp)
	movl %r15d,0x58(%rbp)
	addq $0x50,%rbp
	leaq (L_105120+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_417268:
L_105180:
	movq $0x3FE3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq 0x40(%rbp),%r13
	movq %r13,0x0(%r14)
	movq %r14,0x50(%rbp)
	movl $0x1,0x58(%rbp)
	addq $0x50,%rbp
	leaq (L_105181+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_417269:
L_105175:
	movq $0x1,0x50(%rbp)
	movl $0x0,0x58(%rbp)
	addq $0x50,%rbp
	leaq (L_105176+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
.long 0x9AC
L_105256:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x18(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105257
L_105265:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_105266+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105266
.p2align 0x4
.long 0x9AD
L_105266:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_105257:
	movq 0x18(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	movl %r15d,%r13d
	movslq %r13d,%r11
	cmpq %r15,%r11
	jne L_105126
L_105259:
	cmpl $0x1,%r13d
	jne L_417272
L_105262:
	cmpq $0x0,%r15
	jna L_417271
L_105264:
	movq 0x0(%r14),%r15
L_105261:
	movq %r15,0x10(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x18(%rbp)
	jmp loop_3827
.p2align 0x4
L_417271:
L_105164:
	movq $0x6,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417272:
L_105260:
	movq $0x1D8B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq %r14,0x0(%r15)
	movq 0x10(%rbp),%r14
	movq %r14,0x8(%r15)
	jmp L_105261
.p2align 0x4
.long 0x1575
L_105189:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x0(%rbp),%r15
	movq 0x8(%r15),%r14
L_105190:
	movq %r14,%r15
	andq $0x3,%r15
	jnz L_105122
L_105191:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0xEB2,%r15
	jne L_417285
L_105192:
	movq 0x0(%r14),%r15
	movq %r15,0x10(%rbp)
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movl %r13d,0x18(%rbp)
	movslq %r13d,%r11
	cmpq %r14,%r11
	jne L_105126
L_105194:
	cmpl $0x0,%r13d
	jl L_417283
L_105195:
	movq $0x1,0x48(%rbp)
	movl $0x0,0x1C(%rbp)
.p2align 0x4,,0x7
loop_1137:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_417282
.p2align 0x4,,0x7
L_105196:
	movl 0x1C(%rbp),%r15d
	cmpl 0x18(%rbp),%r15d
	jnl L_417276
L_105229:
	movslq %r15d,%r14
	movq 0x10(%rbp),%r13
	movq 0x0(%r13,%r14,8),%r11
	movq 0x8(%rbp),%r13
	cmpq 0xFFFFFFFFFFFFFFF0(%r13),%r14
	jnb L_105164
L_105231:
	movq 0x0(%r13,%r14,8),%r10
	movq $0x1D71,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movl %r15d,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq 0x40(%rbp),%r13
	movq %r13,0x8(%r14)
	movq $0x937,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r10,0x0(%r13)
	movq %r11,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x20,%r12
	movq $0x1DB9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r13,0x0(%r14)
	addq $0x18,%r12
	movq 0x48(%rbp),%r13
	movq %r13,0x8(%r14)
	movq %r14,0x48(%rbp)
	incl %r15d
	movl %r15d,0x1C(%rbp)
	jmp loop_1137
.p2align 0x4
L_417276:
L_105197:
	movq 0x8(%rbp),%r14
	movq 0x48(%rbp),%r13
	movq %r13,0x40(%rbp)
	movq %r14,%r15
L_105198:
	movq 0x20(%rbp),%r14
	movq 0x20(%r14),%r13
	movq %r13,0x48(%rbp)
	movq 0x18(%r14),%r13
	movq 0x10(%r14),%r11
	movq 0x8(%r14),%r10
	movq 0x0(%r14),%r9
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r8d
	movslq %r8d,%rsp
	cmpq %rsp,%r14
	jne L_105126
L_105200:
	movq 0xFFFFFFFFFFFFFFF0(%r9),%r14
	movl %r14d,%esp
	movslq %esp,%rsi
	cmpq %r14,%rsi
	jne L_105126
L_105202:
	cmpl %esp,%r8d
	jne L_105137
L_105204:
	movq 0xFFFFFFFFFFFFFFF0(%r10),%r14
	movl %r14d,%esp
	movslq %esp,%rsi
	cmpq %rsi,%r14
	jne L_105126
L_105206:
	cmpl %esp,%r8d
	jne L_105137
L_105208:
	movl %r8d,0x60(%rbp)
	movq $0x37C9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r11,0x0(%r14)
	movq %r13,0x8(%r14)
	movq %r10,0x10(%r14)
	movq %r9,0x18(%r14)
	movq %r15,0x20(%r14)
	movq %r14,0x58(%rbp)
	addq $0x30,%r12
	addq $0x58,%rbp
	leaq (L_105209+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
L_417282:
L_105232:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_105233+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105233
.p2align 0x4
.long 0xE40
L_105233:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	jmp L_105196
.p2align 0x4
L_417283:
L_105174:
	movq (globalObjptr+0x520)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417285:
L_105122:
	movq $0x9,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x4B3
L_105241:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x40(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105242
L_105243:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_105244+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105244
.p2align 0x4
.long 0x4B8
L_105244:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_105242:
	movq 0x40(%rbp),%r15
	movq $0x1,0x40(%rbp)
	jmp L_105198
.p2align 0x4
.long 0x4B3
L_105236:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x40(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105237
L_105238:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_105239+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105239
.p2align 0x4
.long 0x4B8
L_105239:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_105237:
	movq 0x40(%rbp),%r15
	movq $0x1,0x40(%rbp)
	jmp L_105198
.p2align 0x4
.long 0x529
L_105120:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x10(%rbp)
	movq 0x0(%rbp),%r15
	movq 0x8(%r15),%r14
L_105121:
	movq %r14,%r15
	andq $0x3,%r15
	jnz L_105122
L_105123:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0xEB2,%r15
	jne L_105122
L_105124:
	movq 0x0(%r14),%r15
	movq %r15,0x18(%rbp)
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movl %r13d,0x48(%rbp)
	movslq %r13d,%r11
	cmpq %r14,%r11
	jne L_105126
L_105127:
	cmpl $0x0,%r13d
	jl L_105174
L_105128:
	movq $0x1,0x50(%rbp)
	movl $0x0,0x4C(%rbp)
.p2align 0x4,,0x7
loop_1136:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_417296
.p2align 0x4,,0x7
L_105129:
	movl 0x4C(%rbp),%r15d
	cmpl 0x48(%rbp),%r15d
	jnl L_417290
L_105168:
	movslq %r15d,%r14
	movq 0x18(%rbp),%r13
	movq 0x0(%r13,%r14,8),%r11
	movq 0x10(%rbp),%r13
	cmpq 0xFFFFFFFFFFFFFFF0(%r13),%r14
	jnb L_105164
L_105170:
	movq 0x0(%r13,%r14,8),%r10
	movq $0x1D71,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movl %r15d,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq 0x40(%rbp),%r13
	movq %r13,0x8(%r14)
	movq $0x937,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r10,0x0(%r13)
	movq %r11,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x20,%r12
	movq $0x1DB9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r13,0x0(%r14)
	addq $0x18,%r12
	movq 0x50(%rbp),%r13
	movq %r13,0x8(%r14)
	movq %r14,0x50(%rbp)
	incl %r15d
	movl %r15d,0x4C(%rbp)
	jmp loop_1136
.p2align 0x4
L_417290:
L_105130:
	movq 0x10(%rbp),%r14
	movq 0x50(%rbp),%r13
	movq %r13,0x10(%rbp)
	movq %r14,%r15
L_105131:
	movq 0x20(%rbp),%r14
	movq 0x20(%r14),%r13
	movq %r13,0x18(%rbp)
	movq 0x18(%r14),%r13
	movq 0x10(%r14),%r11
	movq 0x8(%r14),%r10
	movq 0x0(%r14),%r9
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r8d
	movslq %r8d,%rsp
	cmpq %rsp,%r14
	jne L_105126
L_105133:
	movq 0xFFFFFFFFFFFFFFF0(%r9),%r14
	movl %r14d,%esp
	movslq %esp,%rsi
	cmpq %r14,%rsi
	jne L_105126
L_105135:
	cmpl %r8d,%esp
	jne L_105137
L_105138:
	movq 0xFFFFFFFFFFFFFFF0(%r10),%r14
	movl %r14d,%esp
	movslq %esp,%rsi
	cmpq %r14,%rsi
	jne L_105126
L_105140:
	cmpl %esp,%r8d
	jne L_105137
L_105142:
	movl %r8d,0x58(%rbp)
	movq $0x37C9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r11,0x0(%r14)
	movq %r13,0x8(%r14)
	movq %r10,0x10(%r14)
	movq %r9,0x18(%r14)
	movq %r15,0x20(%r14)
	movq %r14,0x50(%rbp)
	addq $0x30,%r12
	addq $0x50,%rbp
	leaq (L_105143+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
L_417296:
L_105171:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_105172+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105172
.p2align 0x4
.long 0xFA9
L_105172:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	jmp L_105129
.p2align 0x4
.long 0x529
L_105181:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x10(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105182
L_105183:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_105184+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105184
.p2align 0x4
.long 0x100E
L_105184:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_105182:
	movq 0x10(%rbp),%r15
	movq $0x1,0x10(%rbp)
	jmp L_105131
.p2align 0x4
.long 0x529
L_105176:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x10(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105177
L_105178:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_105179+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105179
.p2align 0x4
.long 0x100E
L_105179:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_105177:
	movq 0x10(%rbp),%r15
	movq $0x1,0x10(%rbp)
	jmp L_105131
.p2align 0x4
.long 0xBB1
L_105209:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x50(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105210
L_105227:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_105228+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105228
.p2align 0x4
.long 0x77B
L_105228:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_105210:
	movq 0x50(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	movl %r15d,%r13d
	movslq %r13d,%r11
	cmpq %r11,%r15
	jne L_105126
L_105212:
	cmpl $0x1,%r13d
	jne L_417304
L_105224:
	cmpq $0x0,%r15
	jna L_105164
L_105226:
	movq 0x0(%r14),%r15
L_105214:
	movq %r15,0x60(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x50(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x68(%rbp)
	addq $0x50,%rbp
	leaq (L_105215+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3827
.p2align 0x4
L_417304:
L_105213:
	movq $0x1D8B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq %r14,0x0(%r15)
	movq 0x48(%rbp),%r14
	movq %r14,0x8(%r15)
	jmp L_105214
.p2align 0x4
.long 0x1135
L_105143:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105144
L_105166:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_105167+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105167
.p2align 0x4
.long 0x63C
L_105167:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_105144:
	movq 0x20(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	movl %r15d,%r13d
	movslq %r13d,%r11
	cmpq %r11,%r15
	jne L_105126
L_105146:
	cmpl $0x1,%r13d
	jne L_417308
L_105162:
	cmpq $0x0,%r15
	jna L_105164
L_105165:
	movq 0x0(%r14),%r15
L_105148:
	movq %r15,0x60(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x50(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x68(%rbp)
	addq $0x50,%rbp
	leaq (L_105149+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3827
.p2align 0x4
L_417308:
L_105147:
	movq $0x1D8B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq %r14,0x0(%r15)
	movq 0x18(%rbp),%r14
	movq %r14,0x8(%r15)
	jmp L_105148
.p2align 0x4
.long 0x848
L_105215:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x50(%rbp)
	movq 0x40(%rbp),%r14
	cmpq $0x1,%r14
	je L_417313
L_105216:
	movq 0x0(%r14),%r13
	movq %r13,0x58(%rbp)
	movq %r15,0x60(%rbp)
	movq 0x8(%r14),%r15
	movq %r15,0x50(%rbp)
.p2align 0x4,,0x7
L_105217:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_417312
.p2align 0x4,,0x7
L_105218:
	movq $0x1DB9,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x58(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x60(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x50(%rbp),%r14
	cmpq $0x1,%r14
	je L_417311
L_105219:
	movq %r15,0x60(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x50(%rbp)
	movq %r15,0x58(%rbp)
	jmp L_105217
.p2align 0x4
L_417311:
L_105220:
	movq %r15,0x8(%rbp)
	movq 0x48(%rbp),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417312:
L_105221:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_105222+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105222
.p2align 0x4
.long 0x780
L_105222:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	jmp L_105218
.p2align 0x4
L_417313:
L_105223:
	movq 0x48(%rbp),%r13
	movq %r13,0x0(%rbp)
	movq %r15,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1573
L_105149:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x18(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105150
L_105160:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_105161+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105161
.p2align 0x4
.long 0x1574
L_105161:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_105150:
	movq 0x10(%rbp),%r15
	cmpq $0x1,%r15
	je L_417316
L_105151:
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	movq %r15,0x10(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq %r14,0x20(%rbp)
.p2align 0x4,,0x7
L_105152:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_417315
.p2align 0x4,,0x7
L_105153:
	movq $0x1DB9,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x10(%rbp),%r14
	cmpq $0x1,%r14
	je L_417314
L_105154:
	movq %r15,0x28(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x10(%rbp)
	movq %r15,0x20(%rbp)
	jmp L_105152
.p2align 0x4
L_417314:
L_105156:
	movq $0x937,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x20,%r12
	movq 0x40(%rbp),%r13
	movq %r13,0x0(%r14)
	movq 0x0(%rbp),%r13
	movq %r13,0x8(%r14)
	movq 0x8(%rbp),%r13
	movq %r13,0x10(%r14)
	movq $0x1DB9,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x0(%r13)
	movq %r15,0x8(%r13)
	movq %r13,0x8(%rbp)
	addq $0x18,%r12
	movq 0x18(%rbp),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417315:
L_105157:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_105158+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105158
.p2align 0x4
.long 0x978
L_105158:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	jmp L_105153
.p2align 0x4
L_417316:
L_105159:
	movq 0x20(%rbp),%r14
	xchgq %r14,%r15
	jmp L_105156
.text
.p2align 0x4
.globl tabulate_6
.hidden tabulate_6
tabulate_6:
L_105269:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_105270
L_105333:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_105334+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105334
.p2align 0x4
.long 0x458
L_105334:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
L_105270:
	movslq 0x8(%rbp),%rdx
	movq %rdx,0x10(%rbp)
	testq %rdx,%rdx
	jz L_417342
L_105271:
	cmpq $0x7FFFFFFF,%rdx
	ja L_417341
L_105272:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x1487,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_105273+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105273
.p2align 0x4
.long 0x453
L_105273:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq %rax,0x8(%rbp)
L_105274:
	movq $0x0,0x18(%rbp)
.p2align 0x4,,0x7
loop_1138:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_417340
.p2align 0x4,,0x7
L_105275:
	movq 0x18(%rbp),%r15
	cmpq 0x10(%rbp),%r15
	jnl L_417339
L_105277:
	movl %r15d,%r14d
	movq 0x0(%rbp),%r15
	cmpq $0x1,%r15
	je L_417338
L_105278:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%rax
	shrq $0x1,%rax
	subq $0x1BE2,%rax
	cmpq $0x8,%rax
	ja L_417318
	jmp *jumpTable_200(,%rax,8)
.data
.p2align 0x4
jumpTable_200:
.quad L_417337,L_417336,L_417335,L_417332,L_417331,L_417326,L_417325,L_417321,L_417320
.text
.p2align 0x4
L_417318:
L_105279:
	movq 0x0(%rbp),%r14
	movq 0x0(%r14),%r15
	movq 0x0(%r15),%r14
	cmpq $0x1,%r14
	je L_417319
L_105280:
	movq 0x8(%r14),%r13
	movq 0x0(%r14),%r11
	movq %r15,%r14
	shrq $0x8,%r14
	movq (gcState+0x3C8)(%rip),%r10
	movb $0x1,0x0(%r10,%r14,1)
	movq %r13,0x0(%r15)
	movq 0x0(%r11),%r15
	movq 0x8(%r11),%r14
	movq $0x9C3,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x0(%r13)
	movq %r15,0x8(%r13)
	addq $0x18,%r12
	movq $0x1D89,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r13,0x0(%r15)
	addq $0x10,%r12
.p2align 0x4,,0x7
L_105281:
	movq 0x8(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq 0x18(%rbp),%r13
	movq %r15,0x0(%r14,%r13,8)
	incq %r13
	movq %r13,0x18(%rbp)
	jmp loop_1138
.p2align 0x4
L_417319:
L_105282:
	movq (globalObjptr+0x4B0)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417320:
L_105322:
	movslq %r14d,%r15
	movq 0x0(%rbp),%r14
	movq 0x8(%r14),%r13
	movq 0x0(%r13,%r15,8),%r11
	movq 0x0(%r11),%r10
	movq %r10,0x30(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r15),%r13
	movq %r13,0x20(%rbp)
	movq 0x0(%r15),%r13
	movq %r13,0x38(%rbp)
	addq $0x30,%rbp
	leaq (L_105323+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1362
.p2align 0x4
L_417321:
L_105317:
	movq 0x0(%rbp),%r15
	movq 0x10(%r15),%r13
	movq 0x8(%r15),%r11
	movq 0x0(%r15),%r10
	cmpl $0x0,%r14d
	je L_417324
	cmpl $0x1,%r14d
	je L_417323
	cmpl $0x2,%r14d
	je L_417322
L_105318:
	movq (globalObjptr+0x4D0)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417322:
L_105321:
	movq %r11,%r15
	jmp L_105281
.p2align 0x4
L_417323:
L_105320:
	movq %r10,%r15
	jmp L_105281
.p2align 0x4
L_417324:
	movq %r13,%r15
	jmp L_105281
.p2align 0x4
L_417325:
L_105311:
	movslq %r14d,%r15
	movq 0x0(%rbp),%r14
	movq 0x8(%r14),%r13
	movq 0x0(%r13,%r15,8),%r11
	movq %r11,0x30(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r15),%r13
	movq %r13,0x20(%rbp)
	movq 0x0(%r15),%r13
	movq %r13,0x38(%rbp)
	addq $0x30,%rbp
	leaq (L_105312+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1362
.p2align 0x4
L_417326:
L_105305:
	movq 0x0(%rbp),%r15
	movq 0x18(%r15),%r13
	movq 0x10(%r15),%r11
	movq 0x8(%r15),%r10
	movq 0x0(%r15),%r9
	cmpl $0x0,%r14d
	je L_417330
	cmpl $0x1,%r14d
	je L_417329
	cmpl $0x2,%r14d
	je L_417328
	cmpl $0x3,%r14d
	je L_417327
L_105306:
	movq (globalObjptr+0x508)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417327:
L_105310:
	movq %r10,%r15
	jmp L_105281
.p2align 0x4
L_417328:
L_105309:
	movq %r11,%r15
	jmp L_105281
.p2align 0x4
L_417329:
L_105308:
	movq %r9,%r15
	jmp L_105281
.p2align 0x4
L_417330:
	movq %r13,%r15
	jmp L_105281
.p2align 0x4
L_417331:
L_105304:
	movq 0x0(%rbp),%r14
	movq 0x0(%r14),%r15
	jmp L_105281
.p2align 0x4
L_417332:
L_105300:
	movq 0x0(%rbp),%r15
	movq 0x8(%r15),%r13
	movq 0x0(%r15),%r11
	cmpl $0x0,%r14d
	je L_417334
	cmpl $0x1,%r14d
	je L_417333
L_105301:
	movq (globalObjptr+0x4A8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417333:
L_105303:
	movq %r11,%r15
	jmp L_105281
.p2align 0x4
L_417334:
	movq %r13,%r15
	jmp L_105281
.p2align 0x4
L_417335:
L_105294:
	movq 0x0(%rbp),%r15
	movq 0x8(%r15),%r13
	movq %r13,0x50(%rbp)
	movq 0x0(%r15),%r13
	movq %r13,0x20(%rbp)
	movslq %r14d,%r13
	movq 0x20(%r15),%r14
	movq 0x0(%r14,%r13,8),%r11
	movq %r11,0x28(%rbp)
	movq 0x18(%r15),%r14
	movq 0x0(%r14,%r13,8),%r11
	movq %r11,0x30(%rbp)
	movq 0x10(%r15),%r14
	movq 0x0(%r14,%r13,8),%r10
	movq %r10,0x38(%rbp)
	movq %r11,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_105295+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp valueType_1
.p2align 0x4
L_417336:
L_105288:
	movslq %r14d,%r15
	movq 0x0(%rbp),%r14
	movq 0x8(%r14),%r13
	movq 0x0(%r13,%r15,8),%r11
	movq 0x0(%r11),%r10
	movq %r10,0x30(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r15),%r13
	movq %r13,0x20(%rbp)
	movq 0x0(%r15),%r13
	movq %r13,0x38(%rbp)
	addq $0x30,%rbp
	leaq (L_105289+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1362
.p2align 0x4
L_417337:
L_105283:
	movq 0x0(%rbp),%r15
	movq 0x0(%r15),%r13
	movq %r13,0x38(%rbp)
	movslq %r14d,%r13
	movq %r13,%r14
	imulq $0x30,%r14
	movq 0x8(%r15),%r11
	movq 0x0(%r11,%r14,1),%r10
	movq %r10,0x30(%rbp)
	imulq $0x30,%r13
	movq 0x10(%r11,%r13,1),%r14
	movq 0x0(%r14),%r10
	movq %r10,0x20(%rbp)
	addq $0x30,%rbp
	leaq (L_105284+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp valueType_1
.p2align 0x4
L_417338:
L_105328:
	movq (globalObjptr+0x4A0)(%rip),%r14
	movq %r14,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417339:
L_105276:
	movq 0x8(%rbp),%r14
	movq $0x313,0xFFFFFFFFFFFFFFF8(%r14)
	movq %r14,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417340:
L_105329:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_105330+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105330
.p2align 0x4
.long 0x45D
L_105330:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	jmp L_105275
.p2align 0x4
L_417341:
L_105331:
	movq $0x5,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_417342:
L_105332:
	movq (globalObjptr+0xCA8)(%rip),%r15
	movq %r15,0x8(%rbp)
	jmp L_105274
.p2align 0x4
.long 0x457
L_105323:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq 0x30(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x10(%r15),%r14
	movq 0x0(%r14),%r13
	movq %r13,0x30(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x40(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x40,%rbp
	leaq (L_105324+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp valueType_1
.p2align 0x4
.long 0x457
L_105312:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq 0x30(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x10(%r15),%r14
	movq 0x0(%r14),%r13
	movq %r13,0x30(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x40(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x40,%rbp
	leaq (L_105313+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp valueType_1
.p2align 0x4
.long 0x560
L_105295:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x40(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105296
L_105298:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_105299+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105299
.p2align 0x4
.long 0xE4E
L_105299:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_105296:
	movq $0x9C3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x40(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x1D89,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x10,%r12
	movq 0x38(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq %r14,0x38(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x40(%rbp)
	addq $0x28,%rbp
	leaq (L_105297+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp coerce_4
.p2align 0x4
.long 0x457
L_105289:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq 0x30(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x10(%r15),%r14
	movq 0x0(%r14),%r13
	movq %r13,0x30(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x40(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x40,%rbp
	leaq (L_105290+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp valueType_1
.p2align 0x4
.long 0x457
L_105284:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq 0x30(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105285
L_105286:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_105287+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105287
.p2align 0x4
.long 0x57A
L_105287:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_105285:
	movq $0x9C3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x1D89,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x10,%r12
	movq %r14,%r15
	jmp L_105281
.p2align 0x4
.long 0x569
L_105324:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105325
L_105326:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_105327+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105327
.p2align 0x4
.long 0x592
L_105327:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_105325:
	movq $0x9C3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x1D89,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x10,%r12
	movq %r14,%r15
	jmp L_105281
.p2align 0x4
.long 0x569
L_105313:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105314
L_105315:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_105316+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105316
.p2align 0x4
.long 0x592
L_105316:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_105314:
	movq $0x9C3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x1D89,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x10,%r12
	movq %r14,%r15
	jmp L_105281
.p2align 0x4
.long 0x5F9
L_105297:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%rbp)
	jmp L_105281
.p2align 0x4
.long 0x569
L_105290:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_105291
L_105292:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_105293+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_105293
.p2align 0x4
.long 0x592
L_105293:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_105291:
	movq $0x9C3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x1D89,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x10,%r12
	movq %r14,%r15
	jmp L_105281
