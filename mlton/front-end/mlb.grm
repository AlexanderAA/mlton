(* Copyright (C) 1999-2004 Henry Cejtin, Matthew Fluet, Suresh
 *    Jagannathan, and Stephen Weeks.
 * Copyright (C) 1997-1999 NEC Research Institute.
 *
 * MLton is released under the GNU General Public License (GPL).
 * Please see the file MLton-LICENSE for license information.
 *)

type int = Int.t

fun reg (left, right) = Region.make {left = left, right = right}
fun error (reg, msg) = Control.error (reg, Layout.str msg, Layout.empty)

open Ast

type fctbinds = {lhs: Fctid.t, rhs: Fctid.t} list
type sigbinds = {lhs: Sigid.t, rhs: Sigid.t} list
type strbinds = {lhs: Strid.t, rhs: Strid.t} list

type basbinds = {name: Basid.t, def: Basexp.t} list

  %%
%term
      ID of string | COMMA | SEMICOLON | EOF
    | AND | BAS | BASIS | END | EQUALOP | FUNCTOR | IN | LET 
    | LOCAL | OPEN | SIGNATURE | STRUCTURE
    | ANN | PRIM | FILE of string

%nonterm
	 ann of string list
       | anns of (string list * Region.t) list
       | anns' of (string list * Region.t) list
       | basbinds of basbinds
       | basbinds' of Basexp.t * basbinds
       | basbinds'' of basbinds
       | basdec of Basdec.t
       | basdecnode of Basdec.node
       | basdecs of Basdec.t
       | basdecsnode of Basdec.node 
       | basexp of Basexp.t
       | basexpnode of Basexp.node
       | basid of Basid.t
       | basids of Basid.t list
       | fctbinds of fctbinds
       | fctbinds' of Fctid.t * fctbinds
       | fctbinds'' of fctbinds
       | fctid of Fctid.t
       | id of Symbol.t * Region.t
       | mlb of Basdec.t
       | sigbinds of sigbinds
       | sigbinds' of Sigid.t * sigbinds
       | sigbinds'' of sigbinds
       | sigid of Sigid.t
       | strbinds of strbinds
       | strbinds' of Strid.t * strbinds
       | strbinds'' of strbinds
       | strid of Strid.t

%verbose
%pos SourcePos.t
%eop EOF
%noshift EOF

%header (functor MLBLrValsFun (structure Token: TOKEN
                               structure Ast: AST
                               val lexAndParseProgOrMLB: File.t * Region.t ->
                                                         Ast.Basdec.node))

%right AND

%name MLB

%keyword AND BAS BASIS END FUNCTOR IN LET LOCAL OPEN SIGNATURE STRUCTURE ANN PRIM

%change -> SEMICOLON | -> IN ID END

%value ID ("bogus")

%%

mlb : basdecs (basdecs)


basdecs : basdecsnode (Basdec.makeRegion' 
                       (basdecsnode, basdecsnodeleft, basdecsnoderight))

basdecsnode :                    (Basdec.Seq [])
            | SEMICOLON basdecs  (Basdec.Seq [basdecs])
            | basdec basdecs     (Basdec.Seq [basdec, basdecs])

basdec : basdecnode (Basdec.makeRegion'
                     (basdecnode, basdecnodeleft, basdecnoderight))

basdecnode
   : FUNCTOR fctbinds
     (let 
         val fctbinds = Vector.fromList fctbinds
      in 
         Basdec.Defs (ModIdBind.makeRegion' (ModIdBind.Fct fctbinds, FUNCTORleft, fctbindsright))
      end)
   | SIGNATURE sigbinds
     (let
         val sigbinds = Vector.fromList sigbinds
      in
         Basdec.Defs (ModIdBind.makeRegion' (ModIdBind.Sig sigbinds, SIGNATUREleft, sigbindsright))
      end)
   | STRUCTURE strbinds
     (let
         val strbinds = Vector.fromList strbinds
      in
         Basdec.Defs (ModIdBind.makeRegion' (ModIdBind.Str strbinds, STRUCTUREleft, strbindsright))
      end)
   | BASIS basbinds
     (let
         val basbinds = Vector.fromList basbinds
      in
         Basdec.Basis basbinds
      end)
   | LOCAL basdecs IN basdecs END  (Basdec.Local (basdecs1, basdecs2))
   | OPEN basids  (Basdec.Open (Vector.fromList basids))
   | FILE
     (let val reg = reg (FILEleft, FILEright)
      in lexAndParseProgOrMLB (FILE, reg)
      end)
   | PRIM (Basdec.Prim)
   | ANN anns IN basdecs END  (Basdec.Ann (anns, basdecs))

fctbinds : fctid EQUALOP fctbinds'
           (let val (def, fctbinds) = fctbinds'
            in {lhs = fctid, rhs = def}
               :: fctbinds
            end)
         | fctid fctbinds''
           ({lhs = fctid, rhs = fctid} :: fctbinds'')

fctbinds' : fctid fctbinds''  (fctid, fctbinds'')

fctbinds'' :               ([])
           | AND fctbinds  (fctbinds)

sigbinds : sigid EQUALOP sigbinds'
           (let val (def, sigbinds) = sigbinds'
            in {lhs = sigid, rhs = def}
               :: sigbinds
            end)
         | sigid sigbinds''
           ({lhs = sigid, rhs = sigid} :: sigbinds'')

sigbinds' : sigid sigbinds''  (sigid, sigbinds'')

sigbinds'' :               ([])
           | AND sigbinds  (sigbinds)

strbinds : strid EQUALOP strbinds'
           (let val (def, strbinds) = strbinds'
            in {lhs = strid, rhs = def}
               :: strbinds
            end)
         | strid strbinds''
           ({lhs = strid, rhs = strid} :: strbinds'')

strbinds' : strid strbinds''  (strid, strbinds'')

strbinds'' :               ([])
           | AND strbinds  (strbinds)

basbinds : basid EQUALOP basbinds'
           (let val (def, basbinds) = basbinds'
            in {name = basid, def = def}
               :: basbinds
            end)

basbinds' : basexp basbinds''  (basexp, basbinds'')

basbinds'' :               ([])
           | AND basbinds  (basbinds)


basexp : basexpnode (Basexp.makeRegion'
                     (basexpnode, basexpnodeleft, basexpnoderight))

basexpnode : BAS basdecs END           (Basexp.Bas basdecs)
           | basid                     (Basexp.Var basid)
           | LET basdec IN basexp END  (Basexp.Let (basdec, basexp))

basid : id  (Basid.fromSymbol id)
basids : basid ([basid])
       | basid basids (basid :: basids)
fctid : id  (Fctid.fromSymbol id)
sigid : id  (Sigid.fromSymbol id)
strid : id  (Strid.fromSymbol id)
id : ID     (Symbol.fromString ID, reg (IDleft, IDright))

anns : ann anns'  ((ann, reg (annleft, annright))::anns')

anns' :             ([])
      | COMMA anns  (anns)

ann :         ([]) 
    | ID ann  (ID::ann)