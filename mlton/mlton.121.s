/* MLton g9a43e11 (built Sun Apr  5 22:29:53 NZST 2015 on xeon) */
/*   created this file on Sun Apr 05 23:19:52 2015. */
/* Do not edit this file. */
/* Flag settings:  */
/*    align: 8 */
/*    atMLtons: (mlton, @MLton, --) */
/*    chunk: chunk per function */
/*    closureConvertGlobalize: true */
/*    closureConvertShrink: true */
/*    codegen: amd64 */
/*    contifyIntoMain: false */
/*    debug: false */
/*    defaultChar: char8 */
/*    defaultWideChar: widechar32 */
/*    defaultInt: int32 */
/*    defaultReal: real64 */
/*    defaultWord: word32 */
/*    diag passes: [] */
/*    drop passes: [] */
/*    elaborate allowConstant (default): false */
/*    elaborate allowConstant (enabled): true */
/*    elaborate allowFFI (default): false */
/*    elaborate allowFFI (enabled): true */
/*    elaborate allowPrim (default): false */
/*    elaborate allowPrim (enabled): true */
/*    elaborate allowOverload (default): false */
/*    elaborate allowOverload (enabled): true */
/*    elaborate allowRebindEquals (default): false */
/*    elaborate allowRebindEquals (enabled): true */
/*    elaborate deadCode (default): false */
/*    elaborate deadCode (enabled): true */
/*    elaborate forceUsed (default): false */
/*    elaborate forceUsed (enabled): true */
/*    elaborate ffiStr (default):  */
/*    elaborate ffiStr (enabled): true */
/*    elaborate nonexhaustiveExnMatch (default): default */
/*    elaborate nonexhaustiveExnMatch (enabled): true */
/*    elaborate nonexhaustiveMatch (default): warn */
/*    elaborate nonexhaustiveMatch (enabled): true */
/*    elaborate redundantMatch (default): warn */
/*    elaborate redundantMatch (enabled): true */
/*    elaborate resolveScope (default): strdec */
/*    elaborate resolveScope (enabled): true */
/*    elaborate sequenceNonUnit (default): ignore */
/*    elaborate sequenceNonUnit (enabled): true */
/*    elaborate warnUnused (default): false */
/*    elaborate warnUnused (enabled): true */
/*    elaborate only: false */
/*    emit main: true */
/*    export header: None */
/*    exn history: false */
/*    generated output format: executable */
/*    gc check: Limit */
/*    indentation: 3 */
/*    inlineIntoMain: true */
/*    inlineLeafA: {loops = true, repeat = true, size = Some 20} */
/*    inlineLeafB: {loops = true, repeat = true, size = Some 40} */
/*    inlineNonRec: {small = 60, product = 320} */
/*    input file: mlton */
/*    keep CoreML: false */
/*    keep def use: true */
/*    keep dot: false */
/*    keep Machine: false */
/*    keep passes: [] */
/*    keep RSSA: false */
/*    keep SSA: false */
/*    keep SSA2: false */
/*    keep SXML: false */
/*    keep XML: false */
/*    extra_: false */
/*    lib dir: /home/a/Projects/mlton/build/lib */
/*    lib target dir: /home/a/Projects/mlton/build/lib/targets/unknown */
/*    loop passes: 1 */
/*    mark cards: true */
/*    max function size: 10000 */
/*    mlb path vars: [{var = MLTON_ROOT, path = $(LIB_MLTON_DIR)/sml}, {var = SML_LIB, path = $(LIB_MLTON_DIR)/sml}] */
/*    native commented: 0 */
/*    native live stack: false */
/*    native optimize: 1 */
/*    native move hoist: true */
/*    native copy prop: true */
/*    native copy prop cutoff: 1000 */
/*    native cutoff: 100 */
/*    native live transfer: 8 */
/*    native shuffle: true */
/*    native ieee fp: false */
/*    native split: Some 20000 */
/*    optimizationPasses: [<ssa2::default>, <ssa::default>, <sxml::default>, <xml::default>] */
/*    polyvariance: Some {hofo = true, rounds = 2, small = 30, product = 300} */
/*    prefer abs paths: false */
/*    prof passes: [] */
/*    profile: None */
/*    profile branch: false */
/*    profile C: [] */
/*    profile IL: ProfileSource */
/*    profile include/exclude: [(Seq [Star [.], Or [Seq [Seq [[$], [(], [S], [M], [L], [_], [L], [I], [B], [)]]]], Star [.]], false)] */
/*    profile raise: false */
/*    profile stack: false */
/*    profile val: false */
/*    show basis: None */
/*    show def-use: None */
/*    show types: true */
/*    target: unknown */
/*    target arch: AMD64 */
/*    target OS: OpenBSD */
/*    type check: false */
/*    verbosity: Silent */
/*    warn unrecognized annotation: true */
/*    warn deprecated features: true */
/*    zone cut depth: 100 */
.text
.p2align 0x4
.globl loop_4794
.hidden loop_4794
loop_4794:
L_372898:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb loop_3750
L_372927:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_372928+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_372928
.p2align 0x4
.long 0x460
L_372928:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
.p2align 0x4,,0x7
loop_3750:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_530818
.p2align 0x4,,0x7
L_372900:
	movq 0x0(%rbp),%r15
	movl 0x0(%r15),%r14d
	movq 0x8(%r15),%r13
	movq 0x8(%rbp),%r15
	cmpq $0x1,%r15
	je L_530816
	cmpq $0x2,%r15
	je L_530814
L_372901:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r11
	shrq $0x1,%r11
	cmpq $0xDC1,%r11
	je L_530813
	cmpq $0xDC2,%r11
	je L_530811
	cmpq $0xDC3,%r11
	je L_530809
	cmpq $0xDC4,%r11
	je L_530807
L_372902:
	movq 0x0(%r15),%r15
	movq %r15,0x8(%rbp)
	jmp loop_3750
.p2align 0x4
L_530807:
L_372918:
	incl %r14d
	jo L_530808
L_372920:
	movq $0x14E9,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movl %r14d,0x0(%r11)
	movq %r13,0x8(%r11)
	addq $0x18,%r12
	movl $0x0,0x4(%r11)
	movq %r11,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530808:
L_372919:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530809:
L_372911:
	movq 0x0(%r15),%r13
	cmpq $0x1,%r13
	je L_530810
L_372912:
	movq 0x8(%r13),%r15
	movq 0x0(%r13),%r13
	movq 0x0(%rbp),%r14
	movq %r15,0x0(%rbp)
	movq %r13,%r15
L_372913:
	movq %r14,0x10(%rbp)
	movq %r15,0x18(%rbp)
	addq $0x10,%rbp
	leaq (L_372914+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_4794
.p2align 0x4
L_530810:
L_372917:
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530811:
L_372904:
	movq 0x0(%r15),%r13
	cmpq $0x1,%r13
	je L_530812
L_372905:
	movq 0x8(%r13),%r15
	movq 0x0(%r13),%r13
	movq 0x0(%rbp),%r14
	movq %r15,0x0(%rbp)
	movq %r13,%r15
L_372906:
	movq %r14,0x10(%rbp)
	movq %r15,0x18(%rbp)
	addq $0x10,%rbp
	leaq (L_372907+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_4794
.p2align 0x4
L_530812:
L_372910:
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530813:
L_372903:
	movq 0x8(%r15),%r11
	movq 0x0(%r15),%r15
	movq %r15,0x8(%rbp)
	movq $0x28CF,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r11,0x0(%r15)
	movq %r13,0x8(%r15)
	addq $0x18,%r12
	movq $0x14E9,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movl %r14d,0x0(%r13)
	movq %r15,0x8(%r13)
	addq $0x18,%r12
	movl $0x0,0x4(%r13)
	movq %r13,0x0(%rbp)
	jmp loop_3750
.p2align 0x4
L_530814:
L_372923:
	incl %r14d
	jo L_372919
L_372924:
	movq $0x14E9,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movl %r14d,0x0(%r11)
	movq %r13,0x8(%r11)
	addq $0x18,%r12
	movl $0x0,0x4(%r11)
	movq %r11,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530816:
L_372921:
	incl %r14d
	jo L_372919
L_372922:
	movq $0x14E9,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movl %r14d,0x0(%r11)
	movq %r13,0x8(%r11)
	addq $0x18,%r12
	movl $0x0,0x4(%r11)
	movq %r11,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530818:
L_372925:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_372926+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_372926
.p2align 0x4
.long 0x460
L_372926:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	jmp L_372900
.p2align 0x4
.long 0x4B0
L_372914:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
	movq 0x10(%rbp),%r14
	movq %r14,0x8(%rbp)
	movq 0x0(%rbp),%r13
	cmpq $0x1,%r13
	je L_530819
L_372915:
	movq 0x0(%r13),%r15
	movq 0x8(%r13),%r13
	movq %r13,0x0(%rbp)
	jmp L_372913
.p2align 0x4
L_530819:
L_372916:
	movq %r14,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x4B0
L_372907:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
	movq 0x10(%rbp),%r14
	movq %r14,0x8(%rbp)
	movq 0x0(%rbp),%r13
	cmpq $0x1,%r13
	je L_530820
L_372908:
	movq 0x0(%r13),%r15
	movq 0x8(%r13),%r13
	movq %r13,0x0(%rbp)
	jmp L_372906
.p2align 0x4
L_530820:
L_372909:
	movq %r14,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl loop_4795
.hidden loop_4795
loop_4795:
L_372929:
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_373225
L_372930:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_530835
L_372931:
	movq 0x0(%rbp),%r15
	cmpq $0x1,%r15
	je L_530834
	cmpq $0x2,%r15
	je L_530828
L_372932:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xDC1,%r14
	je L_530827
	cmpq $0xDC2,%r14
	je L_530825
	cmpq $0xDC3,%r14
	je L_530823
	cmpq $0xDC4,%r14
	je L_530821
L_372933:
	movq 0x18(%rbp),%r14
	movq %r14,0x48(%rbp)
	movq 0x20(%rbp),%r14
	movq %r14,0x50(%rbp)
	movq 0x28(%rbp),%r14
	movq %r14,0x58(%rbp)
	movq 0x30(%rbp),%r14
	movq %r14,0x60(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x30(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x70(%rbp)
	movl 0x10(%rbp),%r15d
	movl %r15d,0x40(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x38(%rbp)
	addq $0x30,%rbp
	leaq (L_372934+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_4795
.p2align 0x4
L_530821:
L_373196:
	movq 0x0(%r15),%r14
	movq 0x30(%rbp),%r15
	movl 0x0(%r15),%r13d
	incl %r13d
	movl %r13d,0x8(%rbp)
	jo L_530822
L_373198:
	movl %r13d,0x0(%r15)
	movq $0x3D0D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x10(%r15)
	addq $0x20,%r12
	movl %r13d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x20(%rbp)
	movl $0x100,0x28(%rbp)
	movl $0x0,0x2C(%rbp)
	addq $0x20,%rbp
	leaq (L_373199+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp fold_0
.p2align 0x4
L_530822:
L_373197:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530823:
L_373153:
	movq 0x0(%r15),%r14
	cmpq $0x1,%r14
	je L_530824
L_373154:
	movq 0x8(%r14),%r13
	movq %r13,0x48(%rbp)
	movq 0x0(%r14),%r14
	movq $0x1,0x50(%rbp)
	movq 0x18(%rbp),%r13
	movq %r13,0x58(%rbp)
	movq %r13,0x60(%rbp)
	movq %r14,%r15
L_373155:
	movq %r15,0x70(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x78(%rbp)
	movl 0x10(%rbp),%r15d
	movl %r15d,0x80(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x88(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x90(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x98(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0xA0(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0xA8(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0xB0(%rbp)
	addq $0x70,%rbp
	leaq (L_373156+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_4795
.p2align 0x4
L_530824:
L_373195:
	movq $0x1,0x0(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq %r15,0x10(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530825:
L_373022:
	movq 0x0(%r15),%r14
	movq (globalObjptr+0xF30)(%rip),%r13
	movq $0xF71,0xFFFFFFFFFFFFFFF8(%r13)
	cmpq $0x1,%r14
	je L_530826
L_373023:
	movq 0x8(%r14),%r11
	movq %r11,0x48(%rbp)
	movq 0x0(%r14),%r14
	movq %r13,0x50(%rbp)
	movq 0x18(%rbp),%r13
	movq %r13,0x58(%rbp)
	movq %r13,0x60(%rbp)
	movq %r14,%r15
L_373024:
	movq %r15,0x70(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x78(%rbp)
	movl 0x10(%rbp),%r15d
	movl %r15d,0x80(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x88(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x90(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x98(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0xA0(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0xA8(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0xB0(%rbp)
	addq $0x70,%rbp
	leaq (L_373025+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_4795
.p2align 0x4
L_530826:
L_373152:
	movq %r13,0x0(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq %r15,0x10(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530827:
L_372964:
	movq 0x8(%r15),%r14
	movq %r14,0x48(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x58(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x60(%rbp)
	movl 0x10(%rbp),%r15d
	movl %r15d,0x68(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x70(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x78(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x80(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x88(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x90(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x98(%rbp)
	addq $0x58,%rbp
	leaq (L_372965+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_4795
.p2align 0x4
L_530828:
L_373224:
	movq 0x38(%rbp),%r14
	xchgq %r14,%r15
anchor_0:
	movq 0x40(%rbp),%r14
	movq 0x8(%r14),%r13
	movl 0x0(%r14),%r11d
	movl 0x0(%r13),%r14d
	incl %r14d
	movl %r14d,0x48(%rbp)
	jo L_373197
L_373212:
	movl %r14d,0x0(%r13)
	movq 0x0(%r15),%r13
	movq $0x1B59,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r13,0x8(%r10)
	addq $0x18,%r12
	movl %r14d,0x0(%r10)
	movl $0x0,0x4(%r10)
	movq %r15,%r14
	shrq $0x8,%r14
	movq (gcState+0x3C8)(%rip),%r13
	movb $0x1,0x0(%r13,%r14,1)
	movq %r10,0x0(%r15)
	movslq %r11d,%rdx
	movq %rdx,0x50(%rbp)
	testq %rdx,%rdx
	jz L_530832
L_373213:
	cmpq $0x7FFFFFFF,%rdx
	ja L_530831
L_373214:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0xAAB,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_373215+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373215
.p2align 0x4
.long 0x559D
L_373215:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movq %rax,%r15
L_373216:
	xorq %r14,%r14
.p2align 0x4,,0x7
loop_3768:
	cmpq 0x50(%rbp),%r14
	jnl L_530830
L_373218:
	movl %r14d,%r11d
	cmpl %r11d,0x48(%rbp)
	je L_530829
L_373219:
	movq $0x1,%r13
L_373220:
	movq %r15,%r11
	shrq $0x8,%r11
	movq (gcState+0x3C8)(%rip),%r10
	movb $0x1,0x0(%r10,%r11,1)
	movq %r13,0x0(%r15,%r14,8)
	incq %r14
	jmp loop_3768
.p2align 0x4
L_530829:
L_373221:
	movq (globalObjptr+0xF30)(%rip),%r13
	movq $0xF71,0xFFFFFFFFFFFFFFF8(%r13)
	jmp L_373220
.p2align 0x4
L_530830:
L_373217:
	movq $0x191D,0xFFFFFFFFFFFFFFF8(%r15)
	movq %r15,0x8(%rbp)
	movq %r15,0x10(%rbp)
	movq $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530831:
L_373006:
	movq $0x5,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530832:
L_373223:
	movq (globalObjptr+0x1458)(%rip),%r15
	jmp L_373216
.p2align 0x4
L_530834:
L_373211:
	movq 0x8(%rbp),%r14
	xchgq %r14,%r15
	jmp anchor_0
.p2align 0x4
L_530835:
L_373225:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_373226+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373226
.p2align 0x4
.long 0x531
L_373226:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	jmp L_372931
.p2align 0x4
.long 0x45A
L_372934:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq 0x30(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x40(%rbp),%r14
	movq %r14,0x38(%rbp)
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movl %r13d,0x40(%rbp)
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_372936
L_372937:
	cmpl $0x0,%r13d
	jl L_372961
L_372938:
	movl $0x0,0x28(%rbp)
.p2align 0x4,,0x7
loop_3751:
	movl 0x28(%rbp),%r15d
	cmpl 0x40(%rbp),%r15d
	jnl L_530843
L_372940:
	movslq %r15d,%r14
	movq %r14,0x48(%rbp)
	movq 0x30(%rbp),%r15
	movq 0x0(%r15,%r14,8),%r13
	movq %r13,0x50(%rbp)
	cmpq $0x1,%r13
	je L_372946
L_372941:
	movq 0x38(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movl %r13d,0x2C(%rbp)
	movslq %r13d,%r11
	cmpq %r14,%r11
	jne L_530841
L_372943:
	cmpl $0x0,%r13d
	jl L_530840
L_372944:
	movl $0x0,0x44(%rbp)
loop_3752:
	movl 0x44(%rbp),%r15d
	cmpl 0x2C(%rbp),%r15d
	jnl L_530839
L_372947:
	movslq %r15d,%r14
	movq %r14,0x58(%rbp)
	movq 0x38(%rbp),%r15
	movq 0x0(%r15,%r14,8),%r13
	movq %r13,0x60(%rbp)
	cmpq $0x1,%r13
	jne L_530837
.p2align 0x4,,0x7
L_372956:
	incl 0x44(%rbp)
	jmp loop_3752
.p2align 0x4
L_530837:
L_372948:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_372949
L_372957:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_372958+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_372958
.p2align 0x4
.long 0x5585
L_372958:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_372949:
	movq $0x28D1,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x60(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x28D1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x50(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x68(%rbp)
	addq $0x68,%rbp
	leaq (L_372950+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_13
.p2align 0x4
L_530839:
L_372946:
	incl 0x28(%rbp)
	jmp loop_3751
.p2align 0x4
L_530840:
L_372961:
	movq (globalObjptr+0x520)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530841:
L_372936:
	movq (globalObjptr+0x518)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530843:
L_372939:
	movq (globalObjptr+0xF30)(%rip),%r14
	movq $0xF71,0xFFFFFFFFFFFFFFF8(%r14)
	movq %r14,0x0(%rbp)
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%rbp)
	movq 0x38(%rbp),%r14
	movq %r14,0x10(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x48B
L_373199:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movslq 0x10(%rbp),%rdx
	movq %rdx,0x18(%rbp)
	testq %rdx,%rdx
	jz L_530849
L_373200:
	cmpq $0x7FFFFFFF,%rdx
	ja L_373006
L_373201:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0xAAB,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_373202+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373202
.p2align 0x4
.long 0x64A
L_373202:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq %rax,%r15
L_373203:
	xorq %r14,%r14
.p2align 0x4,,0x7
loop_3767:
	cmpq 0x18(%rbp),%r14
	jnl L_530847
L_373205:
	movl %r14d,%r11d
	cmpl 0x8(%rbp),%r11d
	je L_530846
L_373206:
	movq $0x1,%r13
L_373207:
	movq %r15,%r11
	shrq $0x8,%r11
	movq (gcState+0x3C8)(%rip),%r10
	movb $0x1,0x0(%r10,%r11,1)
	movq %r13,0x0(%r15,%r14,8)
	incq %r14
	jmp loop_3767
.p2align 0x4
L_530846:
L_373208:
	movq (globalObjptr+0xF30)(%rip),%r13
	movq $0xF71,0xFFFFFFFFFFFFFFF8(%r13)
	jmp L_373207
.p2align 0x4
L_530847:
L_373204:
	movq $0x191D,0xFFFFFFFFFFFFFFF8(%r15)
	movq %r15,0x8(%rbp)
	movq %r15,0x10(%rbp)
	movq $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530849:
L_373210:
	movq (globalObjptr+0x1458)(%rip),%r15
	jmp L_373203
.p2align 0x4
.long 0x5590
L_373156:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq 0x70(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq 0x78(%rbp),%r15
	movq %r15,0x70(%rbp)
	movq 0x80(%rbp),%rdx
	movq %rdx,0x78(%rbp)
	movslq 0x10(%rbp),%rdx
	movq %rdx,0x80(%rbp)
	cmpq $0x0,%rdx
	sete %bl
	movzbl %bl,%ebx
	movl %ebx,0x14(%rbp)
	je L_530866
L_373157:
	cmpq $0x7FFFFFFF,%rdx
	ja L_373006
L_373158:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0xAAB,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_373159+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373159
.p2align 0x4
.long 0x5593
L_373159:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq %rax,0x88(%rbp)
L_373160:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_3765:
	cmpq 0x80(%rbp),%r15
	jnl L_530854
L_373184:
	movl %r15d,%r13d
	movslq %r13d,%r14
	movq 0x60(%rbp),%r13
	cmpq 0xFFFFFFFFFFFFFFF0(%r13),%r14
	jnb L_372952
L_373186:
	movq 0x0(%r13,%r14,8),%r11
	movq 0x78(%rbp),%r13
	cmpq 0xFFFFFFFFFFFFFFF0(%r13),%r14
	jnb L_530852
L_373188:
	movq 0x0(%r13,%r14,8),%r10
	cmpq $0x1,%r11
	je L_530851
L_373189:
	cmpq $0x1,%r10
	jne L_530850
	movq %r11,%r14
L_373191:
	movq 0x88(%rbp),%r13
	movq %r13,%r11
	shrq $0x8,%r11
	movq (gcState+0x3C8)(%rip),%r10
	movb $0x1,0x0(%r10,%r11,1)
	movq %r14,0x0(%r13,%r15,8)
	incq %r15
	jmp loop_3765
.p2align 0x4
L_530850:
L_373081:
	movq (globalObjptr+0x1450)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530851:
L_373192:
	movq %r10,%r14
	jmp L_373191
.p2align 0x4
L_530852:
L_372952:
	movq $0x6,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530854:
L_373161:
	movq 0x88(%rbp),%r15
	movq $0x191D,0xFFFFFFFFFFFFFFF8(%r15)
	movl 0x14(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_530864
L_373162:
	movq 0x80(%rbp),%rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_373006
L_373163:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0xAAB,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_373164+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373164
.p2align 0x4
.long 0x5598
L_373164:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq %rax,%r15
L_373165:
	xorq %r14,%r14
.p2align 0x4,,0x7
loop_3766:
	cmpq 0x80(%rbp),%r14
	jnl L_530859
L_373173:
	movl %r14d,%r11d
	movslq %r11d,%r13
	movq 0x58(%rbp),%r11
	cmpq 0xFFFFFFFFFFFFFFF0(%r11),%r13
	jnb L_372952
L_373175:
	movq 0x0(%r11,%r13,8),%r10
	movq 0x70(%rbp),%r11
	cmpq 0xFFFFFFFFFFFFFFF0(%r11),%r13
	jnb L_372952
L_373177:
	movq 0x0(%r11,%r13,8),%r9
	cmpq $0x1,%r10
	je L_530856
L_373178:
	cmpq $0x1,%r9
	jne L_373081
	movq %r10,%r13
L_373180:
	movq %r15,%r11
	shrq $0x8,%r11
	movq (gcState+0x3C8)(%rip),%r10
	movb $0x1,0x0(%r10,%r11,1)
	movq %r13,0x0(%r15,%r14,8)
	incq %r14
	jmp loop_3766
.p2align 0x4
L_530856:
L_373181:
	movq %r9,%r13
	jmp L_373180
.p2align 0x4
L_530859:
L_373166:
	movq $0x191D,0xFFFFFFFFFFFFFFF8(%r15)
	cmpq $0x1,0x50(%rbp)
	je L_530861
L_373167:
	movq 0x48(%rbp),%r14
	cmpq $0x1,%r14
	je L_530860
L_373168:
	movq %r15,0x58(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x48(%rbp)
	movq 0x88(%rbp),%r14
	movq %r14,0x60(%rbp)
	jmp L_373155
.p2align 0x4
L_530860:
L_373169:
	movq %r15,0x8(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq 0x88(%rbp),%r15
	movq %r15,0x10(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530861:
L_373170:
	movq 0x48(%rbp),%r14
	cmpq $0x1,%r14
	je L_530862
L_373171:
	movq %r15,0x58(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x48(%rbp)
	movq 0x68(%rbp),%r14
	movq %r14,0x50(%rbp)
	movq 0x88(%rbp),%r14
	movq %r14,0x60(%rbp)
	jmp L_373155
.p2align 0x4
L_530862:
L_373172:
	movq %r15,0x8(%rbp)
	movq 0x68(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq 0x88(%rbp),%r15
	movq %r15,0x10(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530864:
L_373183:
	movq (globalObjptr+0x1448)(%rip),%r15
	jmp L_373165
.p2align 0x4
L_530866:
L_373194:
	movq (globalObjptr+0x1448)(%rip),%r15
	movq %r15,0x88(%rbp)
	jmp L_373160
.p2align 0x4
.long 0x5590
L_373025:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq 0x70(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq 0x78(%rbp),%r15
	movq %r15,0x70(%rbp)
	movq 0x80(%rbp),%r15
	movq %r15,0x78(%rbp)
	movq 0x58(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movl %r13d,0x14(%rbp)
	movslq %r13d,%r11
	movq %r11,0x80(%rbp)
	cmpq %r11,%r14
	jne L_372936
L_373027:
	cmpl $0x0,%r13d
	jl L_372961
L_373028:
	movl $0x0,0x88(%rbp)
.p2align 0x4,,0x7
loop_3759:
	movl 0x88(%rbp),%r15d
	cmpl 0x14(%rbp),%r15d
	jnl L_530873
L_373130:
	movslq %r15d,%r14
	movq %r14,0x90(%rbp)
	movq 0x58(%rbp),%r15
	movq 0x0(%r15,%r14,8),%r13
	movq %r13,0x98(%rbp)
	cmpq $0x1,%r13
	je L_373136
L_373131:
	movq 0x78(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movl %r13d,0x8C(%rbp)
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_372936
L_373133:
	cmpl $0x0,%r13d
	jl L_372961
L_373134:
	movl $0x0,0xA0(%rbp)
loop_3764:
	movl 0xA0(%rbp),%r15d
	cmpl 0x8C(%rbp),%r15d
	jnl L_530869
L_373137:
	movslq %r15d,%r14
	movq %r14,0xA8(%rbp)
	movq 0x78(%rbp),%r15
	movq 0x0(%r15,%r14,8),%r13
	movq %r13,0xB0(%rbp)
	cmpq $0x1,%r13
	jne L_530867
.p2align 0x4,,0x7
L_373145:
	incl 0xA0(%rbp)
	jmp loop_3764
.p2align 0x4
L_530867:
L_373138:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_373139
L_373146:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xC0,%rbp
	leaq (L_373147+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373147
.p2align 0x4
.long 0x559C
L_373147:
	addq $0xFFFFFFFFFFFFFF40,%rbp
L_373139:
	movq $0x28D1,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0xB0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x28D1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x98(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0xB8(%rbp)
	addq $0xB8,%rbp
	leaq (L_373140+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_13
.p2align 0x4
L_530869:
L_373136:
	incl 0x88(%rbp)
	jmp loop_3759
.p2align 0x4
L_530873:
L_373029:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_373030
L_373128:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r14d
	movl %r14d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r14
	movq %r14,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_373129+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373129
.p2align 0x4
.long 0x5593
L_373129:
	addq $0xFFFFFFFFFFFFFF70,%rbp
L_373030:
	cmpq $0x1,0x50(%rbp)
	je L_530907
L_373031:
	movq 0x78(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%rdx
	movq %rdx,0x88(%rbp)
	cmpq %rdx,%r14
	jne L_372936
L_373033:
	testq %rdx,%rdx
	jz L_530905
L_373034:
	cmpq $0x7FFFFFFF,%rdx
	ja L_373006
L_373035:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0xAAB,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_373036+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373036
.p2align 0x4
.long 0x5591
L_373036:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq %rax,0x90(%rbp)
L_373037:
	movq $0x0,0x98(%rbp)
.p2align 0x4,,0x7
loop_3760:
	movq 0x98(%rbp),%r14
	cmpq 0x88(%rbp),%r14
	jnl L_530876
L_373115:
	movl %r14d,%r13d
	movslq %r13d,%r15
	movq 0x78(%rbp),%r14
	movq 0x0(%r14,%r15,8),%r13
	movq %r13,0xA0(%rbp)
	cmpq $0x1,%r13
	jne L_530874
L_373122:
	movq $0x1,%r15
.p2align 0x4,,0x7
L_373119:
	movq 0x90(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq 0x98(%rbp),%r13
	movq %r15,0x0(%r14,%r13,8)
	incq %r13
	movq %r13,0x98(%rbp)
	jmp loop_3760
.p2align 0x4
L_530874:
L_373116:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_373117
L_373120:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB0,%rbp
	leaq (L_373121+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373121
.p2align 0x4
.long 0x559A
L_373121:
	addq $0xFFFFFFFFFFFFFF50,%rbp
L_373117:
	movq $0x28D1,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0xA0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x28D1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x50(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0xA8(%rbp)
	addq $0xA8,%rbp
	leaq (L_373118+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_13
.p2align 0x4
L_530876:
L_373038:
	movq 0x90(%rbp),%r15
	movq $0x191D,0xFFFFFFFFFFFFFFF8(%r15)
	movslq 0x10(%rbp),%rdx
	movq %rdx,0x78(%rbp)
	testq %rdx,%rdx
	jz L_530903
L_373039:
	cmpq $0x7FFFFFFF,%rdx
	ja L_373006
L_373040:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0xAAB,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA0,%rbp
	leaq (L_373041+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373041
.p2align 0x4
.long 0x5592
L_373041:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq %rax,0x88(%rbp)
L_373042:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_3761:
	cmpq 0x78(%rbp),%r15
	jnl L_530881
L_373104:
	movl %r15d,%r13d
	movslq %r13d,%r14
	movq 0x60(%rbp),%r13
	cmpq 0xFFFFFFFFFFFFFFF0(%r13),%r14
	jnb L_372952
L_373106:
	movq 0x0(%r13,%r14,8),%r11
	movq 0x90(%rbp),%r13
	cmpq 0xFFFFFFFFFFFFFFF0(%r13),%r14
	jnb L_372952
L_373108:
	movq 0x0(%r13,%r14,8),%r10
	cmpq $0x1,%r11
	je L_530878
L_373109:
	cmpq $0x1,%r10
	jne L_373081
	movq %r11,%r14
L_373111:
	movq 0x88(%rbp),%r13
	movq %r13,%r11
	shrq $0x8,%r11
	movq (gcState+0x3C8)(%rip),%r10
	movb $0x1,0x0(%r10,%r11,1)
	movq %r14,0x0(%r13,%r15,8)
	incq %r15
	jmp loop_3761
.p2align 0x4
L_530878:
L_373112:
	movq %r10,%r14
	jmp L_373111
.p2align 0x4
L_530881:
L_373043:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_373044
L_373102:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_373103+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373103
.p2align 0x4
.long 0x5598
L_373103:
	addq $0xFFFFFFFFFFFFFF68,%rbp
L_373044:
	movq 0x88(%rbp),%r15
	movq $0x191D,0xFFFFFFFFFFFFFFF8(%r15)
	movq 0x68(%rbp),%r14
	cmpq $0x1,%r14
	je L_530899
L_373045:
	movq %r14,0x60(%rbp)
	movq %r15,0x78(%rbp)
L_373046:
	movq 0x80(%rbp),%rdx
	testq %rdx,%rdx
	jz L_530898
L_373047:
	cmpq $0x7FFFFFFF,%rdx
	ja L_373006
L_373048:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0xAAB,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_373049+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373049
.p2align 0x4
.long 0x5593
L_373049:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq %rax,0x88(%rbp)
L_373050:
	movq $0x0,0x90(%rbp)
.p2align 0x4,,0x7
loop_3762:
	movq 0x90(%rbp),%r14
	cmpq 0x80(%rbp),%r14
	jnl L_530884
L_373087:
	movl %r14d,%r13d
	movslq %r13d,%r15
	movq 0x58(%rbp),%r14
	movq 0x0(%r14,%r15,8),%r13
	movq %r13,0x98(%rbp)
	cmpq $0x1,%r13
	jne L_530882
L_373094:
	movq $0x1,%r15
.p2align 0x4,,0x7
L_373091:
	movq 0x88(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq 0x90(%rbp),%r13
	movq %r15,0x0(%r14,%r13,8)
	incq %r13
	movq %r13,0x90(%rbp)
	jmp loop_3762
.p2align 0x4
L_530882:
L_373088:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_373089
L_373092:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA8,%rbp
	leaq (L_373093+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373093
.p2align 0x4
.long 0x5597
L_373093:
	addq $0xFFFFFFFFFFFFFF58,%rbp
L_373089:
	movq $0x28D1,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x98(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x28D1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x60(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0xA0(%rbp)
	addq $0xA0,%rbp
	leaq (L_373090+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_13
.p2align 0x4
L_530884:
L_373051:
	movq 0x88(%rbp),%r15
	movq $0x191D,0xFFFFFFFFFFFFFFF8(%r15)
	movslq 0x10(%rbp),%rdx
	movq %rdx,0x58(%rbp)
	testq %rdx,%rdx
	jz L_530896
L_373052:
	cmpq $0x7FFFFFFF,%rdx
	ja L_373006
L_373053:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0xAAB,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_373054+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373054
.p2align 0x4
.long 0x5594
L_373054:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq %rax,0x60(%rbp)
L_373055:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_3763:
	cmpq 0x58(%rbp),%r15
	jnl L_530889
L_373075:
	movl %r15d,%r13d
	movslq %r13d,%r14
	movq 0x70(%rbp),%r13
	cmpq 0xFFFFFFFFFFFFFFF0(%r13),%r14
	jnb L_372952
L_373077:
	movq 0x0(%r13,%r14,8),%r11
	movq 0x88(%rbp),%r13
	cmpq 0xFFFFFFFFFFFFFFF0(%r13),%r14
	jnb L_372952
L_373079:
	movq 0x0(%r13,%r14,8),%r10
	cmpq $0x1,%r11
	je L_530886
L_373080:
	cmpq $0x1,%r10
	jne L_373081
	movq %r11,%r14
L_373083:
	movq 0x60(%rbp),%r13
	movq %r13,%r11
	shrq $0x8,%r11
	movq (gcState+0x3C8)(%rip),%r10
	movb $0x1,0x0(%r10,%r11,1)
	movq %r14,0x0(%r13,%r15,8)
	incq %r15
	jmp loop_3763
.p2align 0x4
L_530886:
L_373084:
	movq %r10,%r14
	jmp L_373083
.p2align 0x4
L_530889:
L_373056:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_373057
L_373073:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_373074+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373074
.p2align 0x4
.long 0x5595
L_373074:
	addq $0xFFFFFFFFFFFFFF78,%rbp
L_373057:
	movq 0x60(%rbp),%r14
	movq $0x191D,0xFFFFFFFFFFFFFFF8(%r14)
L_373058:
	movq 0x50(%rbp),%r15
	andq $0x3,%r15
	jz L_530891
L_373059:
	movq 0x78(%rbp),%r15
L_373060:
	movq 0x48(%rbp),%r13
	cmpq $0x1,%r13
	je L_530890
L_373061:
	movq %r14,0x58(%rbp)
	movq %r15,0x60(%rbp)
	movq 0x0(%r13),%r15
	movq 0x8(%r13),%r13
	movq %r13,0x48(%rbp)
	movq $0x1,0x50(%rbp)
	jmp L_373024
.p2align 0x4
L_530890:
L_373062:
	movq %r14,0x8(%rbp)
	movq %r15,0x10(%rbp)
	movq $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530891:
L_373063:
	movq 0x50(%rbp),%r15
	movq 0x78(%rbp),%r13
	movq %r13,0x50(%rbp)
	movq %r14,0x58(%rbp)
L_373065:
	movq 0x68(%rbp),%r14
	movq %r14,%r13
	andq $0x3,%r13
	jnz L_530892
L_373069:
	movq $0x28D1,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	addq $0x18,%r12
	movq %r14,0x0(%r13)
	movq $0x1,0x8(%r13)
	movq $0x28D1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r13,0x8(%r14)
	movq %r14,0x68(%rbp)
	addq $0x18,%r12
	addq $0x68,%rbp
	leaq (L_373070+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_13
.p2align 0x4
L_530892:
L_373066:
	movq 0x48(%rbp),%r13
	cmpq $0x1,%r13
	je L_530893
L_373067:
	movq 0x0(%r13),%r15
	movq 0x8(%r13),%r13
	movq %r13,0x48(%rbp)
	movq 0x50(%rbp),%r13
	movq %r13,0x60(%rbp)
	movq $0x1,0x50(%rbp)
	jmp L_373024
.p2align 0x4
L_530893:
L_373068:
	movq $0x1,0x0(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x10(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530896:
L_373086:
	movq (globalObjptr+0x1448)(%rip),%r15
	movq %r15,0x60(%rbp)
	jmp L_373055
.p2align 0x4
L_530898:
L_373096:
	movq (globalObjptr+0x1440)(%rip),%r15
	movq %r15,0x88(%rbp)
	jmp L_373050
.p2align 0x4
L_530899:
L_373097:
L_373099:
	movq 0x50(%rbp),%r14
	andq $0x3,%r14
	jz L_530900
L_373100:
	movq 0x70(%rbp),%r14
	jmp L_373060
.p2align 0x4
L_530900:
L_373101:
	movq 0x70(%rbp),%r14
	movq %r14,0x58(%rbp)
	movq 0x50(%rbp),%r14
	movq %r15,0x50(%rbp)
	movq %r14,%r15
	jmp L_373065
.p2align 0x4
L_530903:
L_373114:
	movq (globalObjptr+0x1448)(%rip),%r15
	movq %r15,0x88(%rbp)
	jmp L_373042
.p2align 0x4
L_530905:
L_373124:
	movq (globalObjptr+0x1440)(%rip),%r15
	movq %r15,0x90(%rbp)
	jmp L_373037
.p2align 0x4
L_530907:
L_373125:
	movq 0x68(%rbp),%r15
	cmpq $0x1,%r15
	je L_530908
L_373126:
	movq 0x60(%rbp),%r14
	movq %r14,0x78(%rbp)
	movq %r15,0x60(%rbp)
	jmp L_373046
.p2align 0x4
L_530908:
L_373127:
	movq 0x60(%rbp),%r14
	xchgq %r14,%r15
	jmp L_373099
.p2align 0x4
.long 0x90E
L_372965:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x50(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq 0x68(%rbp),%r15
	movq %r15,0x60(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_372966
L_373020:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_373021+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373021
.p2align 0x4
.long 0x780
L_373021:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_372966:
	movq $0x1B8B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x48(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x68(%rbp)
	movq $0x1B8D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq %r12,(gcState+0x0)(%rip)
	movq %r14,0x0(%r15)
	movq %r15,0x70(%rbp)
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x1441,%rcx
	movq $0x1,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x80,%rbp
	leaq (L_372967+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_372967
.p2align 0x4
.long 0x16C8
L_372967:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movq %rax,0x78(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_3753:
	cmpq $0x1,%r15
	jnl L_530912
L_373019:
	movq 0x78(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq 0x68(%rbp),%r13
	movq %r13,0x0(%r14,%r15,8)
	incq %r15
	jmp loop_3753
.p2align 0x4
L_530912:
L_372968:
	movq 0x78(%rbp),%r15
	movq $0xF71,0xFFFFFFFFFFFFFFF8(%r15)
	movq 0x60(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%rdx
	movq %rdx,0x80(%rbp)
	cmpq %r14,%rdx
	jne L_372936
L_372970:
	testq %rdx,%rdx
	jz L_530928
L_372971:
	cmpq $0x7FFFFFFF,%rdx
	ja L_373006
L_372972:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0xAAB,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_372973+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_372973
.p2align 0x4
.long 0x5586
L_372973:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq %rax,0x88(%rbp)
L_372974:
	movq $0x0,0x90(%rbp)
.p2align 0x4,,0x7
loop_3754:
	movq 0x90(%rbp),%r14
	cmpq 0x80(%rbp),%r14
	jnl L_530915
L_373009:
	movl %r14d,%r13d
	movslq %r13d,%r15
	movq 0x60(%rbp),%r14
	movq 0x0(%r14,%r15,8),%r13
	movq %r13,0x98(%rbp)
	cmpq $0x1,%r13
	jne L_530913
L_373016:
	movq $0x1,%r15
.p2align 0x4,,0x7
L_373013:
	movq 0x88(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq 0x90(%rbp),%r13
	movq %r15,0x0(%r14,%r13,8)
	incq %r13
	movq %r13,0x90(%rbp)
	jmp loop_3754
.p2align 0x4
L_530913:
L_373010:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_373011
L_373014:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA8,%rbp
	leaq (L_373015+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373015
.p2align 0x4
.long 0x558F
L_373015:
	addq $0xFFFFFFFFFFFFFF58,%rbp
L_373011:
	movq $0x28D1,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x98(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x28D1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x78(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0xA0(%rbp)
	addq $0xA0,%rbp
	leaq (L_373012+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_13
.p2align 0x4
L_530915:
L_372975:
	movq 0x88(%rbp),%r15
	movq $0x191D,0xFFFFFFFFFFFFFFF8(%r15)
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x1441,%rcx
	movq $0x1,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_372976+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_372976
.p2align 0x4
.long 0x5587
L_372976:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq %rax,0x60(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_3755:
	cmpq $0x1,%r15
	jnl L_530916
L_373008:
	movq 0x60(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq 0x70(%rbp),%r13
	movq %r13,0x0(%r14,%r15,8)
	incq %r15
	jmp loop_3755
.p2align 0x4
L_530916:
L_372977:
	movq 0x60(%rbp),%r15
	movq $0xF71,0xFFFFFFFFFFFFFFF8(%r15)
	movq 0x58(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%rdx
	movq %rdx,0x78(%rbp)
	cmpq %rdx,%r14
	jne L_372936
L_372979:
	testq %rdx,%rdx
	jz L_530925
L_372980:
	cmpq $0x7FFFFFFF,%rdx
	ja L_373006
L_372981:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0xAAB,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_372982+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_372982
.p2align 0x4
.long 0x5588
L_372982:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq %rax,0x80(%rbp)
L_372983:
	movq $0x0,0x90(%rbp)
.p2align 0x4,,0x7
loop_3756:
	movq 0x90(%rbp),%r14
	cmpq 0x78(%rbp),%r14
	jnl L_530919
L_372997:
	movl %r14d,%r13d
	movslq %r13d,%r15
	movq 0x58(%rbp),%r14
	movq 0x0(%r14,%r15,8),%r13
	movq %r13,0x98(%rbp)
	cmpq $0x1,%r13
	jne L_530917
L_373004:
	movq $0x1,%r15
.p2align 0x4,,0x7
L_373001:
	movq 0x80(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq 0x90(%rbp),%r13
	movq %r15,0x0(%r14,%r13,8)
	incq %r13
	movq %r13,0x90(%rbp)
	jmp loop_3756
.p2align 0x4
L_530917:
L_372998:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_372999
L_373002:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA8,%rbp
	leaq (L_373003+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373003
.p2align 0x4
.long 0x558D
L_373003:
	addq $0xFFFFFFFFFFFFFF58,%rbp
L_372999:
	movq $0x28D1,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x98(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x28D1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x60(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0xA0(%rbp)
	addq $0xA0,%rbp
	leaq (L_373000+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_13
.p2align 0x4
L_530919:
L_372984:
	movq 0x80(%rbp),%r15
	movq $0x191D,0xFFFFFFFFFFFFFFF8(%r15)
	cmpq $0x1,0x50(%rbp)
	je L_530923
L_372985:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x1441,%rcx
	movq $0x1,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_372986+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_372986
.p2align 0x4
.long 0x5589
L_372986:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq %rax,0x58(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_3757:
	cmpq $0x1,%r15
	jnl L_530920
L_372995:
	movq 0x58(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq 0x68(%rbp),%r13
	movq %r13,0x0(%r14,%r15,8)
	incq %r15
	jmp loop_3757
.p2align 0x4
L_530920:
L_372987:
	movq 0x58(%rbp),%r15
	movq $0xF71,0xFFFFFFFFFFFFFFF8(%r15)
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x1441,%rcx
	movq $0x1,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_372988+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_372988
.p2align 0x4
.long 0x558A
L_372988:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq %rax,0x60(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_3758:
	cmpq $0x1,%r15
	jnl L_530921
L_372994:
	movq 0x60(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq 0x70(%rbp),%r13
	movq %r13,0x0(%r14,%r15,8)
	incq %r15
	jmp loop_3758
.p2align 0x4
L_530921:
L_372989:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_372990
L_372992:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_372993+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_372993
.p2align 0x4
.long 0x558B
L_372993:
	addq $0xFFFFFFFFFFFFFF68,%rbp
L_372990:
	movq 0x60(%rbp),%r15
	movq $0xF71,0xFFFFFFFFFFFFFFF8(%r15)
	movq $0x28D1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movq %r15,0x0(%r14)
	movq $0x1,0x8(%r14)
	movq $0x28D1,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq 0x50(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x28D1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x58(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x98(%rbp)
	addq $0x98,%rbp
	leaq (L_372991+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_13
.p2align 0x4
L_530923:
L_372996:
	movq $0x1,0x0(%rbp)
	movq 0x80(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x88(%rbp),%r15
	movq %r15,0x10(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530925:
L_373007:
	movq (globalObjptr+0x1440)(%rip),%r15
	movq %r15,0x80(%rbp)
	jmp L_372983
.p2align 0x4
L_530928:
L_373018:
	movq (globalObjptr+0x1440)(%rip),%r15
	movq %r15,0x88(%rbp)
	jmp L_372974
.p2align 0x4
.long 0x5584
L_372950:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq 0x68(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq 0x20(%rbp),%r14
	movq 0x10(%r14),%r13
	movq 0x8(%r14),%r11
	movq 0x48(%rbp),%r10
	cmpq 0x0(%r14),%r10
	jnb L_372952
L_372953:
	movq 0x58(%rbp),%r14
	cmpq %r11,%r14
	jnb L_372952
L_372955:
	imulq %r10,%r11
	addq %r14,%r11
	movq %r13,%r14
	shrq $0x8,%r14
	movq (gcState+0x3C8)(%rip),%r10
	movb $0x1,0x0(%r10,%r14,1)
	movq %r15,0x0(%r13,%r11,8)
	jmp L_372956
.p2align 0x4
.long 0x559B
L_373140:
	addq $0xFFFFFFFFFFFFFF48,%rbp
	movq 0xB8(%rbp),%r15
	movq %r15,0xB0(%rbp)
	movq 0x20(%rbp),%r14
	movq 0x10(%r14),%r13
	movq 0x8(%r14),%r11
	movq 0x90(%rbp),%r10
	cmpq 0x0(%r14),%r10
	jnb L_372952
L_373142:
	movq 0xA8(%rbp),%r14
	cmpq %r11,%r14
	jnb L_372952
L_373144:
	imulq %r10,%r11
	addq %r14,%r11
	movq %r13,%r14
	shrq $0x8,%r14
	movq (gcState+0x3C8)(%rip),%r10
	movb $0x1,0x0(%r10,%r14,1)
	movq %r15,0x0(%r13,%r11,8)
	jmp L_373145
.p2align 0x4
.long 0x5599
L_373118:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movq 0xA8(%rbp),%r15
	movq %r15,0xA0(%rbp)
	jmp L_373119
.p2align 0x4
.long 0x5596
L_373090:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x98(%rbp)
	jmp L_373091
.p2align 0x4
.long 0xA37
L_373070:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq 0x68(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq 0x48(%rbp),%r14
	cmpq $0x1,%r14
	je L_530935
L_373071:
	movq 0x0(%r14),%r13
	movq 0x8(%r14),%r14
	movq %r14,0x48(%rbp)
	movq 0x50(%rbp),%r14
	movq %r15,0x50(%rbp)
	movq %r14,0x60(%rbp)
	movq %r13,%r15
	jmp L_373024
.p2align 0x4
L_530935:
L_373072:
	movq %r15,0x0(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x10(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x558E
L_373012:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x98(%rbp)
	jmp L_373013
.p2align 0x4
.long 0x558C
L_373000:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x98(%rbp)
	jmp L_373001
.p2align 0x4
.long 0xD6E
L_372991:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq 0x98(%rbp),%r15
	movq %r15,0x90(%rbp)
	movq %r15,0x0(%rbp)
	movq 0x80(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x88(%rbp),%r15
	movq %r15,0x10(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl concat_13
.hidden concat_13
concat_13:
L_373227:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_373228
L_373271:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_373272+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373272
.p2align 0x4
.long 0x452
L_373272:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_373228:
	movq 0x0(%rbp),%r15
	cmpq $0x1,%r15
	je L_530951
L_373229:
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	movq %r15,0x0(%rbp)
	movq %r14,0x8(%rbp)
	movq $0x1,0x10(%rbp)
.p2align 0x4,,0x7
L_373230:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_530950
.p2align 0x4,,0x7
L_373231:
	movq 0x8(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movq $0xF73,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x0(%r13)
	addq $0x18,%r12
	movq %r15,0x8(%r13)
	movq $0x296B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq %r13,0x0(%r15)
	movq 0x10(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x0(%rbp),%r14
	cmpq $0x1,%r14
	je L_530936
L_373232:
	movq %r15,0x10(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x0(%rbp)
	movq %r15,0x8(%rbp)
	jmp L_373230
.p2align 0x4
L_530936:
L_373233:
	movq %r13,0x8(%rbp)
	movq 0x10(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq $0x1,0x10(%rbp)
.p2align 0x4,,0x7
L_373234:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_530949
.p2align 0x4,,0x7
L_373235:
	movq $0x296B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x8(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x10(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x0(%rbp),%r14
	cmpq $0x1,%r14
	je L_530937
L_373236:
	movq %r15,0x10(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x0(%rbp)
	movq %r15,0x8(%rbp)
	jmp L_373234
.p2align 0x4
L_530937:
L_373237:
	movq 0x10(%rbp),%r13
	cmpq $0x1,%r13
	je L_530944
L_373238:
	movq 0x8(%rbp),%r11
	xorq %r15,%r15
	xchgq %r11,%r14
.p2align 0x4,,0x7
L_373239:
	addq 0x0(%r14),%r15
	movq %r15,0x18(%rbp)
	cmpq $0x1,%r13
	je L_530938
L_373240:
	movq 0x0(%r13),%r14
	movq 0x8(%r13),%r13
	jmp L_373239
.p2align 0x4
L_530938:
L_373241:
	testq %r15,%r15
	jz L_530943
L_373242:
	cmpq $0x7FFFFFFF,%r15
	ja L_530942
L_373243:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x1441,%rcx
	movq %r15,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_373244+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373244
.p2align 0x4
.long 0x49C
L_373244:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq %rax,%r15
L_373245:
	movq 0x10(%rbp),%r10
	movq 0x8(%rbp),%r11
	xorq %r13,%r13
	xorq %r14,%r14
.p2align 0x4,,0x7
loop_3769:
	cmpq 0x18(%rbp),%r14
	jnl L_530941
.p2align 0x4,,0x7
loop_3770:
	cmpq 0x0(%r11),%r13
	jl L_530940
L_373248:
	cmpq $0x1,%r10
	je L_530939
L_373249:
	movq 0x0(%r10),%r9
	movq 0x8(%r10),%r10
	xorq %r13,%r13
	movq %r9,%r11
	jmp loop_3770
.p2align 0x4
L_530939:
L_373250:
	movq (globalObjptr+0x5B8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530940:
L_373251:
	movq 0x8(%r11),%r9
	movq 0x0(%r9,%r13,8),%r8
	incq %r13
	movq %r15,%r9
	shrq $0x8,%r9
	movq (gcState+0x3C8)(%rip),%rsp
	movb $0x1,0x0(%rsp,%r9,1)
	movq %r8,0x0(%r15,%r14,8)
	incq %r14
	jmp loop_3769
.p2align 0x4
L_530941:
L_373246:
	movq $0xF71,0xFFFFFFFFFFFFFFF8(%r15)
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530942:
L_373253:
	movq $0x5,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530943:
L_373254:
	movq (globalObjptr+0x6B8)(%rip),%r14
	xchgq %r14,%r15
	jmp L_373245
.p2align 0x4
L_530944:
L_373255:
	movq 0x8(%rbp),%r15
	movq 0x8(%r15),%r13
	movq 0x0(%r15),%rdx
	movq %rdx,0x18(%rbp)
	cmpq %rdx,0xFFFFFFFFFFFFFFF0(%r13)
	movq %r13,0x10(%rbp)
	je L_530948
L_373256:
	testq %rdx,%rdx
	jz L_530947
L_373257:
	cmpq $0x7FFFFFFF,%rdx
	ja L_373253
L_373258:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x1441,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_373259+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373259
.p2align 0x4
.long 0x4A5
L_373259:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq %rax,%r15
L_373260:
	xorq %r14,%r14
.p2align 0x4,,0x7
loop_3771:
	cmpq 0x18(%rbp),%r14
	jnl L_530945
L_373262:
	movq 0x10(%rbp),%r13
	movq 0x0(%r13,%r14,8),%r11
	movq %r15,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r10
	movb $0x1,0x0(%r10,%r13,1)
	movq %r11,0x0(%r15,%r14,8)
	incq %r14
	jmp loop_3771
.p2align 0x4
L_530945:
L_373261:
	movq $0xF71,0xFFFFFFFFFFFFFFF8(%r15)
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530947:
L_373264:
	movq (globalObjptr+0x6C0)(%rip),%r15
	jmp L_373260
.p2align 0x4
L_530948:
L_373265:
	movq 0x10(%rbp),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530949:
L_373266:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_373267+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373267
.p2align 0x4
.long 0x45C
L_373267:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	jmp L_373235
.p2align 0x4
L_530950:
L_373268:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_373269+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373269
.p2align 0x4
.long 0x45C
L_373269:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	jmp L_373231
.p2align 0x4
L_530951:
L_373270:
	movq (globalObjptr+0x6C8)(%rip),%r14
	movq $0xF71,0xFFFFFFFFFFFFFFF8(%r14)
	movq %r14,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl processEnabled_0
.hidden processEnabled_0
processEnabled_0:
L_373273:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_373274
L_373393:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_373394+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_373394
.p2align 0x4
.long 0x4E9
L_373394:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_373274:
	movq 0x8(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	movl %r15d,%r14d
	movl %r14d,0x4(%rbp)
	movslq %r14d,%r13
	cmpq %r13,%r15
	jne L_530984
L_373277:
	xorl %ebx,%ebx
	xorl %ecx,%ecx
.p2align 0x4,,0x7
loop_3772:
	cmpl 0x4(%rbp),%ecx
	jnl L_530955
L_373389:
	movl %ecx,%r14d
	incl %r14d
	movslq %ecx,%r13
	cmpq %r15,%r13
	jnb L_530954
L_373391:
	incl %ebx
	jo L_530953
L_373392:
	movl %r14d,%ecx
	jmp loop_3772
.p2align 0x4
L_530953:
L_373284:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530954:
L_373281:
	movq $0x6,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530955:
L_373278:
	movl $0x0,0x18(%rbp)
.p2align 0x4,,0x7
loop_3773:
	movl 0x18(%rbp),%r14d
	cmpl %ebx,%r14d
	je L_530959
L_373279:
	movslq %r14d,%r13
	cmpq %r15,%r13
	jnb L_373281
L_373282:
	movq 0x8(%rbp),%r11
	cmpb $0x3A,0x0(%r11,%r13,1)
	je L_530957
L_373283:
	incl %r14d
	jo L_373284
L_373285:
	movl %r14d,0x18(%rbp)
	jmp loop_3773
.p2align 0x4
L_530957:
L_373286:
	movl %r14d,%r15d
	shlq $0x1,%r15
	orq $0x1,%r15
	movq %r15,0x28(%rbp)
	movl $0x0,0x30(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x38(%rbp)
	addq $0x28,%rbp
	leaq (L_373287+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp extract_0
.p2align 0x4
L_530959:
L_373388:
	movq 0x8(%rbp),%r15
parseId_0:
	movq 0x10(%rbp),%r14
.p2align 0x4,,0x7
loop_3775:
	movq 0x10(%r14),%r13
	movq 0x8(%r14),%r11
	movq 0x0(%r14),%r8
	cmpq %r8,%r15
	je L_530983
L_373303:
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r10
	cmpq %r10,0xFFFFFFFFFFFFFFF0(%r8)
	jne L_530982
L_373355:
	xorq %r9,%r9
	movq %r8,%r14
.p2align 0x4,,0x7
vectorEqualLoop_278:
	cmpq %r9,%r10
	je L_530981
L_373356:
	movb 0x0(%r15,%r9,1),%r8b
	cmpb %r8b,0x0(%r14,%r9,1)
	jne L_530960
L_373358:
	incq %r9
	jmp vectorEqualLoop_278
.p2align 0x4
L_530960:
	movq %r10,%r14
L_373305:
	cmpq $0x1,%r13
	je L_530980
L_373306:
	movq 0xFFFFFFFFFFFFFFF8(%r13),%r11
	shrq $0x1,%r11
	cmpq $0x2494,%r11
	jne L_530979
L_373307:
	movq 0x0(%r13),%r11
	movq %r11,%r13
.p2align 0x4,,0x7
loop_3776:
	movq 0x10(%r13),%r11
	movq 0x8(%r13),%r10
	movq 0x0(%r13),%r8
	cmpq %r15,%r8
	je L_530978
L_373308:
	cmpq %r14,0xFFFFFFFFFFFFFFF0(%r8)
	jne L_373310
L_373347:
	xorq %r9,%r9
	movq %r8,%r13
.p2align 0x4,,0x7
vectorEqualLoop_277:
	cmpq %r9,%r14
	je L_530976
L_373348:
	movb 0x0(%r15,%r9,1),%r8b
	cmpb %r8b,0x0(%r13,%r9,1)
	jne L_530961
L_373350:
	incq %r9
	jmp vectorEqualLoop_277
.p2align 0x4
L_530961:
L_373310:
	movq 0xFFFFFFFFFFFFFFF8(%r11),%r10
	shrq $0x1,%r10
	cmpq $0x2497,%r10
	je L_530967
	cmpq $0x2498,%r10
	je L_530966
L_373311:
	movq 0x8(%r11),%r9
	movq 0x0(%r11),%r13
	cmpq (globalObjptr+0xBD50)(%rip),%r15
	je L_530965
L_373312:
	cmpq $0xC,%r14
	jne loop_3776
L_373314:
	xorq %r10,%r10
	movq %r9,%r11
.p2align 0x4,,0x7
vectorEqualLoop_273:
	cmpq %r14,%r10
	je L_530963
L_373315:
	movq (globalObjptr+0xBD50)(%rip),%r8
	movb 0x0(%r8,%r10,1),%r9b
	cmpb %r9b,0x0(%r15,%r10,1)
	jne loop_3776
L_373317:
	incq %r10
	jmp vectorEqualLoop_273
.p2align 0x4
L_530963:
L_373318:
	movq %r11,%r15
L_373319:
	movq 0x10(%r15),%r14
	movl 0x0(%rbp),%r13d
	movl %r13d,0x0(%r14)
	movb $0x0,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530965:
L_373320:
	movq %r9,%r15
	jmp L_373319
.p2align 0x4
L_530966:
L_373346:
	movq 0x0(%r11),%r13
	jmp loop_3776
.p2align 0x4
L_530967:
L_373321:
	movq 0x18(%r11),%rsp
	movq 0x10(%r11),%r10
	movq 0x8(%r11),%r9
	movq 0x0(%r11),%r13
	cmpq (globalObjptr+0xBD38)(%rip),%r15
	je L_530975
L_373322:
	cmpq $0x15,%r14
	jne vectorEqual_100
L_373340:
	xorq %r8,%r8
	movq %rsp,%r11
.p2align 0x4,,0x7
vectorEqualLoop_276:
	cmpq %r14,%r8
	je L_530974
L_373341:
	movq (globalObjptr+0xBD38)(%rip),%rsp
	movb 0x0(%r15,%r8,1),%sil
	cmpb %sil,0x0(%rsp,%r8,1)
	jne vectorEqual_296
L_373343:
	incq %r8
	jmp vectorEqualLoop_276
.p2align 0x4
vectorEqual_296:
vectorEqual_100:
	cmpq %r15,(globalObjptr+0xBD30)(%rip)
	je L_530973
L_373324:
	cmpq $0x6,%r14
	jne vectorEqual_101
L_373334:
	xorq %r11,%r11
.p2align 0x4,,0x7
vectorEqualLoop_275:
	cmpq %r14,%r11
	je L_530972
L_373335:
	movq (globalObjptr+0xBD30)(%rip),%rsp
	movb 0x0(%rsp,%r11,1),%r8b
	cmpb %r8b,0x0(%r15,%r11,1)
	jne vectorEqual_297
L_373337:
	incq %r11
	jmp vectorEqualLoop_275
.p2align 0x4
vectorEqual_297:
vectorEqual_101:
	cmpq (globalObjptr+0xBD20)(%rip),%r15
	je L_530971
L_373326:
	cmpq $0x9,%r14
	jne L_530970
L_373328:
	xorq %r11,%r11
.p2align 0x4,,0x7
vectorEqualLoop_274:
	cmpq %r11,%r14
	je L_530969
L_373329:
	movq (globalObjptr+0xBD20)(%rip),%r8
	movb 0x0(%r8,%r11,1),%r10b
	cmpb %r10b,0x0(%r15,%r11,1)
	jne L_530968
L_373331:
	incq %r11
	jmp vectorEqualLoop_274
.p2align 0x4
L_530968:
L_373330:
	movq %r13,%r14
	jmp loop_3775
.p2align 0x4
L_530969:
L_373332:
	movq %r9,%r15
	jmp L_373319
.p2align 0x4
L_530970:
L_373327:
	movq %r13,%r14
	jmp loop_3775
.p2align 0x4
L_530971:
L_373333:
	movq %r9,%r15
	jmp L_373319
.p2align 0x4
L_530972:
L_373338:
	movq %r10,%r15
	jmp L_373319
.p2align 0x4
L_530973:
L_373339:
	movq %r10,%r15
	jmp L_373319
.p2align 0x4
L_530974:
L_373344:
	movq %r11,%r15
	jmp L_373319
.p2align 0x4
L_530975:
L_373345:
	movq %rsp,%r15
	jmp L_373319
.p2align 0x4
L_530976:
L_373351:
	movq %r10,%r15
	jmp L_373319
.p2align 0x4
L_530978:
L_373352:
	movq %r10,%r15
	jmp L_373319
.p2align 0x4
L_530979:
L_373353:
	movq 0x0(%r13),%r14
	jmp loop_3775
.p2align 0x4
L_530980:
L_373297:
	movb $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_530981:
L_373359:
	movq %r11,%r15
	jmp L_373319
.p2align 0x4
L_530982:
	movq %r10,%r14
	jmp L_373305
.p2align 0x4
L_530983:
L_373360:
	movq %r11,%r15
	jmp L_373319
.p2align 0x4
L_530984:
L_373276:
	movq (globalObjptr+0x518)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x4F5
L_373287:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r14
	movq %r14,0x20(%rbp)
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	movl %r15d,%ecx
	movslq %ecx,%r14
	cmpq %r15,%r14
	jne L_373276
L_373289:
	xorl %ebx,%ebx
.p2align 0x4,,0x7
loop_3774:
	cmpl %ecx,%ebx
	jnl L_530997
L_373362:
	movslq %ebx,%r14
	cmpq %r15,%r14
	jnb L_373281
L_373364:
	movq 0x20(%rbp),%r13
	movb 0x0(%r13,%r14,1),%r11b
	cmpb $0xD,%r11b
	ja L_530994
L_373365:
	cmpb $0x9,%r11b
	jb L_530986
L_373367:
	incl %ebx
	jmp loop_3774
.p2align 0x4
L_530986:
L_373369:
	decl %ecx
.p2align 0x4,,0x7
loop_3777:
	movslq %ecx,%r14
	cmpq %r15,%r14
	jnb L_373281
L_373371:
	movq 0x20(%rbp),%r13
	movb 0x0(%r13,%r14,1),%r11b
	cmpl %ecx,%ebx
	jnl L_530992
L_373374:
	cmpb $0xD,%r11b
	ja L_530990
L_373375:
	cmpb $0x9,%r11b
	jb L_530987
L_373377:
	decl %ecx
	jmp loop_3777
.p2align 0x4
L_530987:
L_373379:
	subl %ebx,%ecx
	jo L_373284
L_373380:
	incl %ecx
	jo L_373284
L_373381:
	movl %ebx,0x30(%rbp)
	movl %ecx,%r15d
	shlq $0x1,%r15
	orq $0x1,%r15
	movq %r15,0x28(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x38(%rbp)
	addq $0x28,%rbp
	leaq (L_373373+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp extract_0
.p2align 0x4
L_530990:
L_373382:
	cmpb $0x20,%r11b
	jne L_373379
	jmp L_373377
.p2align 0x4
L_530992:
L_373372:
	movzbq %r11b,%r15
	shlq $0x4,%r15
	orq $0x9,%r15
	movq %r15,0x28(%rbp)
	movl $0x1,0x30(%rbp)
	addq $0x28,%rbp
	leaq (L_373373+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_0
.p2align 0x4
L_530994:
L_373385:
	cmpb $0x20,%r11b
	jne L_373369
	jmp L_373367
.p2align 0x4
L_530997:
L_373291:
	movl 0x18(%rbp),%r15d
	incl %r15d
	jo L_373284
L_373292:
	movl 0x4(%rbp),%r14d
	subl %r15d,%r14d
	jo L_373284
L_373293:
	movl %r15d,0x38(%rbp)
	movl %r14d,%r15d
	shlq $0x1,%r15
	orq $0x1,%r15
	movq %r15,0x30(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x40(%rbp)
	addq $0x30,%rbp
	leaq (L_373294+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp extract_0
.p2align 0x4
.long 0x4F5
L_373373:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%rbp)
	jmp L_373291
.p2align 0x4
.long 0x2
L_373294:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq 0x30(%rbp),%r13
	movq %r13,0x8(%rbp)
	movq 0x20(%rbp),%r13
	cmpq %r13,(globalObjptr+0x10CF0)(%rip)
	je L_531004
L_373295:
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r15
	cmpq $0x5,%r15
	jne L_373297
L_373298:
	xorq %r14,%r14
.p2align 0x4,,0x7
vectorEqualLoop_272:
	cmpq %r15,%r14
	je L_531002
L_373299:
	movq 0x20(%rbp),%r13
	movq (globalObjptr+0x10CF0)(%rip),%r10
	movb 0x0(%r10,%r14,1),%r11b
	cmpb %r11b,0x0(%r13,%r14,1)
	jne L_373297
L_373301:
	incq %r14
	jmp vectorEqualLoop_272
.p2align 0x4
L_531002:
L_373302:
	movq 0x8(%rbp),%r15
	jmp parseId_0
.p2align 0x4
L_531004:
L_373361:
	movq 0x8(%rbp),%r15
	jmp parseId_0
